
/*
 * generated by Xtext
 */
lexer grammar InternalBlorqueScriptLexer;


@header {
package org.example.blorquescript.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}




Continue : ('C'|'c')('O'|'o')('N'|'n')('T'|'t')('I'|'i')('N'|'n')('U'|'u')('E'|'e');

Default : ('D'|'d')('E'|'e')('F'|'f')('A'|'a')('U'|'u')('L'|'l')('T'|'t');

Package : ('P'|'p')('A'|'a')('C'|'c')('K'|'k')('A'|'a')('G'|'g')('E'|'e');

Client : ('C'|'c')('L'|'l')('I'|'i')('E'|'e')('N'|'n')('T'|'t');

Import : ('I'|'i')('M'|'m')('P'|'p')('O'|'o')('R'|'r')('T'|'t');

Number : ('N'|'n')('U'|'u')('M'|'m')('B'|'b')('E'|'e')('R'|'r');

Object : ('O'|'o')('B'|'b')('J'|'j')('E'|'e')('C'|'c')('T'|'t');

Parent : ('P'|'p')('A'|'a')('R'|'r')('E'|'e')('N'|'n')('T'|'t');

Return : ('R'|'r')('E'|'e')('T'|'t')('U'|'u')('R'|'r')('N'|'n');

String : ('S'|'s')('T'|'t')('R'|'r')('I'|'i')('N'|'n')('G'|'g');

Switch : ('S'|'s')('W'|'w')('I'|'i')('T'|'t')('C'|'c')('H'|'h');

Break : ('B'|'b')('R'|'r')('E'|'e')('A'|'a')('K'|'k');

Class : ('C'|'c')('L'|'l')('A'|'a')('S'|'s')('S'|'s');

False : ('F'|'f')('A'|'a')('L'|'l')('S'|'s')('E'|'e');

While : ('W'|'w')('H'|'h')('I'|'i')('L'|'l')('E'|'e');

Case : ('C'|'c')('A'|'a')('S'|'s')('E'|'e');

Else : ('E'|'e')('L'|'l')('S'|'s')('E'|'e');

Null : ('N'|'n')('U'|'u')('L'|'l')('L'|'l');

This : ('T'|'t')('H'|'h')('I'|'i')('S'|'s');

True : ('T'|'t')('R'|'r')('U'|'u')('E'|'e');

LessThanSignLessThanSignEqualsSign : '<''<''=';

GreaterThanSignGreaterThanSignEqualsSign : '>''>''=';

SPC : ('S'|'s')('P'|'p')('C'|'c');

TAB : ('T'|'t')('A'|'a')('B'|'b');

For : ('F'|'f')('O'|'o')('R'|'r');

New : ('N'|'n')('E'|'e')('W'|'w');

ExclamationMarkEqualsSign : '!''=';

PercentSignEqualsSign : '%''=';

AmpersandAmpersand : '&''&';

AmpersandEqualsSign : '&''=';

AsteriskEqualsSign : '*''=';

PlusSignPlusSign : '+''+';

PlusSignEqualsSign : '+''=';

HyphenMinusHyphenMinus : '-''-';

HyphenMinusEqualsSign : '-''=';

FullStopAsterisk : '.''*';

SolidusEqualsSign : '/''=';

LessThanSignLessThanSign : '<''<';

LessThanSignEqualsSign : '<''=';

EqualsSignEqualsSign : '=''=';

GreaterThanSignEqualsSign : '>''=';

GreaterThanSignGreaterThanSign : '>''>';

CommercialAtEqualsSign : '@''=';

NL : ('N'|'n')('L'|'l');

CircumflexAccentEqualsSign : '^''=';

If : ('I'|'i')('F'|'f');

VerticalLineEqualsSign : '|''=';

VerticalLineVerticalLine : '|''|';

ExclamationMark : '!';

DollarSign : '$';

PercentSign : '%';

Ampersand : '&';

LeftParenthesis : '(';

RightParenthesis : ')';

Asterisk : '*';

PlusSign : '+';

Comma : ',';

HyphenMinus : '-';

FullStop : '.';

Solidus : '/';

Colon : ':';

Semicolon : ';';

LessThanSign : '<';

EqualsSign : '=';

GreaterThanSign : '>';

QuestionMark : '?';

CommercialAt : '@';

LeftSquareBracket : '[';

RightSquareBracket : ']';

CircumflexAccent : '^';

LeftCurlyBracket : '{';

VerticalLine : '|';

RightCurlyBracket : '}';

Tilde : '~';



RULE_HEX_VALUE : '0x' ('0'..'9'|'a'..'f'|'A'..'F')*;

RULE_ID : ('$'|'%')? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|':')*;

RULE_INT : ('0'..'9')+;

fragment RULE_ESCAPE_CODE : '\\' ('x' . .|'c' .|~(('c'|'x')));

RULE_STRING : '"' (RULE_ESCAPE_CODE|~(('\\'|'"')))* '"';

RULE_TAGGED_STRING : '\'' (RULE_ESCAPE_CODE|~(('\\'|'\'')))* '\'';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



