/*
 * generated by Xtext
 */
parser grammar InternalBlorqueScriptParser;

options {
	tokenVocab=InternalBlorqueScriptLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.example.blorquescript.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.example.blorquescript.services.BlorqueScriptGrammarAccess;

}

@members {


	private BlorqueScriptGrammarAccess grammarAccess;
	 	
	public InternalBlorqueScriptParser(TokenStream input, BlorqueScriptGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "BSFile";	
	} 
	   	   	
	@Override
	protected BlorqueScriptGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleBSFile
entryRuleBSFile returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSFileRule()); }
	 iv_ruleBSFile=ruleBSFile 
	 { $current=$iv_ruleBSFile.current; } 
	 EOF 
;

// Rule BSFile
ruleBSFile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Package
    {
    	newLeafNode(otherlv_0, grammarAccess.getBSFileAccess().getPackageKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSFileAccess().getNameQualifiedNameParserRuleCall_0_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSFileRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Semicolon
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSFileAccess().getSemicolonKeyword_0_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getBSFileAccess().getImportsBSImportParserRuleCall_1_0()); 
	    }
		lv_imports_3_0=ruleBSImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSFileRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_3_0, 
        		"BSImport");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getBSFileAccess().getClassesBSClassParserRuleCall_2_0()); 
	    }
		lv_classes_4_0=ruleBSClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSFileRule());
	        }
       		add(
       			$current, 
       			"classes",
        		lv_classes_4_0, 
        		"BSClass");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleBSImport
entryRuleBSImport returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSImportRule()); }
	 iv_ruleBSImport=ruleBSImport 
	 { $current=$iv_ruleBSImport.current; } 
	 EOF 
;

// Rule BSImport
ruleBSImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Import
    {
    	newLeafNode(otherlv_0, grammarAccess.getBSImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Semicolon
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSImportAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=FullStopAsterisk 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleBSClass
entryRuleBSClass returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSClassRule()); }
	 iv_ruleBSClass=ruleBSClass 
	 { $current=$iv_ruleBSClass.current; } 
	 EOF 
;

// Rule BSClass
ruleBSClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Class
    {
    	newLeafNode(otherlv_0, grammarAccess.getBSClassAccess().getClassKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getBSClassAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSClassAccess().getColonKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSClassRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getBSClassAccess().getSuperclassBSClassCrossReference_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_4=LeftCurlyBracket
    {
    	newLeafNode(otherlv_4, grammarAccess.getBSClassAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSClassAccess().getMembersBSMemberParserRuleCall_4_0()); 
	    }
		lv_members_5_0=ruleBSMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSClassRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_5_0, 
        		"BSMember");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_6=RightCurlyBracket
    {
    	newLeafNode(otherlv_6, grammarAccess.getBSClassAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleBSMember
entryRuleBSMember returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSMemberRule()); }
	 iv_ruleBSMember=ruleBSMember 
	 { $current=$iv_ruleBSMember.current; } 
	 EOF 
;

// Rule BSMember
ruleBSMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBSMemberAccess().getBSFieldParserRuleCall_0()); 
    }
    this_BSField_0=ruleBSField
    {
        $current = $this_BSField_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBSMemberAccess().getBSMethodParserRuleCall_1()); 
    }
    this_BSMethod_1=ruleBSMethod
    {
        $current = $this_BSMethod_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBSField
entryRuleBSField returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSFieldRule()); }
	 iv_ruleBSField=ruleBSField 
	 { $current=$iv_ruleBSField.current; } 
	 EOF 
;

// Rule BSField
ruleBSField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSFieldRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getBSFieldAccess().getTypeBSClassCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getBSFieldAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((
(
		lv_isArray_2_0=
	LeftSquareBracket
    {
        newLeafNode(lv_isArray_2_0, grammarAccess.getBSFieldAccess().getIsArrayLeftSquareBracketKeyword_2_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSFieldRule());
	        }
       		setWithLastConsumed($current, "isArray", true, "[");
	    }

)
)
	otherlv_3=RightSquareBracket
    {
    	newLeafNode(otherlv_3, grammarAccess.getBSFieldAccess().getRightSquareBracketKeyword_2_1());
    }
)?
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getBSFieldAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleBSMethod
entryRuleBSMethod returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSMethodRule()); }
	 iv_ruleBSMethod=ruleBSMethod 
	 { $current=$iv_ruleBSMethod.current; } 
	 EOF 
;

// Rule BSMethod
ruleBSMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSMethodRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getBSMethodAccess().getTypeBSClassCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getBSMethodAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)
	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSMethodAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBSMethodAccess().getParamsBSParameterParserRuleCall_3_0_0()); 
	    }
		lv_params_3_0=ruleBSParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"BSParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getBSMethodAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSMethodAccess().getParamsBSParameterParserRuleCall_3_1_1_0()); 
	    }
		lv_params_5_0=ruleBSParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"BSParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getBSMethodAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSMethodAccess().getBodyBSMethodBodyParserRuleCall_5_0()); 
	    }
		lv_body_7_0=ruleBSMethodBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSMethodRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_7_0, 
        		"BSMethodBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBSParameter
entryRuleBSParameter returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSParameterRule()); }
	 iv_ruleBSParameter=ruleBSParameter 
	 { $current=$iv_ruleBSParameter.current; } 
	 EOF 
;

// Rule BSParameter
ruleBSParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSParameterRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getBSParameterAccess().getTypeBSClassCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getBSParameterAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((
(
		lv_isArray_2_0=
	LeftSquareBracket
    {
        newLeafNode(lv_isArray_2_0, grammarAccess.getBSParameterAccess().getIsArrayLeftSquareBracketKeyword_2_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSParameterRule());
	        }
       		setWithLastConsumed($current, "isArray", true, "[");
	    }

)
)
	otherlv_3=RightSquareBracket
    {
    	newLeafNode(otherlv_3, grammarAccess.getBSParameterAccess().getRightSquareBracketKeyword_2_1());
    }
)?)
;





// Entry rule entryRuleBSMethodBody
entryRuleBSMethodBody returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSMethodBodyRule()); }
	 iv_ruleBSMethodBody=ruleBSMethodBody 
	 { $current=$iv_ruleBSMethodBody.current; } 
	 EOF 
;

// Rule BSMethodBody
ruleBSMethodBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSMethodBodyAccess().getBSMethodBodyAction_0(),
            $current);
    }
)
	otherlv_1=LeftCurlyBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getBSMethodBodyAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSMethodBodyAccess().getStatementsBSStatementParserRuleCall_2_0()); 
	    }
		lv_statements_2_0=ruleBSStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSMethodBodyRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"BSStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_3=RightCurlyBracket
    {
    	newLeafNode(otherlv_3, grammarAccess.getBSMethodBodyAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleBSStatement
entryRuleBSStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSStatementRule()); }
	 iv_ruleBSStatement=ruleBSStatement 
	 { $current=$iv_ruleBSStatement.current; } 
	 EOF 
;

// Rule BSStatement
ruleBSStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBSStatementAccess().getBSVariableDeclarationParserRuleCall_0()); 
    }
    this_BSVariableDeclaration_0=ruleBSVariableDeclaration
    {
        $current = $this_BSVariableDeclaration_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBSStatementAccess().getBSReturnParserRuleCall_1()); 
    }
    this_BSReturn_1=ruleBSReturn
    {
        $current = $this_BSReturn_1.current;
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getBSStatementAccess().getBSExpressionParserRuleCall_2_0()); 
    }
    this_BSExpression_2=ruleBSExpression
    {
        $current = $this_BSExpression_2.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_3=Semicolon
    {
    	newLeafNode(otherlv_3, grammarAccess.getBSStatementAccess().getSemicolonKeyword_2_1());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getBSStatementAccess().getBSIfStatementParserRuleCall_3()); 
    }
    this_BSIfStatement_4=ruleBSIfStatement
    {
        $current = $this_BSIfStatement_4.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBSStatementAccess().getBSWhileLoopParserRuleCall_4()); 
    }
    this_BSWhileLoop_5=ruleBSWhileLoop
    {
        $current = $this_BSWhileLoop_5.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBSStatementAccess().getBSForLoopParserRuleCall_5()); 
    }
    this_BSForLoop_6=ruleBSForLoop
    {
        $current = $this_BSForLoop_6.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBSStatementAccess().getBSSwitchStatementParserRuleCall_6()); 
    }
    this_BSSwitchStatement_7=ruleBSSwitchStatement
    {
        $current = $this_BSSwitchStatement_7.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBSReturn
entryRuleBSReturn returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSReturnRule()); }
	 iv_ruleBSReturn=ruleBSReturn 
	 { $current=$iv_ruleBSReturn.current; } 
	 EOF 
;

// Rule BSReturn
ruleBSReturn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Return
    {
    	newLeafNode(otherlv_0, grammarAccess.getBSReturnAccess().getReturnKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSReturnAccess().getExpressionBSExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSReturnRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Semicolon
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSReturnAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleBSVariableDeclaration
entryRuleBSVariableDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSVariableDeclarationRule()); }
	 iv_ruleBSVariableDeclaration=ruleBSVariableDeclaration 
	 { $current=$iv_ruleBSVariableDeclaration.current; } 
	 EOF 
;

// Rule BSVariableDeclaration
ruleBSVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSVariableDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getBSVariableDeclarationAccess().getTypeBSClassCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getBSVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
	otherlv_2=EqualsSign
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSVariableDeclarationAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSVariableDeclarationAccess().getExpressionBSExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expression_3_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getBSVariableDeclarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleBSIfStatement
entryRuleBSIfStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSIfStatementRule()); }
	 iv_ruleBSIfStatement=ruleBSIfStatement 
	 { $current=$iv_ruleBSIfStatement.current; } 
	 EOF 
;

// Rule BSIfStatement
ruleBSIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=If
    {
    	newLeafNode(otherlv_0, grammarAccess.getBSIfStatementAccess().getIfKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getBSIfStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSIfStatementAccess().getExpressionBSExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSIfStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getBSIfStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSIfStatementAccess().getThenBlockBSIfBlockParserRuleCall_4_0()); 
	    }
		lv_thenBlock_4_0=ruleBSIfBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSIfStatementRule());
	        }
       		set(
       			$current, 
       			"thenBlock",
        		lv_thenBlock_4_0, 
        		"BSIfBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
Else
)=>
	otherlv_5=Else
    {
    	newLeafNode(otherlv_5, grammarAccess.getBSIfStatementAccess().getElseKeyword_5_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBSIfStatementAccess().getElseBlockBSIfBlockParserRuleCall_5_1_0()); 
	    }
		lv_elseBlock_6_0=ruleBSIfBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSIfStatementRule());
	        }
       		set(
       			$current, 
       			"elseBlock",
        		lv_elseBlock_6_0, 
        		"BSIfBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleBSWhileLoop
entryRuleBSWhileLoop returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSWhileLoopRule()); }
	 iv_ruleBSWhileLoop=ruleBSWhileLoop 
	 { $current=$iv_ruleBSWhileLoop.current; } 
	 EOF 
;

// Rule BSWhileLoop
ruleBSWhileLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=While
    {
    	newLeafNode(otherlv_0, grammarAccess.getBSWhileLoopAccess().getWhileKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getBSWhileLoopAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSWhileLoopAccess().getExpressionBSExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSWhileLoopRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getBSWhileLoopAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSWhileLoopAccess().getBlockBSLoopBlockParserRuleCall_4_0()); 
	    }
		lv_block_4_0=ruleBSLoopBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSWhileLoopRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_4_0, 
        		"BSLoopBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBSForLoop
entryRuleBSForLoop returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSForLoopRule()); }
	 iv_ruleBSForLoop=ruleBSForLoop 
	 { $current=$iv_ruleBSForLoop.current; } 
	 EOF 
;

// Rule BSForLoop
ruleBSForLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=For
    {
    	newLeafNode(otherlv_0, grammarAccess.getBSForLoopAccess().getForKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getBSForLoopAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSForLoopAccess().getLeftBSExpressionParserRuleCall_2_0()); 
	    }
		lv_left_2_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSForLoopRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Semicolon
    {
    	newLeafNode(otherlv_3, grammarAccess.getBSForLoopAccess().getSemicolonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSForLoopAccess().getMiddleBSExpressionParserRuleCall_4_0()); 
	    }
		lv_middle_4_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSForLoopRule());
	        }
       		set(
       			$current, 
       			"middle",
        		lv_middle_4_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_5=Semicolon
    {
    	newLeafNode(otherlv_5, grammarAccess.getBSForLoopAccess().getSemicolonKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSForLoopAccess().getRightBSExpressionParserRuleCall_6_0()); 
	    }
		lv_right_6_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSForLoopRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_6_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_7=RightParenthesis
    {
    	newLeafNode(otherlv_7, grammarAccess.getBSForLoopAccess().getRightParenthesisKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSForLoopAccess().getBlockBSLoopBlockParserRuleCall_8_0()); 
	    }
		lv_block_8_0=ruleBSLoopBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSForLoopRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_8_0, 
        		"BSLoopBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBSSwitchStatement
entryRuleBSSwitchStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSSwitchStatementRule()); }
	 iv_ruleBSSwitchStatement=ruleBSSwitchStatement 
	 { $current=$iv_ruleBSSwitchStatement.current; } 
	 EOF 
;

// Rule BSSwitchStatement
ruleBSSwitchStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Switch
    {
    	newLeafNode(otherlv_0, grammarAccess.getBSSwitchStatementAccess().getSwitchKeyword_0());
    }
(
(
		lv_stringSwitch_1_0=
	DollarSign
    {
        newLeafNode(lv_stringSwitch_1_0, grammarAccess.getBSSwitchStatementAccess().getStringSwitchDollarSignKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSSwitchStatementRule());
	        }
       		setWithLastConsumed($current, "stringSwitch", true, "\$");
	    }

)
)?
	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSSwitchStatementAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSSwitchStatementAccess().getExpressionBSExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSSwitchStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=RightParenthesis
    {
    	newLeafNode(otherlv_4, grammarAccess.getBSSwitchStatementAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSSwitchStatementAccess().getBlockBSSwitchBlockParserRuleCall_5_0()); 
	    }
		lv_block_5_0=ruleBSSwitchBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSSwitchStatementRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_5_0, 
        		"BSSwitchBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBSIfBlock
entryRuleBSIfBlock returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSIfBlockRule()); }
	 iv_ruleBSIfBlock=ruleBSIfBlock 
	 { $current=$iv_ruleBSIfBlock.current; } 
	 EOF 
;

// Rule BSIfBlock
ruleBSIfBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBSIfBlockAccess().getStatementsBSStatementParserRuleCall_0_0()); 
	    }
		lv_statements_0_0=ruleBSStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSIfBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"BSStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSIfBlockAccess().getBSIfBlockAction_1_0(),
            $current);
    }
)
	otherlv_2=LeftCurlyBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSIfBlockAccess().getLeftCurlyBracketKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSIfBlockAccess().getStatementsBSStatementParserRuleCall_1_2_0()); 
	    }
		lv_statements_3_0=ruleBSStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSIfBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_3_0, 
        		"BSStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_4=RightCurlyBracket
    {
    	newLeafNode(otherlv_4, grammarAccess.getBSIfBlockAccess().getRightCurlyBracketKeyword_1_3());
    }
))
;





// Entry rule entryRuleBSLoopBlock
entryRuleBSLoopBlock returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSLoopBlockRule()); }
	 iv_ruleBSLoopBlock=ruleBSLoopBlock 
	 { $current=$iv_ruleBSLoopBlock.current; } 
	 EOF 
;

// Rule BSLoopBlock
ruleBSLoopBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBSLoopBlockAccess().getStatementsBSStatementParserRuleCall_0_0()); 
	    }
		lv_statements_0_0=ruleBSStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSLoopBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"BSStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSLoopBlockAccess().getBSLoopBlockAction_1_0(),
            $current);
    }
)
	otherlv_2=LeftCurlyBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSLoopBlockAccess().getLeftCurlyBracketKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSLoopBlockAccess().getStatementsBSStatementParserRuleCall_1_2_0()); 
	    }
		lv_statements_3_0=ruleBSStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSLoopBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_3_0, 
        		"BSStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_4=RightCurlyBracket
    {
    	newLeafNode(otherlv_4, grammarAccess.getBSLoopBlockAccess().getRightCurlyBracketKeyword_1_3());
    }
))
;





// Entry rule entryRuleBSSwitchBlock
entryRuleBSSwitchBlock returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSSwitchBlockRule()); }
	 iv_ruleBSSwitchBlock=ruleBSSwitchBlock 
	 { $current=$iv_ruleBSSwitchBlock.current; } 
	 EOF 
;

// Rule BSSwitchBlock
ruleBSSwitchBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSSwitchBlockAccess().getBSSwitchBlockAction_0(),
            $current);
    }
)
	otherlv_1=LeftCurlyBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getBSSwitchBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSSwitchBlockAccess().getCasesBSCaseParserRuleCall_2_0()); 
	    }
		lv_cases_2_0=ruleBSCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSSwitchBlockRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_2_0, 
        		"BSCase");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_3=RightCurlyBracket
    {
    	newLeafNode(otherlv_3, grammarAccess.getBSSwitchBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleBSCase
entryRuleBSCase returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSCaseRule()); }
	 iv_ruleBSCase=ruleBSCase 
	 { $current=$iv_ruleBSCase.current; } 
	 EOF 
;

// Rule BSCase
ruleBSCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Case
    {
    	newLeafNode(otherlv_0, grammarAccess.getBSCaseAccess().getCaseKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSCaseAccess().getExpressionBSExpressionParserRuleCall_0_1_0()); 
	    }
		lv_expression_1_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSCaseRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSCaseAccess().getColonKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSCaseAccess().getBlockBSCaseBlockParserRuleCall_0_3_0()); 
	    }
		lv_block_3_0=ruleBSCaseBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSCaseRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_3_0, 
        		"BSCaseBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	otherlv_4=Default
    {
    	newLeafNode(otherlv_4, grammarAccess.getBSCaseAccess().getDefaultKeyword_1_0());
    }

	otherlv_5=Colon
    {
    	newLeafNode(otherlv_5, grammarAccess.getBSCaseAccess().getColonKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSCaseAccess().getBlockBSCaseBlockParserRuleCall_1_2_0()); 
	    }
		lv_block_6_0=ruleBSCaseBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSCaseRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_6_0, 
        		"BSCaseBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleBSCaseBlock
entryRuleBSCaseBlock returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSCaseBlockRule()); }
	 iv_ruleBSCaseBlock=ruleBSCaseBlock 
	 { $current=$iv_ruleBSCaseBlock.current; } 
	 EOF 
;

// Rule BSCaseBlock
ruleBSCaseBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSCaseBlockAccess().getBSCaseBlockAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBSCaseBlockAccess().getStatementsBSStatementParserRuleCall_1_0()); 
	    }
		lv_statements_1_0=ruleBSStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSCaseBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_1_0, 
        		"BSStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;









// Entry rule entryRuleBSExpression
entryRuleBSExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSExpressionRule()); }
	 iv_ruleBSExpression=ruleBSExpression 
	 { $current=$iv_ruleBSExpression.current; } 
	 EOF 
;

// Rule BSExpression
ruleBSExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getBSExpressionAccess().getBSTernaryExpressionParserRuleCall()); 
    }
    this_BSTernaryExpression_0=ruleBSTernaryExpression
    {
        $current = $this_BSTernaryExpression_0.current;
        afterParserOrEnumRuleCall();
    }

;







// Entry rule entryRuleBSTernaryExpression
entryRuleBSTernaryExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSTernaryExpressionRule()); }
	 iv_ruleBSTernaryExpression=ruleBSTernaryExpression 
	 { $current=$iv_ruleBSTernaryExpression.current; } 
	 EOF 
;

// Rule BSTernaryExpression
ruleBSTernaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBSTernaryExpressionAccess().getBSBooleanOrExpressionParserRuleCall_0()); 
    }
    this_BSBooleanOrExpression_0=ruleBSBooleanOrExpression
    {
        $current = $this_BSBooleanOrExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBSTernaryExpressionAccess().getBSTernaryExpressionLeftAction_1_0(),
            $current);
    }
)
	otherlv_2=QuestionMark
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSTernaryExpressionAccess().getQuestionMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSTernaryExpressionAccess().getMiddleBSExpressionParserRuleCall_1_2_0()); 
	    }
		lv_middle_3_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSTernaryExpressionRule());
	        }
       		set(
       			$current, 
       			"middle",
        		lv_middle_3_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Colon
    {
    	newLeafNode(otherlv_4, grammarAccess.getBSTernaryExpressionAccess().getColonKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSTernaryExpressionAccess().getRightBSExpressionParserRuleCall_1_4_0()); 
	    }
		lv_right_5_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSTernaryExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleBSBooleanOrExpression
entryRuleBSBooleanOrExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSBooleanOrExpressionRule()); }
	 iv_ruleBSBooleanOrExpression=ruleBSBooleanOrExpression 
	 { $current=$iv_ruleBSBooleanOrExpression.current; } 
	 EOF 
;

// Rule BSBooleanOrExpression
ruleBSBooleanOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBSBooleanOrExpressionAccess().getBSBooleanAndExpressionParserRuleCall_0()); 
    }
    this_BSBooleanAndExpression_0=ruleBSBooleanAndExpression
    {
        $current = $this_BSBooleanAndExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBSBooleanOrExpressionAccess().getBSBooleanOrExpressionLeftAction_1_0(),
            $current);
    }
)
	otherlv_2=VerticalLineVerticalLine
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSBooleanOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSBooleanOrExpressionAccess().getRightBSBooleanAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBSBooleanAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSBooleanOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BSBooleanAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBSBooleanAndExpression
entryRuleBSBooleanAndExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSBooleanAndExpressionRule()); }
	 iv_ruleBSBooleanAndExpression=ruleBSBooleanAndExpression 
	 { $current=$iv_ruleBSBooleanAndExpression.current; } 
	 EOF 
;

// Rule BSBooleanAndExpression
ruleBSBooleanAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBSBooleanAndExpressionAccess().getBSBitwiseOrExpressionParserRuleCall_0()); 
    }
    this_BSBitwiseOrExpression_0=ruleBSBitwiseOrExpression
    {
        $current = $this_BSBitwiseOrExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBSBooleanAndExpressionAccess().getBSBooleanAndExpressionLeftAction_1_0(),
            $current);
    }
)
	otherlv_2=AmpersandAmpersand
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSBooleanAndExpressionAccess().getAmpersandAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSBooleanAndExpressionAccess().getRightBSBitwiseOrExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBSBitwiseOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSBooleanAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BSBitwiseOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBSBitwiseOrExpression
entryRuleBSBitwiseOrExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSBitwiseOrExpressionRule()); }
	 iv_ruleBSBitwiseOrExpression=ruleBSBitwiseOrExpression 
	 { $current=$iv_ruleBSBitwiseOrExpression.current; } 
	 EOF 
;

// Rule BSBitwiseOrExpression
ruleBSBitwiseOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBSBitwiseOrExpressionAccess().getBSBitwiseXorExpressionParserRuleCall_0()); 
    }
    this_BSBitwiseXorExpression_0=ruleBSBitwiseXorExpression
    {
        $current = $this_BSBitwiseXorExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBSBitwiseOrExpressionAccess().getBSBitwiseOrExpressionLeftAction_1_0(),
            $current);
    }
)
	otherlv_2=VerticalLine
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSBitwiseOrExpressionAccess().getVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSBitwiseOrExpressionAccess().getRightBSBitwiseXorExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBSBitwiseXorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSBitwiseOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BSBitwiseXorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBSBitwiseXorExpression
entryRuleBSBitwiseXorExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSBitwiseXorExpressionRule()); }
	 iv_ruleBSBitwiseXorExpression=ruleBSBitwiseXorExpression 
	 { $current=$iv_ruleBSBitwiseXorExpression.current; } 
	 EOF 
;

// Rule BSBitwiseXorExpression
ruleBSBitwiseXorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBSBitwiseXorExpressionAccess().getBSBitwiseAndExpressionParserRuleCall_0()); 
    }
    this_BSBitwiseAndExpression_0=ruleBSBitwiseAndExpression
    {
        $current = $this_BSBitwiseAndExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBSBitwiseXorExpressionAccess().getBSBitwiseXorExpressionLeftAction_1_0(),
            $current);
    }
)
	otherlv_2=CircumflexAccent
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSBitwiseXorExpressionAccess().getCircumflexAccentKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSBitwiseXorExpressionAccess().getRightBSBitwiseAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBSBitwiseAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSBitwiseXorExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BSBitwiseAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBSBitwiseAndExpression
entryRuleBSBitwiseAndExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSBitwiseAndExpressionRule()); }
	 iv_ruleBSBitwiseAndExpression=ruleBSBitwiseAndExpression 
	 { $current=$iv_ruleBSBitwiseAndExpression.current; } 
	 EOF 
;

// Rule BSBitwiseAndExpression
ruleBSBitwiseAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBSBitwiseAndExpressionAccess().getBSEqualityExpressionParserRuleCall_0()); 
    }
    this_BSEqualityExpression_0=ruleBSEqualityExpression
    {
        $current = $this_BSEqualityExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBSBitwiseAndExpressionAccess().getBSBitwiseAndExpressionLeftAction_1_0(),
            $current);
    }
)
	otherlv_2=Ampersand
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSBitwiseAndExpressionAccess().getAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSBitwiseAndExpressionAccess().getRightBSEqualityExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBSEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSBitwiseAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BSEqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBSEqualityExpression
entryRuleBSEqualityExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSEqualityExpressionRule()); }
	 iv_ruleBSEqualityExpression=ruleBSEqualityExpression 
	 { $current=$iv_ruleBSEqualityExpression.current; } 
	 EOF 
;

// Rule BSEqualityExpression
ruleBSEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBSEqualityExpressionAccess().getBSOrderedRelationExpressionParserRuleCall_0()); 
    }
    this_BSOrderedRelationExpression_0=ruleBSOrderedRelationExpression
    {
        $current = $this_BSOrderedRelationExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBSEqualityExpressionAccess().getBSEqualityExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=
	EqualsSignEqualsSign
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getBSEqualityExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSEqualityExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=
	ExclamationMarkEqualsSign
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getBSEqualityExpressionAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSEqualityExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBSEqualityExpressionAccess().getRightBSOrderedRelationExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBSOrderedRelationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BSOrderedRelationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBSOrderedRelationExpression
entryRuleBSOrderedRelationExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSOrderedRelationExpressionRule()); }
	 iv_ruleBSOrderedRelationExpression=ruleBSOrderedRelationExpression 
	 { $current=$iv_ruleBSOrderedRelationExpression.current; } 
	 EOF 
;

// Rule BSOrderedRelationExpression
ruleBSOrderedRelationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBSOrderedRelationExpressionAccess().getBSBitwiseShiftExpressionParserRuleCall_0()); 
    }
    this_BSBitwiseShiftExpression_0=ruleBSBitwiseShiftExpression
    {
        $current = $this_BSBitwiseShiftExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBSOrderedRelationExpressionAccess().getBSOrderedRelationExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=
	LessThanSign
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSOrderedRelationExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=
	GreaterThanSign
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSOrderedRelationExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

    |		lv_operator_2_3=
	LessThanSignEqualsSign
    {
        newLeafNode(lv_operator_2_3, grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_2());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSOrderedRelationExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_3, null);
	    }

    |		lv_operator_2_4=
	GreaterThanSignEqualsSign
    {
        newLeafNode(lv_operator_2_4, grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSOrderedRelationExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_4, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBSOrderedRelationExpressionAccess().getRightBSBitwiseShiftExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBSBitwiseShiftExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSOrderedRelationExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BSBitwiseShiftExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBSBitwiseShiftExpression
entryRuleBSBitwiseShiftExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSBitwiseShiftExpressionRule()); }
	 iv_ruleBSBitwiseShiftExpression=ruleBSBitwiseShiftExpression 
	 { $current=$iv_ruleBSBitwiseShiftExpression.current; } 
	 EOF 
;

// Rule BSBitwiseShiftExpression
ruleBSBitwiseShiftExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBSBitwiseShiftExpressionAccess().getBSPlusMinusOrStringConcatExpressionParserRuleCall_0()); 
    }
    this_BSPlusMinusOrStringConcatExpression_0=ruleBSPlusMinusOrStringConcatExpression
    {
        $current = $this_BSPlusMinusOrStringConcatExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBSBitwiseShiftExpressionAccess().getBSBitwiseShiftExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=
	LessThanSignLessThanSign
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getBSBitwiseShiftExpressionAccess().getOperatorLessThanSignLessThanSignKeyword_1_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSBitwiseShiftExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=
	GreaterThanSignGreaterThanSign
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getBSBitwiseShiftExpressionAccess().getOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSBitwiseShiftExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBSBitwiseShiftExpressionAccess().getRightBSPlusMinusOrStringConcatExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBSPlusMinusOrStringConcatExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSBitwiseShiftExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BSPlusMinusOrStringConcatExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBSPlusMinusOrStringConcatExpression
entryRuleBSPlusMinusOrStringConcatExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSPlusMinusOrStringConcatExpressionRule()); }
	 iv_ruleBSPlusMinusOrStringConcatExpression=ruleBSPlusMinusOrStringConcatExpression 
	 { $current=$iv_ruleBSPlusMinusOrStringConcatExpression.current; } 
	 EOF 
;

// Rule BSPlusMinusOrStringConcatExpression
ruleBSPlusMinusOrStringConcatExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getBSMulDivOrModExpressionParserRuleCall_0()); 
    }
    this_BSMulDivOrModExpression_0=ruleBSMulDivOrModExpression
    {
        $current = $this_BSMulDivOrModExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getBSPlusMinusOrStringConcatExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=
	PlusSign
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSPlusMinusOrStringConcatExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=
	HyphenMinus
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSPlusMinusOrStringConcatExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

    |		lv_operator_2_3=
	CommercialAt
    {
        newLeafNode(lv_operator_2_3, grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorCommercialAtKeyword_1_1_0_2());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSPlusMinusOrStringConcatExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_3, null);
	    }

    |		lv_operator_2_4=
	SPC
    {
        newLeafNode(lv_operator_2_4, grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorSPCKeyword_1_1_0_3());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSPlusMinusOrStringConcatExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_4, null);
	    }

    |		lv_operator_2_5=
	NL
    {
        newLeafNode(lv_operator_2_5, grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorNLKeyword_1_1_0_4());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSPlusMinusOrStringConcatExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_5, null);
	    }

    |		lv_operator_2_6=
	TAB
    {
        newLeafNode(lv_operator_2_6, grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorTABKeyword_1_1_0_5());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSPlusMinusOrStringConcatExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_6, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getRightBSMulDivOrModExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBSMulDivOrModExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSPlusMinusOrStringConcatExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BSMulDivOrModExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBSMulDivOrModExpression
entryRuleBSMulDivOrModExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSMulDivOrModExpressionRule()); }
	 iv_ruleBSMulDivOrModExpression=ruleBSMulDivOrModExpression 
	 { $current=$iv_ruleBSMulDivOrModExpression.current; } 
	 EOF 
;

// Rule BSMulDivOrModExpression
ruleBSMulDivOrModExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBSMulDivOrModExpressionAccess().getBSCastOrNewExpressionParserRuleCall_0()); 
    }
    this_BSCastOrNewExpression_0=ruleBSCastOrNewExpression
    {
        $current = $this_BSCastOrNewExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBSMulDivOrModExpressionAccess().getBSMulDivOrModExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=
	Asterisk
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getBSMulDivOrModExpressionAccess().getOperatorAsteriskKeyword_1_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSMulDivOrModExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=
	Solidus
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getBSMulDivOrModExpressionAccess().getOperatorSolidusKeyword_1_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSMulDivOrModExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

    |		lv_operator_2_3=
	PercentSign
    {
        newLeafNode(lv_operator_2_3, grammarAccess.getBSMulDivOrModExpressionAccess().getOperatorPercentSignKeyword_1_1_0_2());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSMulDivOrModExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_3, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBSMulDivOrModExpressionAccess().getRightBSCastOrNewExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBSCastOrNewExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSMulDivOrModExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BSCastOrNewExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBSCastOrNewExpression
entryRuleBSCastOrNewExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSCastOrNewExpressionRule()); }
	 iv_ruleBSCastOrNewExpression=ruleBSCastOrNewExpression 
	 { $current=$iv_ruleBSCastOrNewExpression.current; } 
	 EOF 
;

// Rule BSCastOrNewExpression
ruleBSCastOrNewExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBSCastOrNewExpressionAccess().getBSUnaryModifierExpressionParserRuleCall_0()); 
    }
    this_BSUnaryModifierExpression_0=ruleBSUnaryModifierExpression
    {
        $current = $this_BSUnaryModifierExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSCastOrNewExpressionAccess().getBSCastExpressionAction_1_0(),
            $current);
    }
)
	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSCastOrNewExpressionAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
(
		lv_castType_3_1=
	String
    {
        newLeafNode(lv_castType_3_1, grammarAccess.getBSCastOrNewExpressionAccess().getCastTypeStringKeyword_1_2_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSCastOrNewExpressionRule());
	        }
       		setWithLastConsumed($current, "castType", lv_castType_3_1, null);
	    }

    |		lv_castType_3_2=
	Number
    {
        newLeafNode(lv_castType_3_2, grammarAccess.getBSCastOrNewExpressionAccess().getCastTypeNumberKeyword_1_2_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSCastOrNewExpressionRule());
	        }
       		setWithLastConsumed($current, "castType", lv_castType_3_2, null);
	    }

    |		lv_castType_3_3=
	Object
    {
        newLeafNode(lv_castType_3_3, grammarAccess.getBSCastOrNewExpressionAccess().getCastTypeObjectKeyword_1_2_0_2());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSCastOrNewExpressionRule());
	        }
       		setWithLastConsumed($current, "castType", lv_castType_3_3, null);
	    }

)

)
)
	otherlv_4=RightParenthesis
    {
    	newLeafNode(otherlv_4, grammarAccess.getBSCastOrNewExpressionAccess().getRightParenthesisKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSCastOrNewExpressionAccess().getCastExprBSCastOrNewExpressionParserRuleCall_1_4_0()); 
	    }
		lv_castExpr_5_0=ruleBSCastOrNewExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSCastOrNewExpressionRule());
	        }
       		set(
       			$current, 
       			"castExpr",
        		lv_castExpr_5_0, 
        		"BSCastOrNewExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSCastOrNewExpressionAccess().getBSNewExpressionAction_2_0(),
            $current);
    }
)
	otherlv_7=New
    {
    	newLeafNode(otherlv_7, grammarAccess.getBSCastOrNewExpressionAccess().getNewKeyword_2_1());
    }
((
(
		lv_isArray_8_0=
	LeftSquareBracket
    {
        newLeafNode(lv_isArray_8_0, grammarAccess.getBSCastOrNewExpressionAccess().getIsArrayLeftSquareBracketKeyword_2_2_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSCastOrNewExpressionRule());
	        }
       		setWithLastConsumed($current, "isArray", true, "[");
	    }

)
)
	otherlv_9=RightSquareBracket
    {
    	newLeafNode(otherlv_9, grammarAccess.getBSCastOrNewExpressionAccess().getRightSquareBracketKeyword_2_2_1());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSCastOrNewExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getBSCastOrNewExpressionAccess().getTypeBSClassCrossReference_2_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_11=LeftParenthesis
    {
    	newLeafNode(otherlv_11, grammarAccess.getBSCastOrNewExpressionAccess().getLeftParenthesisKeyword_2_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBSCastOrNewExpressionAccess().getArgsBSExpressionParserRuleCall_2_5_0_0()); 
	    }
		lv_args_12_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSCastOrNewExpressionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_12_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_13=Comma
    {
    	newLeafNode(otherlv_13, grammarAccess.getBSCastOrNewExpressionAccess().getCommaKeyword_2_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSCastOrNewExpressionAccess().getArgsBSExpressionParserRuleCall_2_5_1_1_0()); 
	    }
		lv_args_14_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSCastOrNewExpressionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_14_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_15=RightParenthesis
    {
    	newLeafNode(otherlv_15, grammarAccess.getBSCastOrNewExpressionAccess().getRightParenthesisKeyword_2_6());
    }
))
;





// Entry rule entryRuleBSUnaryModifierExpression
entryRuleBSUnaryModifierExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSUnaryModifierExpressionRule()); }
	 iv_ruleBSUnaryModifierExpression=ruleBSUnaryModifierExpression 
	 { $current=$iv_ruleBSUnaryModifierExpression.current; } 
	 EOF 
;

// Rule BSUnaryModifierExpression
ruleBSUnaryModifierExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBSUnaryModifierExpressionAccess().getBSInvokationExpressionParserRuleCall_0()); 
    }
    this_BSInvokationExpression_0=ruleBSInvokationExpression
    {
        $current = $this_BSInvokationExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSUnaryModifierExpressionAccess().getBSUnaryModifierExpressionAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=
	PlusSign
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSUnaryModifierExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=
	HyphenMinus
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSUnaryModifierExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

    |		lv_operator_2_3=
	ExclamationMark
    {
        newLeafNode(lv_operator_2_3, grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorExclamationMarkKeyword_1_1_0_2());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSUnaryModifierExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_3, null);
	    }

    |		lv_operator_2_4=
	Tilde
    {
        newLeafNode(lv_operator_2_4, grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorTildeKeyword_1_1_0_3());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSUnaryModifierExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_4, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBSUnaryModifierExpressionAccess().getReceiverBSUnaryModifierExpressionParserRuleCall_1_2_0()); 
	    }
		lv_receiver_3_0=ruleBSUnaryModifierExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSUnaryModifierExpressionRule());
	        }
       		set(
       			$current, 
       			"receiver",
        		lv_receiver_3_0, 
        		"BSUnaryModifierExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleBSInvokationExpression
entryRuleBSInvokationExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSInvokationExpressionRule()); }
	 iv_ruleBSInvokationExpression=ruleBSInvokationExpression 
	 { $current=$iv_ruleBSInvokationExpression.current; } 
	 EOF 
;

// Rule BSInvokationExpression
ruleBSInvokationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBSInvokationExpressionAccess().getBSTerminalExpressionParserRuleCall_0()); 
    }
    this_BSTerminalExpression_0=ruleBSTerminalExpression
    {
        $current = $this_BSTerminalExpression_0.current;
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBSInvokationExpressionAccess().getBSMemberSelectionExpressionReceiverAction_1_0_0(),
            $current);
    }
)
	otherlv_2=FullStop
    {
    	newLeafNode(otherlv_2, grammarAccess.getBSInvokationExpressionAccess().getFullStopKeyword_1_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBSInvokationExpressionAccess().getBSMethodInvokationExpressionReceiverAction_1_1_0(),
            $current);
    }
)
	otherlv_4=LeftParenthesis
    {
    	newLeafNode(otherlv_4, grammarAccess.getBSInvokationExpressionAccess().getLeftParenthesisKeyword_1_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBSInvokationExpressionAccess().getArgsBSExpressionParserRuleCall_1_1_2_0_0()); 
	    }
		lv_args_5_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSInvokationExpressionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_6=Comma
    {
    	newLeafNode(otherlv_6, grammarAccess.getBSInvokationExpressionAccess().getCommaKeyword_1_1_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSInvokationExpressionAccess().getArgsBSExpressionParserRuleCall_1_1_2_1_1_0()); 
	    }
		lv_args_7_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSInvokationExpressionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_7_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_8=RightParenthesis
    {
    	newLeafNode(otherlv_8, grammarAccess.getBSInvokationExpressionAccess().getRightParenthesisKeyword_1_1_3());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBSInvokationExpressionAccess().getBSArrayAccessExpressionReceiverAction_1_2_0(),
            $current);
    }
)
	otherlv_10=LeftSquareBracket
    {
    	newLeafNode(otherlv_10, grammarAccess.getBSInvokationExpressionAccess().getLeftSquareBracketKeyword_1_2_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBSInvokationExpressionAccess().getArgsBSExpressionParserRuleCall_1_2_2_0_0()); 
	    }
		lv_args_11_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSInvokationExpressionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_11_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_12=Comma
    {
    	newLeafNode(otherlv_12, grammarAccess.getBSInvokationExpressionAccess().getCommaKeyword_1_2_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSInvokationExpressionAccess().getArgsBSExpressionParserRuleCall_1_2_2_1_1_0()); 
	    }
		lv_args_13_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSInvokationExpressionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_13_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_14=RightSquareBracket
    {
    	newLeafNode(otherlv_14, grammarAccess.getBSInvokationExpressionAccess().getRightSquareBracketKeyword_1_2_3());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBSInvokationExpressionAccess().getBSPostfixArithmeticExpressionReceiverAction_1_3_0(),
            $current);
    }
)(
(
(
		lv_operator_16_1=
	PlusSignPlusSign
    {
        newLeafNode(lv_operator_16_1, grammarAccess.getBSInvokationExpressionAccess().getOperatorPlusSignPlusSignKeyword_1_3_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSInvokationExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_16_1, null);
	    }

    |		lv_operator_16_2=
	HyphenMinusHyphenMinus
    {
        newLeafNode(lv_operator_16_2, grammarAccess.getBSInvokationExpressionAccess().getOperatorHyphenMinusHyphenMinusKeyword_1_3_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSInvokationExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_16_2, null);
	    }

)

)
)))*)
;





// Entry rule entryRuleBSTerminalExpression
entryRuleBSTerminalExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBSTerminalExpressionRule()); }
	 iv_ruleBSTerminalExpression=ruleBSTerminalExpression 
	 { $current=$iv_ruleBSTerminalExpression.current; } 
	 EOF 
;

// Rule BSTerminalExpression
ruleBSTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSTerminalExpressionAccess().getBSStringConstantAction_0_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getBSTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSTerminalExpressionAccess().getBSHexadecimalConstantAction_1_0(),
            $current);
    }
)(
(
		lv_value_3_0=RULE_HEX_VALUE
		{
			newLeafNode(lv_value_3_0, grammarAccess.getBSTerminalExpressionAccess().getValueHEX_VALUETerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"HEX_VALUE");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSTerminalExpressionAccess().getBSNumberConstantAction_2_0(),
            $current);
    }
)(
(
		lv_value_5_0=RULE_INT
		{
			newLeafNode(lv_value_5_0, grammarAccess.getBSTerminalExpressionAccess().getValueINTTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"INT");
	    }

)
)((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBSTerminalExpressionAccess().getBSRealConstantLeftAction_2_2_0(),
            $current);
    }
)
	otherlv_7=FullStop
    {
    	newLeafNode(otherlv_7, grammarAccess.getBSTerminalExpressionAccess().getFullStopKeyword_2_2_1());
    }
(
(
		lv_right_8_0=RULE_INT
		{
			newLeafNode(lv_right_8_0, grammarAccess.getBSTerminalExpressionAccess().getRightINTTerminalRuleCall_2_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"right",
        		lv_right_8_0, 
        		"INT");
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSTerminalExpressionAccess().getBSBooleanConstantAction_3_0(),
            $current);
    }
)(
(
(
		lv_value_10_1=
	True
    {
        newLeafNode(lv_value_10_1, grammarAccess.getBSTerminalExpressionAccess().getValueTrueKeyword_3_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_10_1, null);
	    }

    |		lv_value_10_2=
	False
    {
        newLeafNode(lv_value_10_2, grammarAccess.getBSTerminalExpressionAccess().getValueFalseKeyword_3_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_10_2, null);
	    }

)

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSTerminalExpressionAccess().getBSNullLiteralAction_4_0(),
            $current);
    }
)
	otherlv_12=Null
    {
    	newLeafNode(otherlv_12, grammarAccess.getBSTerminalExpressionAccess().getNullKeyword_4_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSTerminalExpressionAccess().getBSBreakLiteralAction_5_0(),
            $current);
    }
)
	otherlv_14=Break
    {
    	newLeafNode(otherlv_14, grammarAccess.getBSTerminalExpressionAccess().getBreakKeyword_5_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSTerminalExpressionAccess().getBSContinueLiteralAction_6_0(),
            $current);
    }
)
	otherlv_16=Continue
    {
    	newLeafNode(otherlv_16, grammarAccess.getBSTerminalExpressionAccess().getContinueKeyword_6_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSTerminalExpressionAccess().getBSThisLiteralAction_7_0(),
            $current);
    }
)
	otherlv_18=This
    {
    	newLeafNode(otherlv_18, grammarAccess.getBSTerminalExpressionAccess().getThisKeyword_7_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSTerminalExpressionAccess().getBSClientLiteralAction_8_0(),
            $current);
    }
)
	otherlv_20=Client
    {
    	newLeafNode(otherlv_20, grammarAccess.getBSTerminalExpressionAccess().getClientKeyword_8_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSTerminalExpressionAccess().getBSParentLiteralAction_9_0(),
            $current);
    }
)
	otherlv_22=Parent
    {
    	newLeafNode(otherlv_22, grammarAccess.getBSTerminalExpressionAccess().getParentKeyword_9_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSTerminalExpressionAccess().getBSSymbolRefAction_10_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBSTerminalExpressionRule());
	        }
        }
	otherlv_24=RULE_ID
	{
		newLeafNode(otherlv_24, grammarAccess.getBSTerminalExpressionAccess().getSymbolBSSymbolCrossReference_10_1_0()); 
	}

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBSTerminalExpressionAccess().getBSParentheticalExpressionAction_11_0(),
            $current);
    }
)
	otherlv_26=LeftParenthesis
    {
    	newLeafNode(otherlv_26, grammarAccess.getBSTerminalExpressionAccess().getLeftParenthesisKeyword_11_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSTerminalExpressionAccess().getExpressionBSExpressionParserRuleCall_11_2_0()); 
	    }
		lv_expression_27_0=ruleBSExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSTerminalExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_27_0, 
        		"BSExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_28=RightParenthesis
    {
    	newLeafNode(otherlv_28, grammarAccess.getBSTerminalExpressionAccess().getRightParenthesisKeyword_11_3());
    }
))
;





