/*
 * generated by Xtext
 */
package org.xtext.example.blorquescript.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BlorqueScriptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BSFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsBSImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cClassesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassesBSClassParserRuleCall_2_0 = (RuleCall)cClassesAssignment_2.eContents().get(0);
		
		//BSFile:
		//	("package" name=QualifiedName ";")? imports+=BSImport* classes+=BSClass*;
		@Override public ParserRule getRule() { return rule; }

		//("package" name=QualifiedName ";")? imports+=BSImport* classes+=BSClass*
		public Group getGroup() { return cGroup; }

		//("package" name=QualifiedName ";")?
		public Group getGroup_0() { return cGroup_0; }

		//"package"
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//imports+=BSImport*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//BSImport
		public RuleCall getImportsBSImportParserRuleCall_1_0() { return cImportsBSImportParserRuleCall_1_0; }

		//classes+=BSClass*
		public Assignment getClassesAssignment_2() { return cClassesAssignment_2; }

		//BSClass
		public RuleCall getClassesBSClassParserRuleCall_2_0() { return cClassesBSClassParserRuleCall_2_0; }
	}

	public class BSImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BSImport:
		//	"import" importedNamespace=QualifiedNameWithWildcard ";";
		@Override public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		@Override public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class BSClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperclassAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperclassBSClassCrossReference_2_1_0 = (CrossReference)cSuperclassAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperclassBSClassQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperclassBSClassCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMembersBSMemberParserRuleCall_4_0 = (RuleCall)cMembersAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BSClass:
		//	"class" name=ID (":" superclass=[BSClass|QualifiedName])? "{" members+=BSMember* "}";
		@Override public ParserRule getRule() { return rule; }

		//"class" name=ID (":" superclass=[BSClass|QualifiedName])? "{" members+=BSMember* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(":" superclass=[BSClass|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//superclass=[BSClass|QualifiedName]
		public Assignment getSuperclassAssignment_2_1() { return cSuperclassAssignment_2_1; }

		//[BSClass|QualifiedName]
		public CrossReference getSuperclassBSClassCrossReference_2_1_0() { return cSuperclassBSClassCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getSuperclassBSClassQualifiedNameParserRuleCall_2_1_0_1() { return cSuperclassBSClassQualifiedNameParserRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//members+=BSMember*
		public Assignment getMembersAssignment_4() { return cMembersAssignment_4; }

		//BSMember
		public RuleCall getMembersBSMemberParserRuleCall_4_0() { return cMembersBSMemberParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class BSMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBSFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBSMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BSMember:
		//	BSField | BSMethod;
		@Override public ParserRule getRule() { return rule; }

		//BSField | BSMethod
		public Alternatives getAlternatives() { return cAlternatives; }

		//BSField
		public RuleCall getBSFieldParserRuleCall_0() { return cBSFieldParserRuleCall_0; }

		//BSMethod
		public RuleCall getBSMethodParserRuleCall_1() { return cBSMethodParserRuleCall_1; }
	}

	public class BSFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeBSClassCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeBSClassQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeBSClassCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BSField:
		//	type=[BSClass|QualifiedName] name=ID ";";
		@Override public ParserRule getRule() { return rule; }

		//type=[BSClass|QualifiedName] name=ID ";"
		public Group getGroup() { return cGroup; }

		//type=[BSClass|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[BSClass|QualifiedName]
		public CrossReference getTypeBSClassCrossReference_0_0() { return cTypeBSClassCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeBSClassQualifiedNameParserRuleCall_0_0_1() { return cTypeBSClassQualifiedNameParserRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class BSMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeBSClassCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeBSClassQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeBSClassCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsBSParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsBSParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyBSMethodBodyParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//BSMethod:
		//	type=[BSClass|QualifiedName] name=ID "(" (params+=BSParameter ("," params+=BSParameter)*)? ")" body=BSMethodBody;
		@Override public ParserRule getRule() { return rule; }

		//type=[BSClass|QualifiedName] name=ID "(" (params+=BSParameter ("," params+=BSParameter)*)? ")" body=BSMethodBody
		public Group getGroup() { return cGroup; }

		//type=[BSClass|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[BSClass|QualifiedName]
		public CrossReference getTypeBSClassCrossReference_0_0() { return cTypeBSClassCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeBSClassQualifiedNameParserRuleCall_0_0_1() { return cTypeBSClassQualifiedNameParserRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=BSParameter ("," params+=BSParameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=BSParameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//BSParameter
		public RuleCall getParamsBSParameterParserRuleCall_3_0_0() { return cParamsBSParameterParserRuleCall_3_0_0; }

		//("," params+=BSParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=BSParameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//BSParameter
		public RuleCall getParamsBSParameterParserRuleCall_3_1_1_0() { return cParamsBSParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//body=BSMethodBody
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//BSMethodBody
		public RuleCall getBodyBSMethodBodyParserRuleCall_5_0() { return cBodyBSMethodBodyParserRuleCall_5_0; }
	}

	public class BSParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeBSClassCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeBSClassQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeBSClassCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BSParameter:
		//	type=[BSClass|QualifiedName] name=ID;
		@Override public ParserRule getRule() { return rule; }

		//type=[BSClass|QualifiedName] name=ID
		public Group getGroup() { return cGroup; }

		//type=[BSClass|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[BSClass|QualifiedName]
		public CrossReference getTypeBSClassCrossReference_0_0() { return cTypeBSClassCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeBSClassQualifiedNameParserRuleCall_0_0_1() { return cTypeBSClassQualifiedNameParserRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class BSMethodBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSMethodBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBSMethodBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsBSStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BSMethodBody:
		//	{BSMethodBody} "{" statements+=BSStatement* "}";
		@Override public ParserRule getRule() { return rule; }

		//{BSMethodBody} "{" statements+=BSStatement* "}"
		public Group getGroup() { return cGroup; }

		//{BSMethodBody}
		public Action getBSMethodBodyAction_0() { return cBSMethodBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=BSStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//BSStatement
		public RuleCall getStatementsBSStatementParserRuleCall_2_0() { return cStatementsBSStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class BSStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBSVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBSReturnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cBSExpressionParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cBSIfStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BSStatement:
		//	BSVariableDeclaration | BSReturn | BSExpression ";" | BSIfStatement;
		@Override public ParserRule getRule() { return rule; }

		//BSVariableDeclaration | BSReturn | BSExpression ";" | BSIfStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//BSVariableDeclaration
		public RuleCall getBSVariableDeclarationParserRuleCall_0() { return cBSVariableDeclarationParserRuleCall_0; }

		//BSReturn
		public RuleCall getBSReturnParserRuleCall_1() { return cBSReturnParserRuleCall_1; }

		//BSExpression ";"
		public Group getGroup_2() { return cGroup_2; }

		//BSExpression
		public RuleCall getBSExpressionParserRuleCall_2_0() { return cBSExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//BSIfStatement
		public RuleCall getBSIfStatementParserRuleCall_3() { return cBSIfStatementParserRuleCall_3; }
	}

	public class BSReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionBSExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BSReturn:
		//	"return" expression=BSExpression ";";
		@Override public ParserRule getRule() { return rule; }

		//"return" expression=BSExpression ";"
		public Group getGroup() { return cGroup; }

		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//expression=BSExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//BSExpression
		public RuleCall getExpressionBSExpressionParserRuleCall_1_0() { return cExpressionBSExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class BSVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeBSClassCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeBSClassQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeBSClassCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionBSExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BSVariableDeclaration:
		//	type=[BSClass|QualifiedName] name=ID ("=" expression=BSExpression)? ";";
		@Override public ParserRule getRule() { return rule; }

		//type=[BSClass|QualifiedName] name=ID ("=" expression=BSExpression)? ";"
		public Group getGroup() { return cGroup; }

		//type=[BSClass|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[BSClass|QualifiedName]
		public CrossReference getTypeBSClassCrossReference_0_0() { return cTypeBSClassCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeBSClassQualifiedNameParserRuleCall_0_0_1() { return cTypeBSClassQualifiedNameParserRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("=" expression=BSExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//expression=BSExpression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//BSExpression
		public RuleCall getExpressionBSExpressionParserRuleCall_2_1_0() { return cExpressionBSExpressionParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class BSIfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSIfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionBSExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBlockBSIfBlockParserRuleCall_4_0 = (RuleCall)cThenBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlockBSIfBlockParserRuleCall_5_1_0 = (RuleCall)cElseBlockAssignment_5_1.eContents().get(0);
		
		//BSIfStatement:
		//	"if" "(" expression=BSExpression ")" thenBlock=BSIfBlock ("else" elseBlock=BSIfBlock)?;
		@Override public ParserRule getRule() { return rule; }

		//"if" "(" expression=BSExpression ")" thenBlock=BSIfBlock ("else" elseBlock=BSIfBlock)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=BSExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//BSExpression
		public RuleCall getExpressionBSExpressionParserRuleCall_2_0() { return cExpressionBSExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//thenBlock=BSIfBlock
		public Assignment getThenBlockAssignment_4() { return cThenBlockAssignment_4; }

		//BSIfBlock
		public RuleCall getThenBlockBSIfBlockParserRuleCall_4_0() { return cThenBlockBSIfBlockParserRuleCall_4_0; }

		//(=> "else" elseBlock=BSIfBlock)?
		public Group getGroup_5() { return cGroup_5; }

		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//elseBlock=BSIfBlock
		public Assignment getElseBlockAssignment_5_1() { return cElseBlockAssignment_5_1; }

		//BSIfBlock
		public RuleCall getElseBlockBSIfBlockParserRuleCall_5_1_0() { return cElseBlockBSIfBlockParserRuleCall_5_1_0; }
	}

	public class BSIfBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSIfBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatementsBSStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementsBSStatementParserRuleCall_1_1_0 = (RuleCall)cStatementsAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//BSIfBlock:
		//	statements+=BSStatement | "{" statements+=BSStatement+ "}";
		@Override public ParserRule getRule() { return rule; }

		//statements+=BSStatement | "{" statements+=BSStatement+ "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//statements+=BSStatement
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }

		//BSStatement
		public RuleCall getStatementsBSStatementParserRuleCall_0_0() { return cStatementsBSStatementParserRuleCall_0_0; }

		//"{" statements+=BSStatement+ "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//statements+=BSStatement+
		public Assignment getStatementsAssignment_1_1() { return cStatementsAssignment_1_1; }

		//BSStatement
		public RuleCall getStatementsBSStatementParserRuleCall_1_1_0() { return cStatementsBSStatementParserRuleCall_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class BSBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBSMethodBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBSIfBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BSBlock:
		//	BSMethodBody | BSIfBlock;
		@Override public ParserRule getRule() { return rule; }

		//BSMethodBody | BSIfBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//BSMethodBody
		public RuleCall getBSMethodBodyParserRuleCall_0() { return cBSMethodBodyParserRuleCall_0; }

		//BSIfBlock
		public RuleCall getBSIfBlockParserRuleCall_1() { return cBSIfBlockParserRuleCall_1; }
	}

	public class BSSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSSymbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBSVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBSParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBSMemberParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BSSymbol:
		//	BSVariableDeclaration | BSParameter | BSMember;
		@Override public ParserRule getRule() { return rule; }

		//BSVariableDeclaration | BSParameter | BSMember
		public Alternatives getAlternatives() { return cAlternatives; }

		//BSVariableDeclaration
		public RuleCall getBSVariableDeclarationParserRuleCall_0() { return cBSVariableDeclarationParserRuleCall_0; }

		//BSParameter
		public RuleCall getBSParameterParserRuleCall_1() { return cBSParameterParserRuleCall_1; }

		//BSMember
		public RuleCall getBSMemberParserRuleCall_2() { return cBSMemberParserRuleCall_2; }
	}

	public class BSExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSExpression");
		private final RuleCall cBSAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BSExpression:
		//	BSAssignment;
		@Override public ParserRule getRule() { return rule; }

		//BSAssignment
		public RuleCall getBSAssignmentParserRuleCall() { return cBSAssignmentParserRuleCall; }
	}

	public class BSAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cBSCastingExpressionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cBSSelectionExpressionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBSAssignmentLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBSExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BSAssignment returns BSExpression:
		//	(BSCastingExpression | BSSelectionExpression) ({BSAssignment.left=current} "=" right=BSExpression)?;
		@Override public ParserRule getRule() { return rule; }

		//(BSCastingExpression | BSSelectionExpression) ({BSAssignment.left=current} "=" right=BSExpression)?
		public Group getGroup() { return cGroup; }

		//BSCastingExpression | BSSelectionExpression
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//BSCastingExpression
		public RuleCall getBSCastingExpressionParserRuleCall_0_0() { return cBSCastingExpressionParserRuleCall_0_0; }

		//BSSelectionExpression
		public RuleCall getBSSelectionExpressionParserRuleCall_0_1() { return cBSSelectionExpressionParserRuleCall_0_1; }

		//({BSAssignment.left=current} "=" right=BSExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{BSAssignment.left=current}
		public Action getBSAssignmentLeftAction_1_0() { return cBSAssignmentLeftAction_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//right=BSExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BSExpression
		public RuleCall getRightBSExpressionParserRuleCall_1_2_0() { return cRightBSExpressionParserRuleCall_1_2_0; }
	}

	public class BSCastingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSCastingExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCastTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCastTypeAlternatives_1_0 = (Alternatives)cCastTypeAssignment_1.eContents().get(0);
		private final Keyword cCastTypeStringKeyword_1_0_0 = (Keyword)cCastTypeAlternatives_1_0.eContents().get(0);
		private final Keyword cCastTypeNumberKeyword_1_0_1 = (Keyword)cCastTypeAlternatives_1_0.eContents().get(1);
		private final Keyword cCastTypeObjectKeyword_1_0_2 = (Keyword)cCastTypeAlternatives_1_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCastExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCastExprBSSelectionExpressionParserRuleCall_3_0 = (RuleCall)cCastExprAssignment_3.eContents().get(0);
		
		//BSCastingExpression returns BSExpression:
		//	"(" castType=("string" | "number" | "object") ")" castExpr=BSSelectionExpression;
		@Override public ParserRule getRule() { return rule; }

		//"(" castType=("string" | "number" | "object") ")" castExpr=BSSelectionExpression
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//castType=("string" | "number" | "object")
		public Assignment getCastTypeAssignment_1() { return cCastTypeAssignment_1; }

		//"string" | "number" | "object"
		public Alternatives getCastTypeAlternatives_1_0() { return cCastTypeAlternatives_1_0; }

		//"string"
		public Keyword getCastTypeStringKeyword_1_0_0() { return cCastTypeStringKeyword_1_0_0; }

		//"number"
		public Keyword getCastTypeNumberKeyword_1_0_1() { return cCastTypeNumberKeyword_1_0_1; }

		//"object"
		public Keyword getCastTypeObjectKeyword_1_0_2() { return cCastTypeObjectKeyword_1_0_2; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//castExpr=BSSelectionExpression
		public Assignment getCastExprAssignment_3() { return cCastExprAssignment_3; }

		//BSSelectionExpression
		public RuleCall getCastExprBSSelectionExpressionParserRuleCall_3_0() { return cCastExprBSSelectionExpressionParserRuleCall_3_0; }
	}

	public class BSSelectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSSelectionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBSTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBSMemberSelectionReceiverAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMemberAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cMemberBSMemberCrossReference_1_2_0 = (CrossReference)cMemberAssignment_1_2.eContents().get(0);
		private final RuleCall cMemberBSMemberIDTerminalRuleCall_1_2_0_1 = (RuleCall)cMemberBSMemberCrossReference_1_2_0.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cMethodinvocationAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final Keyword cMethodinvocationLeftParenthesisKeyword_1_3_0_0 = (Keyword)cMethodinvocationAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Assignment cArgsAssignment_1_3_1_0 = (Assignment)cGroup_1_3_1.eContents().get(0);
		private final RuleCall cArgsBSExpressionParserRuleCall_1_3_1_0_0 = (RuleCall)cArgsAssignment_1_3_1_0.eContents().get(0);
		private final Group cGroup_1_3_1_1 = (Group)cGroup_1_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_1_1_0 = (Keyword)cGroup_1_3_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_3_1_1_1 = (Assignment)cGroup_1_3_1_1.eContents().get(1);
		private final RuleCall cArgsBSExpressionParserRuleCall_1_3_1_1_1_0 = (RuleCall)cArgsAssignment_1_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		
		//BSSelectionExpression returns BSExpression:
		//	BSTerminalExpression ({BSMemberSelection.receiver=current} "." member=[BSMember] (methodinvocation?="("
		//	(args+=BSExpression ("," args+=BSExpression)*)? ")")?)*;
		@Override public ParserRule getRule() { return rule; }

		//BSTerminalExpression ({BSMemberSelection.receiver=current} "." member=[BSMember] (methodinvocation?="("
		//(args+=BSExpression ("," args+=BSExpression)*)? ")")?)*
		public Group getGroup() { return cGroup; }

		//BSTerminalExpression
		public RuleCall getBSTerminalExpressionParserRuleCall_0() { return cBSTerminalExpressionParserRuleCall_0; }

		//({BSMemberSelection.receiver=current} "." member=[BSMember] (methodinvocation?="(" (args+=BSExpression (","
		//args+=BSExpression)*)? ")")?)*
		public Group getGroup_1() { return cGroup_1; }

		//{BSMemberSelection.receiver=current}
		public Action getBSMemberSelectionReceiverAction_1_0() { return cBSMemberSelectionReceiverAction_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//member=[BSMember]
		public Assignment getMemberAssignment_1_2() { return cMemberAssignment_1_2; }

		//[BSMember]
		public CrossReference getMemberBSMemberCrossReference_1_2_0() { return cMemberBSMemberCrossReference_1_2_0; }

		//ID
		public RuleCall getMemberBSMemberIDTerminalRuleCall_1_2_0_1() { return cMemberBSMemberIDTerminalRuleCall_1_2_0_1; }

		//(methodinvocation?="(" (args+=BSExpression ("," args+=BSExpression)*)? ")")?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//methodinvocation?="("
		public Assignment getMethodinvocationAssignment_1_3_0() { return cMethodinvocationAssignment_1_3_0; }

		//"("
		public Keyword getMethodinvocationLeftParenthesisKeyword_1_3_0_0() { return cMethodinvocationLeftParenthesisKeyword_1_3_0_0; }

		//(args+=BSExpression ("," args+=BSExpression)*)?
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }

		//args+=BSExpression
		public Assignment getArgsAssignment_1_3_1_0() { return cArgsAssignment_1_3_1_0; }

		//BSExpression
		public RuleCall getArgsBSExpressionParserRuleCall_1_3_1_0_0() { return cArgsBSExpressionParserRuleCall_1_3_1_0_0; }

		//("," args+=BSExpression)*
		public Group getGroup_1_3_1_1() { return cGroup_1_3_1_1; }

		//","
		public Keyword getCommaKeyword_1_3_1_1_0() { return cCommaKeyword_1_3_1_1_0; }

		//args+=BSExpression
		public Assignment getArgsAssignment_1_3_1_1_1() { return cArgsAssignment_1_3_1_1_1; }

		//BSExpression
		public RuleCall getArgsBSExpressionParserRuleCall_1_3_1_1_1_0() { return cArgsBSExpressionParserRuleCall_1_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3_2() { return cRightParenthesisKeyword_1_3_2; }
	}

	public class BSTerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSTerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBSStringConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBSNumberConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBSBooleanConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBSNullAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cNullKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBSThisAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cThisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cBSClientAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cClientKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cBSSymbolRefAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cSymbolAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cSymbolBSSymbolCrossReference_6_1_0 = (CrossReference)cSymbolAssignment_6_1.eContents().get(0);
		private final RuleCall cSymbolBSSymbolIDTerminalRuleCall_6_1_0_1 = (RuleCall)cSymbolBSSymbolCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Assignment cMethodinvocationAssignment_6_2_0 = (Assignment)cGroup_6_2.eContents().get(0);
		private final Keyword cMethodinvocationLeftParenthesisKeyword_6_2_0_0 = (Keyword)cMethodinvocationAssignment_6_2_0.eContents().get(0);
		private final Group cGroup_6_2_1 = (Group)cGroup_6_2.eContents().get(1);
		private final Assignment cArgsAssignment_6_2_1_0 = (Assignment)cGroup_6_2_1.eContents().get(0);
		private final RuleCall cArgsBSExpressionParserRuleCall_6_2_1_0_0 = (RuleCall)cArgsAssignment_6_2_1_0.eContents().get(0);
		private final Group cGroup_6_2_1_1 = (Group)cGroup_6_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_6_2_1_1_0 = (Keyword)cGroup_6_2_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_6_2_1_1_1 = (Assignment)cGroup_6_2_1_1.eContents().get(1);
		private final RuleCall cArgsBSExpressionParserRuleCall_6_2_1_1_1_0 = (RuleCall)cArgsAssignment_6_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2_2 = (Keyword)cGroup_6_2.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cBSNewAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cNewKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cTypeAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cTypeBSClassCrossReference_7_2_0 = (CrossReference)cTypeAssignment_7_2.eContents().get(0);
		private final RuleCall cTypeBSClassQualifiedNameParserRuleCall_7_2_0_1 = (RuleCall)cTypeBSClassCrossReference_7_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_7_4 = (Group)cGroup_7.eContents().get(4);
		private final Assignment cArgsAssignment_7_4_0 = (Assignment)cGroup_7_4.eContents().get(0);
		private final RuleCall cArgsBSExpressionParserRuleCall_7_4_0_0 = (RuleCall)cArgsAssignment_7_4_0.eContents().get(0);
		private final Group cGroup_7_4_1 = (Group)cGroup_7_4.eContents().get(1);
		private final Keyword cCommaKeyword_7_4_1_0 = (Keyword)cGroup_7_4_1.eContents().get(0);
		private final Assignment cArgsAssignment_7_4_1_1 = (Assignment)cGroup_7_4_1.eContents().get(1);
		private final RuleCall cArgsBSExpressionParserRuleCall_7_4_1_1_0 = (RuleCall)cArgsAssignment_7_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cBSExpressionParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		
		//BSTerminalExpression returns BSExpression:
		//	{BSStringConstant} value=STRING | {BSNumberConstant} value=INT | {BSBooleanConstant} value=("true" | "false") |
		//	{BSNull} "null" | {BSThis} "this" | {BSClient} "client" | {BSSymbolRef} symbol=[BSSymbol] (=> methodinvocation?="("
		//	(args+=BSExpression ("," args+=BSExpression)*)? ")")? | {BSNew} "new" type=[BSClass|QualifiedName] "("
		//	(args+=BSExpression ("," args+=BSExpression)*)? ")" | "(" BSExpression ")";
		@Override public ParserRule getRule() { return rule; }

		//{BSStringConstant} value=STRING | {BSNumberConstant} value=INT | {BSBooleanConstant} value=("true" | "false") | {BSNull}
		//"null" | {BSThis} "this" | {BSClient} "client" | {BSSymbolRef} symbol=[BSSymbol] (=> methodinvocation?="("
		//(args+=BSExpression ("," args+=BSExpression)*)? ")")? | {BSNew} "new" type=[BSClass|QualifiedName] "("
		//(args+=BSExpression ("," args+=BSExpression)*)? ")" | "(" BSExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BSStringConstant} value=STRING
		public Group getGroup_0() { return cGroup_0; }

		//{BSStringConstant}
		public Action getBSStringConstantAction_0_0() { return cBSStringConstantAction_0_0; }

		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }

		//{BSNumberConstant} value=INT
		public Group getGroup_1() { return cGroup_1; }

		//{BSNumberConstant}
		public Action getBSNumberConstantAction_1_0() { return cBSNumberConstantAction_1_0; }

		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }

		//{BSBooleanConstant} value=("true" | "false")
		public Group getGroup_2() { return cGroup_2; }

		//{BSBooleanConstant}
		public Action getBSBooleanConstantAction_2_0() { return cBSBooleanConstantAction_2_0; }

		//value=("true" | "false")
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//"true" | "false"
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }

		//"true"
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }

		//{BSNull} "null"
		public Group getGroup_3() { return cGroup_3; }

		//{BSNull}
		public Action getBSNullAction_3_0() { return cBSNullAction_3_0; }

		//"null"
		public Keyword getNullKeyword_3_1() { return cNullKeyword_3_1; }

		//{BSThis} "this"
		public Group getGroup_4() { return cGroup_4; }

		//{BSThis}
		public Action getBSThisAction_4_0() { return cBSThisAction_4_0; }

		//"this"
		public Keyword getThisKeyword_4_1() { return cThisKeyword_4_1; }

		//{BSClient} "client"
		public Group getGroup_5() { return cGroup_5; }

		//{BSClient}
		public Action getBSClientAction_5_0() { return cBSClientAction_5_0; }

		//"client"
		public Keyword getClientKeyword_5_1() { return cClientKeyword_5_1; }

		//{BSSymbolRef} symbol=[BSSymbol] (=> methodinvocation?="(" (args+=BSExpression ("," args+=BSExpression)*)? ")")?
		public Group getGroup_6() { return cGroup_6; }

		//{BSSymbolRef}
		public Action getBSSymbolRefAction_6_0() { return cBSSymbolRefAction_6_0; }

		//symbol=[BSSymbol]
		public Assignment getSymbolAssignment_6_1() { return cSymbolAssignment_6_1; }

		//[BSSymbol]
		public CrossReference getSymbolBSSymbolCrossReference_6_1_0() { return cSymbolBSSymbolCrossReference_6_1_0; }

		//ID
		public RuleCall getSymbolBSSymbolIDTerminalRuleCall_6_1_0_1() { return cSymbolBSSymbolIDTerminalRuleCall_6_1_0_1; }

		//(=> methodinvocation?="(" (args+=BSExpression ("," args+=BSExpression)*)? ")")?
		public Group getGroup_6_2() { return cGroup_6_2; }

		//=> methodinvocation?="("
		public Assignment getMethodinvocationAssignment_6_2_0() { return cMethodinvocationAssignment_6_2_0; }

		//"("
		public Keyword getMethodinvocationLeftParenthesisKeyword_6_2_0_0() { return cMethodinvocationLeftParenthesisKeyword_6_2_0_0; }

		//(args+=BSExpression ("," args+=BSExpression)*)?
		public Group getGroup_6_2_1() { return cGroup_6_2_1; }

		//args+=BSExpression
		public Assignment getArgsAssignment_6_2_1_0() { return cArgsAssignment_6_2_1_0; }

		//BSExpression
		public RuleCall getArgsBSExpressionParserRuleCall_6_2_1_0_0() { return cArgsBSExpressionParserRuleCall_6_2_1_0_0; }

		//("," args+=BSExpression)*
		public Group getGroup_6_2_1_1() { return cGroup_6_2_1_1; }

		//","
		public Keyword getCommaKeyword_6_2_1_1_0() { return cCommaKeyword_6_2_1_1_0; }

		//args+=BSExpression
		public Assignment getArgsAssignment_6_2_1_1_1() { return cArgsAssignment_6_2_1_1_1; }

		//BSExpression
		public RuleCall getArgsBSExpressionParserRuleCall_6_2_1_1_1_0() { return cArgsBSExpressionParserRuleCall_6_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_2_2() { return cRightParenthesisKeyword_6_2_2; }

		//{BSNew} "new" type=[BSClass|QualifiedName] "(" (args+=BSExpression ("," args+=BSExpression)*)? ")"
		public Group getGroup_7() { return cGroup_7; }

		//{BSNew}
		public Action getBSNewAction_7_0() { return cBSNewAction_7_0; }

		//"new"
		public Keyword getNewKeyword_7_1() { return cNewKeyword_7_1; }

		//type=[BSClass|QualifiedName]
		public Assignment getTypeAssignment_7_2() { return cTypeAssignment_7_2; }

		//[BSClass|QualifiedName]
		public CrossReference getTypeBSClassCrossReference_7_2_0() { return cTypeBSClassCrossReference_7_2_0; }

		//QualifiedName
		public RuleCall getTypeBSClassQualifiedNameParserRuleCall_7_2_0_1() { return cTypeBSClassQualifiedNameParserRuleCall_7_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_3() { return cLeftParenthesisKeyword_7_3; }

		//(args+=BSExpression ("," args+=BSExpression)*)?
		public Group getGroup_7_4() { return cGroup_7_4; }

		//args+=BSExpression
		public Assignment getArgsAssignment_7_4_0() { return cArgsAssignment_7_4_0; }

		//BSExpression
		public RuleCall getArgsBSExpressionParserRuleCall_7_4_0_0() { return cArgsBSExpressionParserRuleCall_7_4_0_0; }

		//("," args+=BSExpression)*
		public Group getGroup_7_4_1() { return cGroup_7_4_1; }

		//","
		public Keyword getCommaKeyword_7_4_1_0() { return cCommaKeyword_7_4_1_0; }

		//args+=BSExpression
		public Assignment getArgsAssignment_7_4_1_1() { return cArgsAssignment_7_4_1_1; }

		//BSExpression
		public RuleCall getArgsBSExpressionParserRuleCall_7_4_1_1_0() { return cArgsBSExpressionParserRuleCall_7_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7_5() { return cRightParenthesisKeyword_7_5; }

		//"(" BSExpression ")"
		public Group getGroup_8() { return cGroup_8; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_0() { return cLeftParenthesisKeyword_8_0; }

		//BSExpression
		public RuleCall getBSExpressionParserRuleCall_8_1() { return cBSExpressionParserRuleCall_8_1; }

		//")"
		public Keyword getRightParenthesisKeyword_8_2() { return cRightParenthesisKeyword_8_2; }
	}
	
	
	private final BSFileElements pBSFile;
	private final BSImportElements pBSImport;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	private final BSClassElements pBSClass;
	private final BSMemberElements pBSMember;
	private final BSFieldElements pBSField;
	private final BSMethodElements pBSMethod;
	private final BSParameterElements pBSParameter;
	private final BSMethodBodyElements pBSMethodBody;
	private final BSStatementElements pBSStatement;
	private final BSReturnElements pBSReturn;
	private final BSVariableDeclarationElements pBSVariableDeclaration;
	private final BSIfStatementElements pBSIfStatement;
	private final BSIfBlockElements pBSIfBlock;
	private final BSBlockElements pBSBlock;
	private final BSSymbolElements pBSSymbol;
	private final BSExpressionElements pBSExpression;
	private final BSAssignmentElements pBSAssignment;
	private final BSCastingExpressionElements pBSCastingExpression;
	private final BSSelectionExpressionElements pBSSelectionExpression;
	private final BSTerminalExpressionElements pBSTerminalExpression;
	private final TerminalRule tID;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BlorqueScriptGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBSFile = new BSFileElements();
		this.pBSImport = new BSImportElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pBSClass = new BSClassElements();
		this.pBSMember = new BSMemberElements();
		this.pBSField = new BSFieldElements();
		this.pBSMethod = new BSMethodElements();
		this.pBSParameter = new BSParameterElements();
		this.pBSMethodBody = new BSMethodBodyElements();
		this.pBSStatement = new BSStatementElements();
		this.pBSReturn = new BSReturnElements();
		this.pBSVariableDeclaration = new BSVariableDeclarationElements();
		this.pBSIfStatement = new BSIfStatementElements();
		this.pBSIfBlock = new BSIfBlockElements();
		this.pBSBlock = new BSBlockElements();
		this.pBSSymbol = new BSSymbolElements();
		this.pBSExpression = new BSExpressionElements();
		this.pBSAssignment = new BSAssignmentElements();
		this.pBSCastingExpression = new BSCastingExpressionElements();
		this.pBSSelectionExpression = new BSSelectionExpressionElements();
		this.pBSTerminalExpression = new BSTerminalExpressionElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.blorquescript.BlorqueScript".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BSFile:
	//	("package" name=QualifiedName ";")? imports+=BSImport* classes+=BSClass*;
	public BSFileElements getBSFileAccess() {
		return pBSFile;
	}
	
	public ParserRule getBSFileRule() {
		return getBSFileAccess().getRule();
	}

	//BSImport:
	//	"import" importedNamespace=QualifiedNameWithWildcard ";";
	public BSImportElements getBSImportAccess() {
		return pBSImport;
	}
	
	public ParserRule getBSImportRule() {
		return getBSImportAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//BSClass:
	//	"class" name=ID (":" superclass=[BSClass|QualifiedName])? "{" members+=BSMember* "}";
	public BSClassElements getBSClassAccess() {
		return pBSClass;
	}
	
	public ParserRule getBSClassRule() {
		return getBSClassAccess().getRule();
	}

	//BSMember:
	//	BSField | BSMethod;
	public BSMemberElements getBSMemberAccess() {
		return pBSMember;
	}
	
	public ParserRule getBSMemberRule() {
		return getBSMemberAccess().getRule();
	}

	//BSField:
	//	type=[BSClass|QualifiedName] name=ID ";";
	public BSFieldElements getBSFieldAccess() {
		return pBSField;
	}
	
	public ParserRule getBSFieldRule() {
		return getBSFieldAccess().getRule();
	}

	//BSMethod:
	//	type=[BSClass|QualifiedName] name=ID "(" (params+=BSParameter ("," params+=BSParameter)*)? ")" body=BSMethodBody;
	public BSMethodElements getBSMethodAccess() {
		return pBSMethod;
	}
	
	public ParserRule getBSMethodRule() {
		return getBSMethodAccess().getRule();
	}

	//BSParameter:
	//	type=[BSClass|QualifiedName] name=ID;
	public BSParameterElements getBSParameterAccess() {
		return pBSParameter;
	}
	
	public ParserRule getBSParameterRule() {
		return getBSParameterAccess().getRule();
	}

	//BSMethodBody:
	//	{BSMethodBody} "{" statements+=BSStatement* "}";
	public BSMethodBodyElements getBSMethodBodyAccess() {
		return pBSMethodBody;
	}
	
	public ParserRule getBSMethodBodyRule() {
		return getBSMethodBodyAccess().getRule();
	}

	//BSStatement:
	//	BSVariableDeclaration | BSReturn | BSExpression ";" | BSIfStatement;
	public BSStatementElements getBSStatementAccess() {
		return pBSStatement;
	}
	
	public ParserRule getBSStatementRule() {
		return getBSStatementAccess().getRule();
	}

	//BSReturn:
	//	"return" expression=BSExpression ";";
	public BSReturnElements getBSReturnAccess() {
		return pBSReturn;
	}
	
	public ParserRule getBSReturnRule() {
		return getBSReturnAccess().getRule();
	}

	//BSVariableDeclaration:
	//	type=[BSClass|QualifiedName] name=ID ("=" expression=BSExpression)? ";";
	public BSVariableDeclarationElements getBSVariableDeclarationAccess() {
		return pBSVariableDeclaration;
	}
	
	public ParserRule getBSVariableDeclarationRule() {
		return getBSVariableDeclarationAccess().getRule();
	}

	//BSIfStatement:
	//	"if" "(" expression=BSExpression ")" thenBlock=BSIfBlock ("else" elseBlock=BSIfBlock)?;
	public BSIfStatementElements getBSIfStatementAccess() {
		return pBSIfStatement;
	}
	
	public ParserRule getBSIfStatementRule() {
		return getBSIfStatementAccess().getRule();
	}

	//BSIfBlock:
	//	statements+=BSStatement | "{" statements+=BSStatement+ "}";
	public BSIfBlockElements getBSIfBlockAccess() {
		return pBSIfBlock;
	}
	
	public ParserRule getBSIfBlockRule() {
		return getBSIfBlockAccess().getRule();
	}

	//BSBlock:
	//	BSMethodBody | BSIfBlock;
	public BSBlockElements getBSBlockAccess() {
		return pBSBlock;
	}
	
	public ParserRule getBSBlockRule() {
		return getBSBlockAccess().getRule();
	}

	//BSSymbol:
	//	BSVariableDeclaration | BSParameter | BSMember;
	public BSSymbolElements getBSSymbolAccess() {
		return pBSSymbol;
	}
	
	public ParserRule getBSSymbolRule() {
		return getBSSymbolAccess().getRule();
	}

	//BSExpression:
	//	BSAssignment;
	public BSExpressionElements getBSExpressionAccess() {
		return pBSExpression;
	}
	
	public ParserRule getBSExpressionRule() {
		return getBSExpressionAccess().getRule();
	}

	//BSAssignment returns BSExpression:
	//	(BSCastingExpression | BSSelectionExpression) ({BSAssignment.left=current} "=" right=BSExpression)?;
	public BSAssignmentElements getBSAssignmentAccess() {
		return pBSAssignment;
	}
	
	public ParserRule getBSAssignmentRule() {
		return getBSAssignmentAccess().getRule();
	}

	//BSCastingExpression returns BSExpression:
	//	"(" castType=("string" | "number" | "object") ")" castExpr=BSSelectionExpression;
	public BSCastingExpressionElements getBSCastingExpressionAccess() {
		return pBSCastingExpression;
	}
	
	public ParserRule getBSCastingExpressionRule() {
		return getBSCastingExpressionAccess().getRule();
	}

	//BSSelectionExpression returns BSExpression:
	//	BSTerminalExpression ({BSMemberSelection.receiver=current} "." member=[BSMember] (methodinvocation?="("
	//	(args+=BSExpression ("," args+=BSExpression)*)? ")")?)*;
	public BSSelectionExpressionElements getBSSelectionExpressionAccess() {
		return pBSSelectionExpression;
	}
	
	public ParserRule getBSSelectionExpressionRule() {
		return getBSSelectionExpressionAccess().getRule();
	}

	//BSTerminalExpression returns BSExpression:
	//	{BSStringConstant} value=STRING | {BSNumberConstant} value=INT | {BSBooleanConstant} value=("true" | "false") |
	//	{BSNull} "null" | {BSThis} "this" | {BSClient} "client" | {BSSymbolRef} symbol=[BSSymbol] (=> methodinvocation?="("
	//	(args+=BSExpression ("," args+=BSExpression)*)? ")")? | {BSNew} "new" type=[BSClass|QualifiedName] "("
	//	(args+=BSExpression ("," args+=BSExpression)*)? ")" | "(" BSExpression ")";
	public BSTerminalExpressionElements getBSTerminalExpressionAccess() {
		return pBSTerminalExpression;
	}
	
	public ParserRule getBSTerminalExpressionRule() {
		return getBSTerminalExpressionAccess().getRule();
	}

	//terminal ID:
	//	"$"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9" | ":")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
