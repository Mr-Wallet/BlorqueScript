/*
 * generated by Xtext
 */
package org.example.blorquescript.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class BlorqueScriptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BSFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsBSImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cClassesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassesBSClassParserRuleCall_2_0 = (RuleCall)cClassesAssignment_2.eContents().get(0);
		
		//BSFile:
		//	("package" name=QualifiedName ";")? imports+=BSImport* classes+=BSClass*;
		@Override public ParserRule getRule() { return rule; }

		//("package" name=QualifiedName ";")? imports+=BSImport* classes+=BSClass*
		public Group getGroup() { return cGroup; }

		//("package" name=QualifiedName ";")?
		public Group getGroup_0() { return cGroup_0; }

		//"package"
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//imports+=BSImport*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//BSImport
		public RuleCall getImportsBSImportParserRuleCall_1_0() { return cImportsBSImportParserRuleCall_1_0; }

		//classes+=BSClass*
		public Assignment getClassesAssignment_2() { return cClassesAssignment_2; }

		//BSClass
		public RuleCall getClassesBSClassParserRuleCall_2_0() { return cClassesBSClassParserRuleCall_2_0; }
	}

	public class BSImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BSImport:
		//	"import" importedNamespace=QualifiedNameWithWildcard ";";
		@Override public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		@Override public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class BSClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperclassAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperclassBSClassCrossReference_2_1_0 = (CrossReference)cSuperclassAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperclassBSClassQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperclassBSClassCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMembersBSMemberParserRuleCall_4_0 = (RuleCall)cMembersAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BSClass:
		//	"class" name=ID (":" superclass=[BSClass|QualifiedName])? "{" members+=BSMember* "}";
		@Override public ParserRule getRule() { return rule; }

		//"class" name=ID (":" superclass=[BSClass|QualifiedName])? "{" members+=BSMember* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(":" superclass=[BSClass|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//superclass=[BSClass|QualifiedName]
		public Assignment getSuperclassAssignment_2_1() { return cSuperclassAssignment_2_1; }

		//[BSClass|QualifiedName]
		public CrossReference getSuperclassBSClassCrossReference_2_1_0() { return cSuperclassBSClassCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getSuperclassBSClassQualifiedNameParserRuleCall_2_1_0_1() { return cSuperclassBSClassQualifiedNameParserRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//members+=BSMember*
		public Assignment getMembersAssignment_4() { return cMembersAssignment_4; }

		//BSMember
		public RuleCall getMembersBSMemberParserRuleCall_4_0() { return cMembersBSMemberParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class BSMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBSFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBSMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BSMember:
		//	BSField | BSMethod;
		@Override public ParserRule getRule() { return rule; }

		//BSField | BSMethod
		public Alternatives getAlternatives() { return cAlternatives; }

		//BSField
		public RuleCall getBSFieldParserRuleCall_0() { return cBSFieldParserRuleCall_0; }

		//BSMethod
		public RuleCall getBSMethodParserRuleCall_1() { return cBSMethodParserRuleCall_1; }
	}

	public class BSFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cPTypeBSPrimitiveTypeEnumRuleCall_0_0_0 = (RuleCall)cPTypeAssignment_0_0.eContents().get(0);
		private final Assignment cRTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cRTypeBSClassCrossReference_0_1_0 = (CrossReference)cRTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cRTypeBSClassQualifiedNameParserRuleCall_0_1_0_1 = (RuleCall)cRTypeBSClassCrossReference_0_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIsArrayAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cIsArrayLeftSquareBracketKeyword_2_0_0 = (Keyword)cIsArrayAssignment_2_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BSField:
		//	(pType=BSPrimitiveType | rType=[BSClass|QualifiedName]) name=ID (isArray?="[" "]")? ";";
		@Override public ParserRule getRule() { return rule; }

		//(pType=BSPrimitiveType | rType=[BSClass|QualifiedName]) name=ID (isArray?="[" "]")? ";"
		public Group getGroup() { return cGroup; }

		//pType=BSPrimitiveType | rType=[BSClass|QualifiedName]
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//pType=BSPrimitiveType
		public Assignment getPTypeAssignment_0_0() { return cPTypeAssignment_0_0; }

		//BSPrimitiveType
		public RuleCall getPTypeBSPrimitiveTypeEnumRuleCall_0_0_0() { return cPTypeBSPrimitiveTypeEnumRuleCall_0_0_0; }

		//rType=[BSClass|QualifiedName]
		public Assignment getRTypeAssignment_0_1() { return cRTypeAssignment_0_1; }

		//[BSClass|QualifiedName]
		public CrossReference getRTypeBSClassCrossReference_0_1_0() { return cRTypeBSClassCrossReference_0_1_0; }

		//QualifiedName
		public RuleCall getRTypeBSClassQualifiedNameParserRuleCall_0_1_0_1() { return cRTypeBSClassQualifiedNameParserRuleCall_0_1_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(isArray?="[" "]")?
		public Group getGroup_2() { return cGroup_2; }

		//isArray?="["
		public Assignment getIsArrayAssignment_2_0() { return cIsArrayAssignment_2_0; }

		//"["
		public Keyword getIsArrayLeftSquareBracketKeyword_2_0_0() { return cIsArrayLeftSquareBracketKeyword_2_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1() { return cRightSquareBracketKeyword_2_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class BSMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cPTypeBSPrimitiveTypeEnumRuleCall_0_0_0 = (RuleCall)cPTypeAssignment_0_0.eContents().get(0);
		private final Assignment cRTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cRTypeBSClassCrossReference_0_1_0 = (CrossReference)cRTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cRTypeBSClassQualifiedNameParserRuleCall_0_1_0_1 = (RuleCall)cRTypeBSClassCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIsArrayAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIsArrayLeftSquareBracketKeyword_1_0_0 = (Keyword)cIsArrayAssignment_1_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsBSParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsBSParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyBSMethodBodyParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//BSMethod:
		//	(pType=BSPrimitiveType | rType=[BSClass|QualifiedName]) (isArray?="[" "]")? name=ID "(" (params+=BSParameter (","
		//	params+=BSParameter)*)? ")" body=BSMethodBody;
		@Override public ParserRule getRule() { return rule; }

		//(pType=BSPrimitiveType | rType=[BSClass|QualifiedName]) (isArray?="[" "]")? name=ID "(" (params+=BSParameter (","
		//params+=BSParameter)*)? ")" body=BSMethodBody
		public Group getGroup() { return cGroup; }

		//pType=BSPrimitiveType | rType=[BSClass|QualifiedName]
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//pType=BSPrimitiveType
		public Assignment getPTypeAssignment_0_0() { return cPTypeAssignment_0_0; }

		//BSPrimitiveType
		public RuleCall getPTypeBSPrimitiveTypeEnumRuleCall_0_0_0() { return cPTypeBSPrimitiveTypeEnumRuleCall_0_0_0; }

		//rType=[BSClass|QualifiedName]
		public Assignment getRTypeAssignment_0_1() { return cRTypeAssignment_0_1; }

		//[BSClass|QualifiedName]
		public CrossReference getRTypeBSClassCrossReference_0_1_0() { return cRTypeBSClassCrossReference_0_1_0; }

		//QualifiedName
		public RuleCall getRTypeBSClassQualifiedNameParserRuleCall_0_1_0_1() { return cRTypeBSClassQualifiedNameParserRuleCall_0_1_0_1; }

		//(isArray?="[" "]")?
		public Group getGroup_1() { return cGroup_1; }

		//isArray?="["
		public Assignment getIsArrayAssignment_1_0() { return cIsArrayAssignment_1_0; }

		//"["
		public Keyword getIsArrayLeftSquareBracketKeyword_1_0_0() { return cIsArrayLeftSquareBracketKeyword_1_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1() { return cRightSquareBracketKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(params+=BSParameter ("," params+=BSParameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//params+=BSParameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }

		//BSParameter
		public RuleCall getParamsBSParameterParserRuleCall_4_0_0() { return cParamsBSParameterParserRuleCall_4_0_0; }

		//("," params+=BSParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//params+=BSParameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }

		//BSParameter
		public RuleCall getParamsBSParameterParserRuleCall_4_1_1_0() { return cParamsBSParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//body=BSMethodBody
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//BSMethodBody
		public RuleCall getBodyBSMethodBodyParserRuleCall_6_0() { return cBodyBSMethodBodyParserRuleCall_6_0; }
	}

	public class BSParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cPTypeBSPrimitiveTypeEnumRuleCall_0_0_0 = (RuleCall)cPTypeAssignment_0_0.eContents().get(0);
		private final Assignment cRTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cRTypeBSClassCrossReference_0_1_0 = (CrossReference)cRTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cRTypeBSClassQualifiedNameParserRuleCall_0_1_0_1 = (RuleCall)cRTypeBSClassCrossReference_0_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIsArrayAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cIsArrayLeftSquareBracketKeyword_2_0_0 = (Keyword)cIsArrayAssignment_2_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//BSParameter:
		//	(pType=BSPrimitiveType | rType=[BSClass|QualifiedName]) name=ID (isArray?="[" "]")?;
		@Override public ParserRule getRule() { return rule; }

		//(pType=BSPrimitiveType | rType=[BSClass|QualifiedName]) name=ID (isArray?="[" "]")?
		public Group getGroup() { return cGroup; }

		//pType=BSPrimitiveType | rType=[BSClass|QualifiedName]
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//pType=BSPrimitiveType
		public Assignment getPTypeAssignment_0_0() { return cPTypeAssignment_0_0; }

		//BSPrimitiveType
		public RuleCall getPTypeBSPrimitiveTypeEnumRuleCall_0_0_0() { return cPTypeBSPrimitiveTypeEnumRuleCall_0_0_0; }

		//rType=[BSClass|QualifiedName]
		public Assignment getRTypeAssignment_0_1() { return cRTypeAssignment_0_1; }

		//[BSClass|QualifiedName]
		public CrossReference getRTypeBSClassCrossReference_0_1_0() { return cRTypeBSClassCrossReference_0_1_0; }

		//QualifiedName
		public RuleCall getRTypeBSClassQualifiedNameParserRuleCall_0_1_0_1() { return cRTypeBSClassQualifiedNameParserRuleCall_0_1_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(isArray?="[" "]")?
		public Group getGroup_2() { return cGroup_2; }

		//isArray?="["
		public Assignment getIsArrayAssignment_2_0() { return cIsArrayAssignment_2_0; }

		//"["
		public Keyword getIsArrayLeftSquareBracketKeyword_2_0_0() { return cIsArrayLeftSquareBracketKeyword_2_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1() { return cRightSquareBracketKeyword_2_1; }
	}

	public class BSMethodBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSMethodBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBSMethodBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsBSStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BSMethodBody:
		//	{BSMethodBody} "{" statements+=BSStatement* "}";
		@Override public ParserRule getRule() { return rule; }

		//{BSMethodBody} "{" statements+=BSStatement* "}"
		public Group getGroup() { return cGroup; }

		//{BSMethodBody}
		public Action getBSMethodBodyAction_0() { return cBSMethodBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=BSStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//BSStatement
		public RuleCall getStatementsBSStatementParserRuleCall_2_0() { return cStatementsBSStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class BSStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBSVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBSReturnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBSBreakParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBSContinueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cBSExpressionParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cBSIfStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBSWhileLoopParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBSForLoopParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBSSwitchStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//BSStatement:
		//	BSVariableDeclaration | BSReturn | BSBreak | BSContinue | BSExpression ";" | BSIfStatement | BSWhileLoop | BSForLoop
		//	| BSSwitchStatement;
		@Override public ParserRule getRule() { return rule; }

		//BSVariableDeclaration | BSReturn | BSBreak | BSContinue | BSExpression ";" | BSIfStatement | BSWhileLoop | BSForLoop |
		//BSSwitchStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//BSVariableDeclaration
		public RuleCall getBSVariableDeclarationParserRuleCall_0() { return cBSVariableDeclarationParserRuleCall_0; }

		//BSReturn
		public RuleCall getBSReturnParserRuleCall_1() { return cBSReturnParserRuleCall_1; }

		//BSBreak
		public RuleCall getBSBreakParserRuleCall_2() { return cBSBreakParserRuleCall_2; }

		//BSContinue
		public RuleCall getBSContinueParserRuleCall_3() { return cBSContinueParserRuleCall_3; }

		//BSExpression ";"
		public Group getGroup_4() { return cGroup_4; }

		//BSExpression
		public RuleCall getBSExpressionParserRuleCall_4_0() { return cBSExpressionParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//BSIfStatement
		public RuleCall getBSIfStatementParserRuleCall_5() { return cBSIfStatementParserRuleCall_5; }

		//BSWhileLoop
		public RuleCall getBSWhileLoopParserRuleCall_6() { return cBSWhileLoopParserRuleCall_6; }

		//BSForLoop
		public RuleCall getBSForLoopParserRuleCall_7() { return cBSForLoopParserRuleCall_7; }

		//BSSwitchStatement
		public RuleCall getBSSwitchStatementParserRuleCall_8() { return cBSSwitchStatementParserRuleCall_8; }
	}

	public class BSReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBSReturnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionBSExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BSReturn:
		//	{BSReturn} "return" expression=BSExpression? ";";
		@Override public ParserRule getRule() { return rule; }

		//{BSReturn} "return" expression=BSExpression? ";"
		public Group getGroup() { return cGroup; }

		//{BSReturn}
		public Action getBSReturnAction_0() { return cBSReturnAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//expression=BSExpression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//BSExpression
		public RuleCall getExpressionBSExpressionParserRuleCall_2_0() { return cExpressionBSExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class BSBreakElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSBreak");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBSBreakAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BSBreak:
		//	{BSBreak} "break" ";";
		@Override public ParserRule getRule() { return rule; }

		//{BSBreak} "break" ";"
		public Group getGroup() { return cGroup; }

		//{BSBreak}
		public Action getBSBreakAction_0() { return cBSBreakAction_0; }

		//"break"
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class BSContinueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSContinue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBSContinueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BSContinue:
		//	{BSContinue} "continue" ";";
		@Override public ParserRule getRule() { return rule; }

		//{BSContinue} "continue" ";"
		public Group getGroup() { return cGroup; }

		//{BSContinue}
		public Action getBSContinueAction_0() { return cBSContinueAction_0; }

		//"continue"
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class BSVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cPTypeBSPrimitiveTypeEnumRuleCall_0_0_0 = (RuleCall)cPTypeAssignment_0_0.eContents().get(0);
		private final Assignment cRTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cRTypeBSClassCrossReference_0_1_0 = (CrossReference)cRTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cRTypeBSClassQualifiedNameParserRuleCall_0_1_0_1 = (RuleCall)cRTypeBSClassCrossReference_0_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionBSExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BSVariableDeclaration:
		//	(pType=BSPrimitiveType | rType=[BSClass|QualifiedName]) name=ID ("=" expression=BSExpression)? ";";
		@Override public ParserRule getRule() { return rule; }

		//(pType=BSPrimitiveType | rType=[BSClass|QualifiedName]) name=ID ("=" expression=BSExpression)? ";"
		public Group getGroup() { return cGroup; }

		//pType=BSPrimitiveType | rType=[BSClass|QualifiedName]
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//pType=BSPrimitiveType
		public Assignment getPTypeAssignment_0_0() { return cPTypeAssignment_0_0; }

		//BSPrimitiveType
		public RuleCall getPTypeBSPrimitiveTypeEnumRuleCall_0_0_0() { return cPTypeBSPrimitiveTypeEnumRuleCall_0_0_0; }

		//rType=[BSClass|QualifiedName]
		public Assignment getRTypeAssignment_0_1() { return cRTypeAssignment_0_1; }

		//[BSClass|QualifiedName]
		public CrossReference getRTypeBSClassCrossReference_0_1_0() { return cRTypeBSClassCrossReference_0_1_0; }

		//QualifiedName
		public RuleCall getRTypeBSClassQualifiedNameParserRuleCall_0_1_0_1() { return cRTypeBSClassQualifiedNameParserRuleCall_0_1_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("=" expression=BSExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//expression=BSExpression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//BSExpression
		public RuleCall getExpressionBSExpressionParserRuleCall_2_1_0() { return cExpressionBSExpressionParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class BSIfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSIfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionBSExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBlockBSIfBlockParserRuleCall_4_0 = (RuleCall)cThenBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlockBSIfBlockParserRuleCall_5_1_0 = (RuleCall)cElseBlockAssignment_5_1.eContents().get(0);
		
		//BSIfStatement:
		//	"if" "(" expression=BSExpression ")" thenBlock=BSIfBlock ("else" elseBlock=BSIfBlock)?;
		@Override public ParserRule getRule() { return rule; }

		//"if" "(" expression=BSExpression ")" thenBlock=BSIfBlock ("else" elseBlock=BSIfBlock)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=BSExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//BSExpression
		public RuleCall getExpressionBSExpressionParserRuleCall_2_0() { return cExpressionBSExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//thenBlock=BSIfBlock
		public Assignment getThenBlockAssignment_4() { return cThenBlockAssignment_4; }

		//BSIfBlock
		public RuleCall getThenBlockBSIfBlockParserRuleCall_4_0() { return cThenBlockBSIfBlockParserRuleCall_4_0; }

		//(=> "else" elseBlock=BSIfBlock)?
		public Group getGroup_5() { return cGroup_5; }

		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//elseBlock=BSIfBlock
		public Assignment getElseBlockAssignment_5_1() { return cElseBlockAssignment_5_1; }

		//BSIfBlock
		public RuleCall getElseBlockBSIfBlockParserRuleCall_5_1_0() { return cElseBlockBSIfBlockParserRuleCall_5_1_0; }
	}

	public class BSWhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSWhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionBSExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockBSLoopBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		
		//BSWhileLoop:
		//	"while" "(" expression=BSExpression ")" block=BSLoopBlock;
		@Override public ParserRule getRule() { return rule; }

		//"while" "(" expression=BSExpression ")" block=BSLoopBlock
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=BSExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//BSExpression
		public RuleCall getExpressionBSExpressionParserRuleCall_2_0() { return cExpressionBSExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//block=BSLoopBlock
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }

		//BSLoopBlock
		public RuleCall getBlockBSLoopBlockParserRuleCall_4_0() { return cBlockBSLoopBlockParserRuleCall_4_0; }
	}

	public class BSForLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSForLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftBSExpressionParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMiddleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMiddleBSExpressionParserRuleCall_4_0 = (RuleCall)cMiddleAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRightAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRightBSExpressionParserRuleCall_6_0 = (RuleCall)cRightAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBlockAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBlockBSLoopBlockParserRuleCall_8_0 = (RuleCall)cBlockAssignment_8.eContents().get(0);
		
		//BSForLoop:
		//	"for" "(" left=BSExpression ";" middle=BSExpression ";" right=BSExpression ")" block=BSLoopBlock;
		@Override public ParserRule getRule() { return rule; }

		//"for" "(" left=BSExpression ";" middle=BSExpression ";" right=BSExpression ")" block=BSLoopBlock
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//left=BSExpression
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }

		//BSExpression
		public RuleCall getLeftBSExpressionParserRuleCall_2_0() { return cLeftBSExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//middle=BSExpression
		public Assignment getMiddleAssignment_4() { return cMiddleAssignment_4; }

		//BSExpression
		public RuleCall getMiddleBSExpressionParserRuleCall_4_0() { return cMiddleBSExpressionParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//right=BSExpression
		public Assignment getRightAssignment_6() { return cRightAssignment_6; }

		//BSExpression
		public RuleCall getRightBSExpressionParserRuleCall_6_0() { return cRightBSExpressionParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//block=BSLoopBlock
		public Assignment getBlockAssignment_8() { return cBlockAssignment_8; }

		//BSLoopBlock
		public RuleCall getBlockBSLoopBlockParserRuleCall_8_0() { return cBlockBSLoopBlockParserRuleCall_8_0; }
	}

	public class BSSwitchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSSwitchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStringSwitchAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cStringSwitchDollarSignKeyword_1_0 = (Keyword)cStringSwitchAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionBSExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlockBSSwitchBlockParserRuleCall_5_0 = (RuleCall)cBlockAssignment_5.eContents().get(0);
		
		//BSSwitchStatement:
		//	"switch" stringSwitch?="$"? "(" expression=BSExpression ")" block=BSSwitchBlock;
		@Override public ParserRule getRule() { return rule; }

		//"switch" stringSwitch?="$"? "(" expression=BSExpression ")" block=BSSwitchBlock
		public Group getGroup() { return cGroup; }

		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//stringSwitch?="$"?
		public Assignment getStringSwitchAssignment_1() { return cStringSwitchAssignment_1; }

		//"$"
		public Keyword getStringSwitchDollarSignKeyword_1_0() { return cStringSwitchDollarSignKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//expression=BSExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//BSExpression
		public RuleCall getExpressionBSExpressionParserRuleCall_3_0() { return cExpressionBSExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//block=BSSwitchBlock
		public Assignment getBlockAssignment_5() { return cBlockAssignment_5; }

		//BSSwitchBlock
		public RuleCall getBlockBSSwitchBlockParserRuleCall_5_0() { return cBlockBSSwitchBlockParserRuleCall_5_0; }
	}

	public class BSIfBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSIfBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatementsBSStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBSIfBlockAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStatementsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cStatementsBSStatementParserRuleCall_1_2_0 = (RuleCall)cStatementsAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//BSIfBlock:
		//	statements+=BSStatement | {BSIfBlock} "{" statements+=BSStatement* "}";
		@Override public ParserRule getRule() { return rule; }

		//statements+=BSStatement | {BSIfBlock} "{" statements+=BSStatement* "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//statements+=BSStatement
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }

		//BSStatement
		public RuleCall getStatementsBSStatementParserRuleCall_0_0() { return cStatementsBSStatementParserRuleCall_0_0; }

		//{BSIfBlock} "{" statements+=BSStatement* "}"
		public Group getGroup_1() { return cGroup_1; }

		//{BSIfBlock}
		public Action getBSIfBlockAction_1_0() { return cBSIfBlockAction_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//statements+=BSStatement*
		public Assignment getStatementsAssignment_1_2() { return cStatementsAssignment_1_2; }

		//BSStatement
		public RuleCall getStatementsBSStatementParserRuleCall_1_2_0() { return cStatementsBSStatementParserRuleCall_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class BSLoopBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSLoopBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatementsBSStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBSLoopBlockAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStatementsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cStatementsBSStatementParserRuleCall_1_2_0 = (RuleCall)cStatementsAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//BSLoopBlock:
		//	statements+=BSStatement | {BSLoopBlock} "{" statements+=BSStatement* "}";
		@Override public ParserRule getRule() { return rule; }

		//statements+=BSStatement | {BSLoopBlock} "{" statements+=BSStatement* "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//statements+=BSStatement
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }

		//BSStatement
		public RuleCall getStatementsBSStatementParserRuleCall_0_0() { return cStatementsBSStatementParserRuleCall_0_0; }

		//{BSLoopBlock} "{" statements+=BSStatement* "}"
		public Group getGroup_1() { return cGroup_1; }

		//{BSLoopBlock}
		public Action getBSLoopBlockAction_1_0() { return cBSLoopBlockAction_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//statements+=BSStatement*
		public Assignment getStatementsAssignment_1_2() { return cStatementsAssignment_1_2; }

		//BSStatement
		public RuleCall getStatementsBSStatementParserRuleCall_1_2_0() { return cStatementsBSStatementParserRuleCall_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class BSSwitchBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSSwitchBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBSSwitchBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCasesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCasesBSCaseParserRuleCall_2_0 = (RuleCall)cCasesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BSSwitchBlock:
		//	{BSSwitchBlock} "{" cases+=BSCase* "}";
		@Override public ParserRule getRule() { return rule; }

		//{BSSwitchBlock} "{" cases+=BSCase* "}"
		public Group getGroup() { return cGroup; }

		//{BSSwitchBlock}
		public Action getBSSwitchBlockAction_0() { return cBSSwitchBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//cases+=BSCase*
		public Assignment getCasesAssignment_2() { return cCasesAssignment_2; }

		//BSCase
		public RuleCall getCasesBSCaseParserRuleCall_2_0() { return cCasesBSCaseParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class BSCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionBSExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cBlockAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cBlockBSCaseBlockParserRuleCall_0_3_0 = (RuleCall)cBlockAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDefaultKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cBlockAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cBlockBSCaseBlockParserRuleCall_1_2_0 = (RuleCall)cBlockAssignment_1_2.eContents().get(0);
		
		//BSCase:
		//	"case" expression=BSExpression ":" block=BSCaseBlock | "default" ":" block=BSCaseBlock;
		@Override public ParserRule getRule() { return rule; }

		//"case" expression=BSExpression ":" block=BSCaseBlock | "default" ":" block=BSCaseBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//"case" expression=BSExpression ":" block=BSCaseBlock
		public Group getGroup_0() { return cGroup_0; }

		//"case"
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }

		//expression=BSExpression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }

		//BSExpression
		public RuleCall getExpressionBSExpressionParserRuleCall_0_1_0() { return cExpressionBSExpressionParserRuleCall_0_1_0; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//block=BSCaseBlock
		public Assignment getBlockAssignment_0_3() { return cBlockAssignment_0_3; }

		//BSCaseBlock
		public RuleCall getBlockBSCaseBlockParserRuleCall_0_3_0() { return cBlockBSCaseBlockParserRuleCall_0_3_0; }

		//"default" ":" block=BSCaseBlock
		public Group getGroup_1() { return cGroup_1; }

		//"default"
		public Keyword getDefaultKeyword_1_0() { return cDefaultKeyword_1_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//block=BSCaseBlock
		public Assignment getBlockAssignment_1_2() { return cBlockAssignment_1_2; }

		//BSCaseBlock
		public RuleCall getBlockBSCaseBlockParserRuleCall_1_2_0() { return cBlockBSCaseBlockParserRuleCall_1_2_0; }
	}

	public class BSCaseBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSCaseBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBSCaseBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsBSStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//BSCaseBlock:
		//	{BSCaseBlock} statements+=BSStatement*;
		@Override public ParserRule getRule() { return rule; }

		//{BSCaseBlock} statements+=BSStatement*
		public Group getGroup() { return cGroup; }

		//{BSCaseBlock}
		public Action getBSCaseBlockAction_0() { return cBSCaseBlockAction_0; }

		//statements+=BSStatement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//BSStatement
		public RuleCall getStatementsBSStatementParserRuleCall_1_0() { return cStatementsBSStatementParserRuleCall_1_0; }
	}

	public class BSBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBSMethodBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBSIfBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBSLoopBlockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBSSwitchBlockParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBSCaseBlockParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//BSBlock:
		//	BSMethodBody | BSIfBlock | BSLoopBlock | BSSwitchBlock | BSCaseBlock;
		@Override public ParserRule getRule() { return rule; }

		//BSMethodBody | BSIfBlock | BSLoopBlock | BSSwitchBlock | BSCaseBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//BSMethodBody
		public RuleCall getBSMethodBodyParserRuleCall_0() { return cBSMethodBodyParserRuleCall_0; }

		//BSIfBlock
		public RuleCall getBSIfBlockParserRuleCall_1() { return cBSIfBlockParserRuleCall_1; }

		//BSLoopBlock
		public RuleCall getBSLoopBlockParserRuleCall_2() { return cBSLoopBlockParserRuleCall_2; }

		//BSSwitchBlock
		public RuleCall getBSSwitchBlockParserRuleCall_3() { return cBSSwitchBlockParserRuleCall_3; }

		//BSCaseBlock
		public RuleCall getBSCaseBlockParserRuleCall_4() { return cBSCaseBlockParserRuleCall_4; }
	}

	public class BSSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSSymbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBSVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBSParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBSMemberParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BSSymbol:
		//	BSVariableDeclaration | BSParameter | BSMember;
		@Override public ParserRule getRule() { return rule; }

		//BSVariableDeclaration | BSParameter | BSMember
		public Alternatives getAlternatives() { return cAlternatives; }

		//BSVariableDeclaration
		public RuleCall getBSVariableDeclarationParserRuleCall_0() { return cBSVariableDeclarationParserRuleCall_0; }

		//BSParameter
		public RuleCall getBSParameterParserRuleCall_1() { return cBSParameterParserRuleCall_1; }

		//BSMember
		public RuleCall getBSMemberParserRuleCall_2() { return cBSMemberParserRuleCall_2; }
	}

	public class BSExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSExpression");
		private final RuleCall cBSAssignmentOrTernaryExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BSExpression:
		//	BSAssignmentOrTernaryExpression;
		@Override public ParserRule getRule() { return rule; }

		//BSAssignmentOrTernaryExpression
		public RuleCall getBSAssignmentOrTernaryExpressionParserRuleCall() { return cBSAssignmentOrTernaryExpressionParserRuleCall; }
	}

	public class BSAssignmentOrTernaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSAssignmentOrTernaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBSBooleanOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cBSAssignmentExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cAssignmentOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cAssignmentOperatorAlternatives_1_0_1_0 = (Alternatives)cAssignmentOperatorAssignment_1_0_1.eContents().get(0);
		private final Keyword cAssignmentOperatorEqualsSignKeyword_1_0_1_0_0 = (Keyword)cAssignmentOperatorAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cAssignmentOperatorCommercialAtEqualsSignKeyword_1_0_1_0_1 = (Keyword)cAssignmentOperatorAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cAssignmentOperatorPlusSignEqualsSignKeyword_1_0_1_0_2 = (Keyword)cAssignmentOperatorAlternatives_1_0_1_0.eContents().get(2);
		private final Keyword cAssignmentOperatorHyphenMinusEqualsSignKeyword_1_0_1_0_3 = (Keyword)cAssignmentOperatorAlternatives_1_0_1_0.eContents().get(3);
		private final Keyword cAssignmentOperatorAsteriskEqualsSignKeyword_1_0_1_0_4 = (Keyword)cAssignmentOperatorAlternatives_1_0_1_0.eContents().get(4);
		private final Keyword cAssignmentOperatorSolidusEqualsSignKeyword_1_0_1_0_5 = (Keyword)cAssignmentOperatorAlternatives_1_0_1_0.eContents().get(5);
		private final Keyword cAssignmentOperatorPercentSignEqualsSignKeyword_1_0_1_0_6 = (Keyword)cAssignmentOperatorAlternatives_1_0_1_0.eContents().get(6);
		private final Keyword cAssignmentOperatorLessThanSignLessThanSignEqualsSignKeyword_1_0_1_0_7 = (Keyword)cAssignmentOperatorAlternatives_1_0_1_0.eContents().get(7);
		private final Keyword cAssignmentOperatorGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0_1_0_8 = (Keyword)cAssignmentOperatorAlternatives_1_0_1_0.eContents().get(8);
		private final Keyword cAssignmentOperatorAmpersandEqualsSignKeyword_1_0_1_0_9 = (Keyword)cAssignmentOperatorAlternatives_1_0_1_0.eContents().get(9);
		private final Keyword cAssignmentOperatorCircumflexAccentEqualsSignKeyword_1_0_1_0_10 = (Keyword)cAssignmentOperatorAlternatives_1_0_1_0.eContents().get(10);
		private final Keyword cAssignmentOperatorVerticalLineEqualsSignKeyword_1_0_1_0_11 = (Keyword)cAssignmentOperatorAlternatives_1_0_1_0.eContents().get(11);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightBSExpressionParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cBSTernaryExpressionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cMiddleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cMiddleBSExpressionParserRuleCall_1_1_2_0 = (RuleCall)cMiddleAssignment_1_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cRightAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cRightBSExpressionParserRuleCall_1_1_4_0 = (RuleCall)cRightAssignment_1_1_4.eContents().get(0);
		
		////right-to-left assignment and ternary operators: = [op]= (?:)
		//BSAssignmentOrTernaryExpression returns BSExpression:
		//	BSBooleanOrExpression ({BSAssignmentExpression.left=current} assignmentOperator=("=" | "@=" | "+=" | "-=" | "*=" |
		//	"/=" | "%=" | "<<=" | ">>=" | "&=" | "^=" | "|=") right=BSExpression | {BSTernaryExpression.left=current} "?"
		//	middle=BSExpression ":" right=BSExpression)?;
		@Override public ParserRule getRule() { return rule; }

		//BSBooleanOrExpression ({BSAssignmentExpression.left=current} assignmentOperator=("=" | "@=" | "+=" | "-=" | "*=" | "/="
		//| "%=" | "<<=" | ">>=" | "&=" | "^=" | "|=") right=BSExpression | {BSTernaryExpression.left=current} "?"
		//middle=BSExpression ":" right=BSExpression)?
		public Group getGroup() { return cGroup; }

		//BSBooleanOrExpression
		public RuleCall getBSBooleanOrExpressionParserRuleCall_0() { return cBSBooleanOrExpressionParserRuleCall_0; }

		//({BSAssignmentExpression.left=current} assignmentOperator=("=" | "@=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>="
		//| "&=" | "^=" | "|=") right=BSExpression | {BSTernaryExpression.left=current} "?" middle=BSExpression ":"
		//right=BSExpression)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{BSAssignmentExpression.left=current} assignmentOperator=("=" | "@=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>="
		//| "&=" | "^=" | "|=") right=BSExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BSAssignmentExpression.left=current}
		public Action getBSAssignmentExpressionLeftAction_1_0_0() { return cBSAssignmentExpressionLeftAction_1_0_0; }

		//assignmentOperator=("=" | "@=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "^=" | "|=")
		public Assignment getAssignmentOperatorAssignment_1_0_1() { return cAssignmentOperatorAssignment_1_0_1; }

		//"=" | "@=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "^=" | "|="
		public Alternatives getAssignmentOperatorAlternatives_1_0_1_0() { return cAssignmentOperatorAlternatives_1_0_1_0; }

		//"="
		public Keyword getAssignmentOperatorEqualsSignKeyword_1_0_1_0_0() { return cAssignmentOperatorEqualsSignKeyword_1_0_1_0_0; }

		//"@="
		public Keyword getAssignmentOperatorCommercialAtEqualsSignKeyword_1_0_1_0_1() { return cAssignmentOperatorCommercialAtEqualsSignKeyword_1_0_1_0_1; }

		//"+="
		public Keyword getAssignmentOperatorPlusSignEqualsSignKeyword_1_0_1_0_2() { return cAssignmentOperatorPlusSignEqualsSignKeyword_1_0_1_0_2; }

		//"-="
		public Keyword getAssignmentOperatorHyphenMinusEqualsSignKeyword_1_0_1_0_3() { return cAssignmentOperatorHyphenMinusEqualsSignKeyword_1_0_1_0_3; }

		//"*="
		public Keyword getAssignmentOperatorAsteriskEqualsSignKeyword_1_0_1_0_4() { return cAssignmentOperatorAsteriskEqualsSignKeyword_1_0_1_0_4; }

		//"/="
		public Keyword getAssignmentOperatorSolidusEqualsSignKeyword_1_0_1_0_5() { return cAssignmentOperatorSolidusEqualsSignKeyword_1_0_1_0_5; }

		//"%="
		public Keyword getAssignmentOperatorPercentSignEqualsSignKeyword_1_0_1_0_6() { return cAssignmentOperatorPercentSignEqualsSignKeyword_1_0_1_0_6; }

		//"<<="
		public Keyword getAssignmentOperatorLessThanSignLessThanSignEqualsSignKeyword_1_0_1_0_7() { return cAssignmentOperatorLessThanSignLessThanSignEqualsSignKeyword_1_0_1_0_7; }

		//">>="
		public Keyword getAssignmentOperatorGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0_1_0_8() { return cAssignmentOperatorGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0_1_0_8; }

		//"&="
		public Keyword getAssignmentOperatorAmpersandEqualsSignKeyword_1_0_1_0_9() { return cAssignmentOperatorAmpersandEqualsSignKeyword_1_0_1_0_9; }

		//"^="
		public Keyword getAssignmentOperatorCircumflexAccentEqualsSignKeyword_1_0_1_0_10() { return cAssignmentOperatorCircumflexAccentEqualsSignKeyword_1_0_1_0_10; }

		//"|="
		public Keyword getAssignmentOperatorVerticalLineEqualsSignKeyword_1_0_1_0_11() { return cAssignmentOperatorVerticalLineEqualsSignKeyword_1_0_1_0_11; }

		//right=BSExpression
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//BSExpression
		public RuleCall getRightBSExpressionParserRuleCall_1_0_2_0() { return cRightBSExpressionParserRuleCall_1_0_2_0; }

		//{BSTernaryExpression.left=current} "?" middle=BSExpression ":" right=BSExpression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{BSTernaryExpression.left=current}
		public Action getBSTernaryExpressionLeftAction_1_1_0() { return cBSTernaryExpressionLeftAction_1_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1_1() { return cQuestionMarkKeyword_1_1_1; }

		//middle=BSExpression
		public Assignment getMiddleAssignment_1_1_2() { return cMiddleAssignment_1_1_2; }

		//BSExpression
		public RuleCall getMiddleBSExpressionParserRuleCall_1_1_2_0() { return cMiddleBSExpressionParserRuleCall_1_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_1_3() { return cColonKeyword_1_1_3; }

		//right=BSExpression
		public Assignment getRightAssignment_1_1_4() { return cRightAssignment_1_1_4; }

		//BSExpression
		public RuleCall getRightBSExpressionParserRuleCall_1_1_4_0() { return cRightBSExpressionParserRuleCall_1_1_4_0; }
	}

	public class BSBooleanOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSBooleanOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBSBooleanAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBSBooleanOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBSBooleanAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////right-to-left assignment operators: = [op]=
		////BSAssignmentExpression returns BSExpression:
		////	BSTernaryExpression
		////	({BSAssignmentExpression.left=current} assignmentOperator=('='|'@='|'+='|'-='|'*='|'/='|'%='|'<<='|'>>='|'&='|'^='|'|=') right=BSExpression)?
		////;
		////
		//////right-to-left ternary operator: (?:)
		////BSTernaryExpression returns BSExpression:
		////	BSBooleanOrExpression
		////	({BSTernaryExpression.left=current} '?' middle=BSExpression ':' right=BSExpression)?
		////;
		////left-to-right boolean OR operator: ||
		//BSBooleanOrExpression returns BSExpression:
		//	BSBooleanAndExpression ({BSBooleanOrExpression.left=current} "||" right=BSBooleanAndExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//BSBooleanAndExpression ({BSBooleanOrExpression.left=current} "||" right=BSBooleanAndExpression)*
		public Group getGroup() { return cGroup; }

		//BSBooleanAndExpression
		public RuleCall getBSBooleanAndExpressionParserRuleCall_0() { return cBSBooleanAndExpressionParserRuleCall_0; }

		//({BSBooleanOrExpression.left=current} "||" right=BSBooleanAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BSBooleanOrExpression.left=current}
		public Action getBSBooleanOrExpressionLeftAction_1_0() { return cBSBooleanOrExpressionLeftAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//right=BSBooleanAndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BSBooleanAndExpression
		public RuleCall getRightBSBooleanAndExpressionParserRuleCall_1_2_0() { return cRightBSBooleanAndExpressionParserRuleCall_1_2_0; }
	}

	public class BSBooleanAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSBooleanAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBSBitwiseOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBSBooleanAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBSBitwiseOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////left-to-right boolean AND operator: &&
		//BSBooleanAndExpression returns BSExpression:
		//	BSBitwiseOrExpression ({BSBooleanAndExpression.left=current} "&&" right=BSBitwiseOrExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//BSBitwiseOrExpression ({BSBooleanAndExpression.left=current} "&&" right=BSBitwiseOrExpression)*
		public Group getGroup() { return cGroup; }

		//BSBitwiseOrExpression
		public RuleCall getBSBitwiseOrExpressionParserRuleCall_0() { return cBSBitwiseOrExpressionParserRuleCall_0; }

		//({BSBooleanAndExpression.left=current} "&&" right=BSBitwiseOrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BSBooleanAndExpression.left=current}
		public Action getBSBooleanAndExpressionLeftAction_1_0() { return cBSBooleanAndExpressionLeftAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//right=BSBitwiseOrExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BSBitwiseOrExpression
		public RuleCall getRightBSBitwiseOrExpressionParserRuleCall_1_2_0() { return cRightBSBitwiseOrExpressionParserRuleCall_1_2_0; }
	}

	public class BSBitwiseOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSBitwiseOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBSBitwiseXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBSBitwiseOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBSBitwiseXorExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////left-to-right bitwise OR operator: |
		//BSBitwiseOrExpression returns BSExpression:
		//	BSBitwiseXorExpression ({BSBitwiseOrExpression.left=current} "|" right=BSBitwiseXorExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//BSBitwiseXorExpression ({BSBitwiseOrExpression.left=current} "|" right=BSBitwiseXorExpression)*
		public Group getGroup() { return cGroup; }

		//BSBitwiseXorExpression
		public RuleCall getBSBitwiseXorExpressionParserRuleCall_0() { return cBSBitwiseXorExpressionParserRuleCall_0; }

		//({BSBitwiseOrExpression.left=current} "|" right=BSBitwiseXorExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BSBitwiseOrExpression.left=current}
		public Action getBSBitwiseOrExpressionLeftAction_1_0() { return cBSBitwiseOrExpressionLeftAction_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }

		//right=BSBitwiseXorExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BSBitwiseXorExpression
		public RuleCall getRightBSBitwiseXorExpressionParserRuleCall_1_2_0() { return cRightBSBitwiseXorExpressionParserRuleCall_1_2_0; }
	}

	public class BSBitwiseXorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSBitwiseXorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBSBitwiseAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBSBitwiseXorExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBSBitwiseAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////left-to-right bitwise XOR operator: ^
		//BSBitwiseXorExpression returns BSExpression:
		//	BSBitwiseAndExpression ({BSBitwiseXorExpression.left=current} "^" right=BSBitwiseAndExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//BSBitwiseAndExpression ({BSBitwiseXorExpression.left=current} "^" right=BSBitwiseAndExpression)*
		public Group getGroup() { return cGroup; }

		//BSBitwiseAndExpression
		public RuleCall getBSBitwiseAndExpressionParserRuleCall_0() { return cBSBitwiseAndExpressionParserRuleCall_0; }

		//({BSBitwiseXorExpression.left=current} "^" right=BSBitwiseAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BSBitwiseXorExpression.left=current}
		public Action getBSBitwiseXorExpressionLeftAction_1_0() { return cBSBitwiseXorExpressionLeftAction_1_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }

		//right=BSBitwiseAndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BSBitwiseAndExpression
		public RuleCall getRightBSBitwiseAndExpressionParserRuleCall_1_2_0() { return cRightBSBitwiseAndExpressionParserRuleCall_1_2_0; }
	}

	public class BSBitwiseAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSBitwiseAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBSEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBSBitwiseAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBSEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////left-to-right bitwise AND operator: &
		//BSBitwiseAndExpression returns BSExpression:
		//	BSEqualityExpression ({BSBitwiseAndExpression.left=current} "&" right=BSEqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//BSEqualityExpression ({BSBitwiseAndExpression.left=current} "&" right=BSEqualityExpression)*
		public Group getGroup() { return cGroup; }

		//BSEqualityExpression
		public RuleCall getBSEqualityExpressionParserRuleCall_0() { return cBSEqualityExpressionParserRuleCall_0; }

		//({BSBitwiseAndExpression.left=current} "&" right=BSEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BSBitwiseAndExpression.left=current}
		public Action getBSBitwiseAndExpressionLeftAction_1_0() { return cBSBitwiseAndExpressionLeftAction_1_0; }

		//"&"
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }

		//right=BSEqualityExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BSEqualityExpression
		public RuleCall getRightBSEqualityExpressionParserRuleCall_1_2_0() { return cRightBSEqualityExpressionParserRuleCall_1_2_0; }
	}

	public class BSEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBSOrderedRelationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBSEqualityExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBSOrderedRelationExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////left-to-right equality operators: == !=
		//BSEqualityExpression returns BSExpression:
		//	BSOrderedRelationExpression ({BSEqualityExpression.left=current} operator=("==" | "!=")
		//	right=BSOrderedRelationExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//BSOrderedRelationExpression ({BSEqualityExpression.left=current} operator=("==" | "!=")
		//right=BSOrderedRelationExpression)*
		public Group getGroup() { return cGroup; }

		//BSOrderedRelationExpression
		public RuleCall getBSOrderedRelationExpressionParserRuleCall_0() { return cBSOrderedRelationExpressionParserRuleCall_0; }

		//({BSEqualityExpression.left=current} operator=("==" | "!=") right=BSOrderedRelationExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BSEqualityExpression.left=current}
		public Action getBSEqualityExpressionLeftAction_1_0() { return cBSEqualityExpressionLeftAction_1_0; }

		//operator=("==" | "!=")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"==" | "!="
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"=="
		public Keyword getOperatorEqualsSignEqualsSignKeyword_1_1_0_0() { return cOperatorEqualsSignEqualsSignKeyword_1_1_0_0; }

		//"!="
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1; }

		//right=BSOrderedRelationExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BSOrderedRelationExpression
		public RuleCall getRightBSOrderedRelationExpressionParserRuleCall_1_2_0() { return cRightBSOrderedRelationExpressionParserRuleCall_1_2_0; }
	}

	public class BSOrderedRelationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSOrderedRelationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBSBitwiseShiftExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBSOrderedRelationExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBSBitwiseShiftExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////left-to-right relational operators: < > <= >=
		//BSOrderedRelationExpression returns BSExpression:
		//	BSBitwiseShiftExpression ({BSOrderedRelationExpression.left=current} operator=("<" | ">" | "<=" | ">=")
		//	right=BSBitwiseShiftExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//BSBitwiseShiftExpression ({BSOrderedRelationExpression.left=current} operator=("<" | ">" | "<=" | ">=")
		//right=BSBitwiseShiftExpression)*
		public Group getGroup() { return cGroup; }

		//BSBitwiseShiftExpression
		public RuleCall getBSBitwiseShiftExpressionParserRuleCall_0() { return cBSBitwiseShiftExpressionParserRuleCall_0; }

		//({BSOrderedRelationExpression.left=current} operator=("<" | ">" | "<=" | ">=") right=BSBitwiseShiftExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BSOrderedRelationExpression.left=current}
		public Action getBSOrderedRelationExpressionLeftAction_1_0() { return cBSOrderedRelationExpressionLeftAction_1_0; }

		//operator=("<" | ">" | "<=" | ">=")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"<" | ">" | "<=" | ">="
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"<"
		public Keyword getOperatorLessThanSignKeyword_1_1_0_0() { return cOperatorLessThanSignKeyword_1_1_0_0; }

		//">"
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_1() { return cOperatorGreaterThanSignKeyword_1_1_0_1; }

		//"<="
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_2() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_2; }

		//">="
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3; }

		//right=BSBitwiseShiftExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BSBitwiseShiftExpression
		public RuleCall getRightBSBitwiseShiftExpressionParserRuleCall_1_2_0() { return cRightBSBitwiseShiftExpressionParserRuleCall_1_2_0; }
	}

	public class BSBitwiseShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSBitwiseShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBSPlusMinusOrStringConcatExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBSBitwiseShiftExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignLessThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBSPlusMinusOrStringConcatExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////left-to-right bit-shift operators: << >>
		//BSBitwiseShiftExpression returns BSExpression:
		//	BSPlusMinusOrStringConcatExpression ({BSBitwiseShiftExpression.left=current} operator=("<<" | ">>")
		//	right=BSPlusMinusOrStringConcatExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//BSPlusMinusOrStringConcatExpression ({BSBitwiseShiftExpression.left=current} operator=("<<" | ">>")
		//right=BSPlusMinusOrStringConcatExpression)*
		public Group getGroup() { return cGroup; }

		//BSPlusMinusOrStringConcatExpression
		public RuleCall getBSPlusMinusOrStringConcatExpressionParserRuleCall_0() { return cBSPlusMinusOrStringConcatExpressionParserRuleCall_0; }

		//({BSBitwiseShiftExpression.left=current} operator=("<<" | ">>") right=BSPlusMinusOrStringConcatExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BSBitwiseShiftExpression.left=current}
		public Action getBSBitwiseShiftExpressionLeftAction_1_0() { return cBSBitwiseShiftExpressionLeftAction_1_0; }

		//operator=("<<" | ">>")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"<<" | ">>"
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"<<"
		public Keyword getOperatorLessThanSignLessThanSignKeyword_1_1_0_0() { return cOperatorLessThanSignLessThanSignKeyword_1_1_0_0; }

		//">>"
		public Keyword getOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_1() { return cOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_1; }

		//right=BSPlusMinusOrStringConcatExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BSPlusMinusOrStringConcatExpression
		public RuleCall getRightBSPlusMinusOrStringConcatExpressionParserRuleCall_1_2_0() { return cRightBSPlusMinusOrStringConcatExpressionParserRuleCall_1_2_0; }
	}

	public class BSPlusMinusOrStringConcatExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSPlusMinusOrStringConcatExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBSMulDivOrModExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBSPlusMinusOrStringConcatExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorCommercialAtKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorSPCKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOperatorNLKeyword_1_1_0_4 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(4);
		private final Keyword cOperatorTABKeyword_1_1_0_5 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(5);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBSMulDivOrModExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////left-to-right additive operators: + - [string concat +] @ SPC NL TAB
		//BSPlusMinusOrStringConcatExpression returns BSExpression:
		//	BSMulDivOrModExpression ({BSPlusMinusOrStringConcatExpression.left=current} operator=("+" | "-" | "@" | "SPC" | "NL"
		//	| "TAB") right=BSMulDivOrModExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//BSMulDivOrModExpression ({BSPlusMinusOrStringConcatExpression.left=current} operator=("+" | "-" | "@" | "SPC" | "NL" |
		//"TAB") right=BSMulDivOrModExpression)*
		public Group getGroup() { return cGroup; }

		//BSMulDivOrModExpression
		public RuleCall getBSMulDivOrModExpressionParserRuleCall_0() { return cBSMulDivOrModExpressionParserRuleCall_0; }

		//({BSPlusMinusOrStringConcatExpression.left=current} operator=("+" | "-" | "@" | "SPC" | "NL" | "TAB")
		//right=BSMulDivOrModExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BSPlusMinusOrStringConcatExpression.left=current}
		public Action getBSPlusMinusOrStringConcatExpressionLeftAction_1_0() { return cBSPlusMinusOrStringConcatExpressionLeftAction_1_0; }

		//operator=("+" | "-" | "@" | "SPC" | "NL" | "TAB")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"+" | "-" | "@" | "SPC" | "NL" | "TAB"
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"+"
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }

		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }

		//"@"
		public Keyword getOperatorCommercialAtKeyword_1_1_0_2() { return cOperatorCommercialAtKeyword_1_1_0_2; }

		//"SPC"
		public Keyword getOperatorSPCKeyword_1_1_0_3() { return cOperatorSPCKeyword_1_1_0_3; }

		//"NL"
		public Keyword getOperatorNLKeyword_1_1_0_4() { return cOperatorNLKeyword_1_1_0_4; }

		//"TAB"
		public Keyword getOperatorTABKeyword_1_1_0_5() { return cOperatorTABKeyword_1_1_0_5; }

		//right=BSMulDivOrModExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BSMulDivOrModExpression
		public RuleCall getRightBSMulDivOrModExpressionParserRuleCall_1_2_0() { return cRightBSMulDivOrModExpressionParserRuleCall_1_2_0; }
	}

	public class BSMulDivOrModExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSMulDivOrModExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBSCastOrNewExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBSMulDivOrModExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorPercentSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBSCastOrNewExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////left-to-right multiplication operators: * / %
		//BSMulDivOrModExpression returns BSExpression:
		//	BSCastOrNewExpression ({BSMulDivOrModExpression.left=current} operator=("*" | "/" | "%")
		//	right=BSCastOrNewExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//BSCastOrNewExpression ({BSMulDivOrModExpression.left=current} operator=("*" | "/" | "%") right=BSCastOrNewExpression)*
		public Group getGroup() { return cGroup; }

		//BSCastOrNewExpression
		public RuleCall getBSCastOrNewExpressionParserRuleCall_0() { return cBSCastOrNewExpressionParserRuleCall_0; }

		//({BSMulDivOrModExpression.left=current} operator=("*" | "/" | "%") right=BSCastOrNewExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BSMulDivOrModExpression.left=current}
		public Action getBSMulDivOrModExpressionLeftAction_1_0() { return cBSMulDivOrModExpressionLeftAction_1_0; }

		//operator=("*" | "/" | "%")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"*" | "/" | "%"
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"*"
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }

		//"%"
		public Keyword getOperatorPercentSignKeyword_1_1_0_2() { return cOperatorPercentSignKeyword_1_1_0_2; }

		//right=BSCastOrNewExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BSCastOrNewExpression
		public RuleCall getRightBSCastOrNewExpressionParserRuleCall_1_2_0() { return cRightBSCastOrNewExpressionParserRuleCall_1_2_0; }
	}

	public class BSCastOrNewExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSCastOrNewExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBSUnaryModifierExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBSCastExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPTypeBSPrimitiveTypeEnumRuleCall_1_2_0 = (RuleCall)cPTypeAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cIsArrayAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final Keyword cIsArrayLeftSquareBracketKeyword_1_3_0_0 = (Keyword)cIsArrayAssignment_1_3_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cCastExprAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cCastExprBSCastOrNewExpressionParserRuleCall_1_5_0 = (RuleCall)cCastExprAssignment_1_5.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBSNewExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cNewKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRTypeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cRTypeBSClassCrossReference_2_2_0 = (CrossReference)cRTypeAssignment_2_2.eContents().get(0);
		private final RuleCall cRTypeBSClassQualifiedNameParserRuleCall_2_2_0_1 = (RuleCall)cRTypeBSClassCrossReference_2_2_0.eContents().get(1);
		private final Alternatives cAlternatives_2_3 = (Alternatives)cGroup_2.eContents().get(3);
		private final Group cGroup_2_3_0 = (Group)cAlternatives_2_3.eContents().get(0);
		private final Assignment cIsArrayAssignment_2_3_0_0 = (Assignment)cGroup_2_3_0.eContents().get(0);
		private final Keyword cIsArrayLeftSquareBracketKeyword_2_3_0_0_0 = (Keyword)cIsArrayAssignment_2_3_0_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3_0_1 = (Keyword)cGroup_2_3_0.eContents().get(1);
		private final Group cGroup_2_3_1 = (Group)cAlternatives_2_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_3_1_0 = (Keyword)cGroup_2_3_1.eContents().get(0);
		private final Group cGroup_2_3_1_1 = (Group)cGroup_2_3_1.eContents().get(1);
		private final Assignment cArgsAssignment_2_3_1_1_0 = (Assignment)cGroup_2_3_1_1.eContents().get(0);
		private final RuleCall cArgsBSExpressionParserRuleCall_2_3_1_1_0_0 = (RuleCall)cArgsAssignment_2_3_1_1_0.eContents().get(0);
		private final Group cGroup_2_3_1_1_1 = (Group)cGroup_2_3_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_3_1_1_1_0 = (Keyword)cGroup_2_3_1_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_3_1_1_1_1 = (Assignment)cGroup_2_3_1_1_1.eContents().get(1);
		private final RuleCall cArgsBSExpressionParserRuleCall_2_3_1_1_1_1_0 = (RuleCall)cArgsAssignment_2_3_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3_1_2 = (Keyword)cGroup_2_3_1.eContents().get(2);
		
		////right-to-left prefix unary operators: ([cast]) new
		//BSCastOrNewExpression returns BSExpression:
		//	BSUnaryModifierExpression | {BSCastExpression} "(" pType=BSPrimitiveType (isArray?="[" "]")? ")"
		//	castExpr=BSCastOrNewExpression | {BSNewExpression} "new" rType=[BSClass|QualifiedName] ((isArray?="[" "]")? | "("
		//	(args+=BSExpression ("," args+=BSExpression)*)? ")");
		@Override public ParserRule getRule() { return rule; }

		//BSUnaryModifierExpression | {BSCastExpression} "(" pType=BSPrimitiveType (isArray?="[" "]")? ")"
		//castExpr=BSCastOrNewExpression | {BSNewExpression} "new" rType=[BSClass|QualifiedName] ((isArray?="[" "]")? | "("
		//(args+=BSExpression ("," args+=BSExpression)*)? ")")
		public Alternatives getAlternatives() { return cAlternatives; }

		//BSUnaryModifierExpression
		public RuleCall getBSUnaryModifierExpressionParserRuleCall_0() { return cBSUnaryModifierExpressionParserRuleCall_0; }

		//{BSCastExpression} "(" pType=BSPrimitiveType (isArray?="[" "]")? ")" castExpr=BSCastOrNewExpression
		public Group getGroup_1() { return cGroup_1; }

		//{BSCastExpression}
		public Action getBSCastExpressionAction_1_0() { return cBSCastExpressionAction_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//pType=BSPrimitiveType
		public Assignment getPTypeAssignment_1_2() { return cPTypeAssignment_1_2; }

		//BSPrimitiveType
		public RuleCall getPTypeBSPrimitiveTypeEnumRuleCall_1_2_0() { return cPTypeBSPrimitiveTypeEnumRuleCall_1_2_0; }

		//(isArray?="[" "]")?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//isArray?="["
		public Assignment getIsArrayAssignment_1_3_0() { return cIsArrayAssignment_1_3_0; }

		//"["
		public Keyword getIsArrayLeftSquareBracketKeyword_1_3_0_0() { return cIsArrayLeftSquareBracketKeyword_1_3_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3_1() { return cRightSquareBracketKeyword_1_3_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//castExpr=BSCastOrNewExpression
		public Assignment getCastExprAssignment_1_5() { return cCastExprAssignment_1_5; }

		//BSCastOrNewExpression
		public RuleCall getCastExprBSCastOrNewExpressionParserRuleCall_1_5_0() { return cCastExprBSCastOrNewExpressionParserRuleCall_1_5_0; }

		//{BSNewExpression} "new" rType=[BSClass|QualifiedName] ((isArray?="[" "]")? | "(" (args+=BSExpression (","
		//args+=BSExpression)*)? ")")
		public Group getGroup_2() { return cGroup_2; }

		//{BSNewExpression}
		public Action getBSNewExpressionAction_2_0() { return cBSNewExpressionAction_2_0; }

		//"new"
		public Keyword getNewKeyword_2_1() { return cNewKeyword_2_1; }

		//rType=[BSClass|QualifiedName]
		public Assignment getRTypeAssignment_2_2() { return cRTypeAssignment_2_2; }

		//[BSClass|QualifiedName]
		public CrossReference getRTypeBSClassCrossReference_2_2_0() { return cRTypeBSClassCrossReference_2_2_0; }

		//QualifiedName
		public RuleCall getRTypeBSClassQualifiedNameParserRuleCall_2_2_0_1() { return cRTypeBSClassQualifiedNameParserRuleCall_2_2_0_1; }

		//(isArray?="[" "]")? | "(" (args+=BSExpression ("," args+=BSExpression)*)? ")"
		public Alternatives getAlternatives_2_3() { return cAlternatives_2_3; }

		//(isArray?="[" "]")?
		public Group getGroup_2_3_0() { return cGroup_2_3_0; }

		//isArray?="["
		public Assignment getIsArrayAssignment_2_3_0_0() { return cIsArrayAssignment_2_3_0_0; }

		//"["
		public Keyword getIsArrayLeftSquareBracketKeyword_2_3_0_0_0() { return cIsArrayLeftSquareBracketKeyword_2_3_0_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_3_0_1() { return cRightSquareBracketKeyword_2_3_0_1; }

		//"(" (args+=BSExpression ("," args+=BSExpression)*)? ")"
		public Group getGroup_2_3_1() { return cGroup_2_3_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_3_1_0() { return cLeftParenthesisKeyword_2_3_1_0; }

		//(args+=BSExpression ("," args+=BSExpression)*)?
		public Group getGroup_2_3_1_1() { return cGroup_2_3_1_1; }

		//args+=BSExpression
		public Assignment getArgsAssignment_2_3_1_1_0() { return cArgsAssignment_2_3_1_1_0; }

		//BSExpression
		public RuleCall getArgsBSExpressionParserRuleCall_2_3_1_1_0_0() { return cArgsBSExpressionParserRuleCall_2_3_1_1_0_0; }

		//("," args+=BSExpression)*
		public Group getGroup_2_3_1_1_1() { return cGroup_2_3_1_1_1; }

		//","
		public Keyword getCommaKeyword_2_3_1_1_1_0() { return cCommaKeyword_2_3_1_1_1_0; }

		//args+=BSExpression
		public Assignment getArgsAssignment_2_3_1_1_1_1() { return cArgsAssignment_2_3_1_1_1_1; }

		//BSExpression
		public RuleCall getArgsBSExpressionParserRuleCall_2_3_1_1_1_1_0() { return cArgsBSExpressionParserRuleCall_2_3_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3_1_2() { return cRightParenthesisKeyword_2_3_1_2; }
	}

	public class BSUnaryModifierExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSUnaryModifierExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBSInvokationExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBSUnaryModifierExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorExclamationMarkKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorTildeKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Assignment cReceiverAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cReceiverBSUnaryModifierExpressionParserRuleCall_1_2_0 = (RuleCall)cReceiverAssignment_1_2.eContents().get(0);
		
		////right-to-left prefix unary operators: + - ! ~
		//BSUnaryModifierExpression returns BSExpression:
		//	BSInvokationExpression | {BSUnaryModifierExpression} operator=("+" | "-" | "!" | "~")
		//	receiver=BSUnaryModifierExpression;
		@Override public ParserRule getRule() { return rule; }

		//BSInvokationExpression | {BSUnaryModifierExpression} operator=("+" | "-" | "!" | "~") receiver=BSUnaryModifierExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//BSInvokationExpression
		public RuleCall getBSInvokationExpressionParserRuleCall_0() { return cBSInvokationExpressionParserRuleCall_0; }

		//{BSUnaryModifierExpression} operator=("+" | "-" | "!" | "~") receiver=BSUnaryModifierExpression
		public Group getGroup_1() { return cGroup_1; }

		//{BSUnaryModifierExpression}
		public Action getBSUnaryModifierExpressionAction_1_0() { return cBSUnaryModifierExpressionAction_1_0; }

		//operator=("+" | "-" | "!" | "~")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"+" | "-" | "!" | "~"
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"+"
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }

		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }

		//"!"
		public Keyword getOperatorExclamationMarkKeyword_1_1_0_2() { return cOperatorExclamationMarkKeyword_1_1_0_2; }

		//"~"
		public Keyword getOperatorTildeKeyword_1_1_0_3() { return cOperatorTildeKeyword_1_1_0_3; }

		//receiver=BSUnaryModifierExpression
		public Assignment getReceiverAssignment_1_2() { return cReceiverAssignment_1_2; }

		//BSUnaryModifierExpression
		public RuleCall getReceiverBSUnaryModifierExpressionParserRuleCall_1_2_0() { return cReceiverBSUnaryModifierExpressionParserRuleCall_1_2_0; }
	}

	public class BSInvokationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSInvokationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBSTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cBSMemberSelectionExpressionReceiverAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cMemberAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cMemberBSTerminalExpressionParserRuleCall_1_0_2_0 = (RuleCall)cMemberAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cBSMethodInvokationExpressionReceiverAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Assignment cArgsAssignment_1_1_2_0 = (Assignment)cGroup_1_1_2.eContents().get(0);
		private final RuleCall cArgsBSExpressionParserRuleCall_1_1_2_0_0 = (RuleCall)cArgsAssignment_1_1_2_0.eContents().get(0);
		private final Group cGroup_1_1_2_1 = (Group)cGroup_1_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_2_1_0 = (Keyword)cGroup_1_1_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1_2_1_1 = (Assignment)cGroup_1_1_2_1.eContents().get(1);
		private final RuleCall cArgsBSExpressionParserRuleCall_1_1_2_1_1_0 = (RuleCall)cArgsAssignment_1_1_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cBSArrayAccessExpressionReceiverAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Assignment cArgsAssignment_1_2_2_0 = (Assignment)cGroup_1_2_2.eContents().get(0);
		private final RuleCall cArgsBSExpressionParserRuleCall_1_2_2_0_0 = (RuleCall)cArgsAssignment_1_2_2_0.eContents().get(0);
		private final Group cGroup_1_2_2_1 = (Group)cGroup_1_2_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_2_1_0 = (Keyword)cGroup_1_2_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_2_2_1_1 = (Assignment)cGroup_1_2_2_1.eContents().get(1);
		private final RuleCall cArgsBSExpressionParserRuleCall_1_2_2_1_1_0 = (RuleCall)cArgsAssignment_1_2_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cBSPostfixArithmeticExpressionReceiverAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Assignment cOperatorAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_3_1_0 = (Alternatives)cOperatorAssignment_1_3_1.eContents().get(0);
		private final Keyword cOperatorPlusSignPlusSignKeyword_1_3_1_0_0 = (Keyword)cOperatorAlternatives_1_3_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusHyphenMinusKeyword_1_3_1_0_1 = (Keyword)cOperatorAlternatives_1_3_1_0.eContents().get(1);
		
		////left-to-right unary postfixes: . (...) [...] ++ --
		//BSInvokationExpression returns BSExpression:
		//	BSTerminalExpression ({BSMemberSelectionExpression.receiver=current} "." member=BSTerminalExpression |
		//	{BSMethodInvokationExpression.receiver=current} "(" (args+=BSExpression ("," args+=BSExpression)*)? ")" |
		//	{BSArrayAccessExpression.receiver=current} "[" (args+=BSExpression ("," args+=BSExpression)*)? "]" |
		//	{BSPostfixArithmeticExpression.receiver=current} operator=("++" | "--"))*;
		@Override public ParserRule getRule() { return rule; }

		//BSTerminalExpression ({BSMemberSelectionExpression.receiver=current} "." member=BSTerminalExpression |
		//{BSMethodInvokationExpression.receiver=current} "(" (args+=BSExpression ("," args+=BSExpression)*)? ")" |
		//{BSArrayAccessExpression.receiver=current} "[" (args+=BSExpression ("," args+=BSExpression)*)? "]" |
		//{BSPostfixArithmeticExpression.receiver=current} operator=("++" | "--"))*
		public Group getGroup() { return cGroup; }

		//BSTerminalExpression
		public RuleCall getBSTerminalExpressionParserRuleCall_0() { return cBSTerminalExpressionParserRuleCall_0; }

		//({BSMemberSelectionExpression.receiver=current} "." member=BSTerminalExpression |
		//{BSMethodInvokationExpression.receiver=current} "(" (args+=BSExpression ("," args+=BSExpression)*)? ")" |
		//{BSArrayAccessExpression.receiver=current} "[" (args+=BSExpression ("," args+=BSExpression)*)? "]" |
		//{BSPostfixArithmeticExpression.receiver=current} operator=("++" | "--"))*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{BSMemberSelectionExpression.receiver=current} "." member=BSTerminalExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BSMemberSelectionExpression.receiver=current}
		public Action getBSMemberSelectionExpressionReceiverAction_1_0_0() { return cBSMemberSelectionExpressionReceiverAction_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//member=BSTerminalExpression
		public Assignment getMemberAssignment_1_0_2() { return cMemberAssignment_1_0_2; }

		//BSTerminalExpression
		public RuleCall getMemberBSTerminalExpressionParserRuleCall_1_0_2_0() { return cMemberBSTerminalExpressionParserRuleCall_1_0_2_0; }

		//{BSMethodInvokationExpression.receiver=current} "(" (args+=BSExpression ("," args+=BSExpression)*)? ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{BSMethodInvokationExpression.receiver=current}
		public Action getBSMethodInvokationExpressionReceiverAction_1_1_0() { return cBSMethodInvokationExpressionReceiverAction_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_1() { return cLeftParenthesisKeyword_1_1_1; }

		//(args+=BSExpression ("," args+=BSExpression)*)?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//args+=BSExpression
		public Assignment getArgsAssignment_1_1_2_0() { return cArgsAssignment_1_1_2_0; }

		//BSExpression
		public RuleCall getArgsBSExpressionParserRuleCall_1_1_2_0_0() { return cArgsBSExpressionParserRuleCall_1_1_2_0_0; }

		//("," args+=BSExpression)*
		public Group getGroup_1_1_2_1() { return cGroup_1_1_2_1; }

		//","
		public Keyword getCommaKeyword_1_1_2_1_0() { return cCommaKeyword_1_1_2_1_0; }

		//args+=BSExpression
		public Assignment getArgsAssignment_1_1_2_1_1() { return cArgsAssignment_1_1_2_1_1; }

		//BSExpression
		public RuleCall getArgsBSExpressionParserRuleCall_1_1_2_1_1_0() { return cArgsBSExpressionParserRuleCall_1_1_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_3() { return cRightParenthesisKeyword_1_1_3; }

		//{BSArrayAccessExpression.receiver=current} "[" (args+=BSExpression ("," args+=BSExpression)*)? "]"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//{BSArrayAccessExpression.receiver=current}
		public Action getBSArrayAccessExpressionReceiverAction_1_2_0() { return cBSArrayAccessExpressionReceiverAction_1_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_1() { return cLeftSquareBracketKeyword_1_2_1; }

		//(args+=BSExpression ("," args+=BSExpression)*)?
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }

		//args+=BSExpression
		public Assignment getArgsAssignment_1_2_2_0() { return cArgsAssignment_1_2_2_0; }

		//BSExpression
		public RuleCall getArgsBSExpressionParserRuleCall_1_2_2_0_0() { return cArgsBSExpressionParserRuleCall_1_2_2_0_0; }

		//("," args+=BSExpression)*
		public Group getGroup_1_2_2_1() { return cGroup_1_2_2_1; }

		//","
		public Keyword getCommaKeyword_1_2_2_1_0() { return cCommaKeyword_1_2_2_1_0; }

		//args+=BSExpression
		public Assignment getArgsAssignment_1_2_2_1_1() { return cArgsAssignment_1_2_2_1_1; }

		//BSExpression
		public RuleCall getArgsBSExpressionParserRuleCall_1_2_2_1_1_0() { return cArgsBSExpressionParserRuleCall_1_2_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_3() { return cRightSquareBracketKeyword_1_2_3; }

		//{BSPostfixArithmeticExpression.receiver=current} operator=("++" | "--")
		public Group getGroup_1_3() { return cGroup_1_3; }

		//{BSPostfixArithmeticExpression.receiver=current}
		public Action getBSPostfixArithmeticExpressionReceiverAction_1_3_0() { return cBSPostfixArithmeticExpressionReceiverAction_1_3_0; }

		//operator=("++" | "--")
		public Assignment getOperatorAssignment_1_3_1() { return cOperatorAssignment_1_3_1; }

		//"++" | "--"
		public Alternatives getOperatorAlternatives_1_3_1_0() { return cOperatorAlternatives_1_3_1_0; }

		//"++"
		public Keyword getOperatorPlusSignPlusSignKeyword_1_3_1_0_0() { return cOperatorPlusSignPlusSignKeyword_1_3_1_0_0; }

		//"--"
		public Keyword getOperatorHyphenMinusHyphenMinusKeyword_1_3_1_0_1() { return cOperatorHyphenMinusHyphenMinusKeyword_1_3_1_0_1; }
	}

	public class BSTerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSTerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBSStringConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBSHexadecimalConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueHEX_VALUETerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBSNumberConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cFullStopKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Action cBSRealConstantLeftAction_2_2_1 = (Action)cGroup_2_2.eContents().get(1);
		private final Assignment cRightAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cRightINTTerminalRuleCall_2_2_2_0 = (RuleCall)cRightAssignment_2_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBSBooleanConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueAlternatives_3_1_0 = (Alternatives)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_3_1_0_0 = (Keyword)cValueAlternatives_3_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_3_1_0_1 = (Keyword)cValueAlternatives_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBSNullLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cNullKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cBSThisLiteralAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cThisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cBSClientLiteralAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cClientKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cBSParentLiteralAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cParentKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cBSSymbolRefAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cSymbolAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cSymbolBSSymbolCrossReference_8_1_0 = (CrossReference)cSymbolAssignment_8_1.eContents().get(0);
		private final RuleCall cSymbolBSSymbolIDTerminalRuleCall_8_1_0_1 = (RuleCall)cSymbolBSSymbolCrossReference_8_1_0.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cBSParentheticalExpressionAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cExpressionAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cExpressionBSExpressionParserRuleCall_9_2_0 = (RuleCall)cExpressionAssignment_9_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		
		////Maximum-precedence literals and keywords
		//BSTerminalExpression returns BSExpression:
		//	{BSStringConstant} value=STRING | {BSHexadecimalConstant} value=HEX_VALUE | {BSNumberConstant} value=INT ("."
		//	{BSRealConstant.left=current} right=INT)? | {BSBooleanConstant} value=("true" | "false") | {BSNullLiteral} "null" |
		//	{BSThisLiteral} "this" | {BSClientLiteral} "client" | {BSParentLiteral} "parent" | {BSSymbolRef} symbol=[BSSymbol] |
		//	{BSParentheticalExpression} "(" expression=BSExpression ")";
		@Override public ParserRule getRule() { return rule; }

		//{BSStringConstant} value=STRING | {BSHexadecimalConstant} value=HEX_VALUE | {BSNumberConstant} value=INT ("."
		//{BSRealConstant.left=current} right=INT)? | {BSBooleanConstant} value=("true" | "false") | {BSNullLiteral} "null" |
		//{BSThisLiteral} "this" | {BSClientLiteral} "client" | {BSParentLiteral} "parent" | {BSSymbolRef} symbol=[BSSymbol] |
		//{BSParentheticalExpression} "(" expression=BSExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BSStringConstant} value=STRING
		public Group getGroup_0() { return cGroup_0; }

		//{BSStringConstant}
		public Action getBSStringConstantAction_0_0() { return cBSStringConstantAction_0_0; }

		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }

		//{BSHexadecimalConstant} value=HEX_VALUE
		public Group getGroup_1() { return cGroup_1; }

		//{BSHexadecimalConstant}
		public Action getBSHexadecimalConstantAction_1_0() { return cBSHexadecimalConstantAction_1_0; }

		//value=HEX_VALUE
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//HEX_VALUE
		public RuleCall getValueHEX_VALUETerminalRuleCall_1_1_0() { return cValueHEX_VALUETerminalRuleCall_1_1_0; }

		//{BSNumberConstant} value=INT ("." {BSRealConstant.left=current} right=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//{BSNumberConstant}
		public Action getBSNumberConstantAction_2_0() { return cBSNumberConstantAction_2_0; }

		//value=INT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_1_0() { return cValueINTTerminalRuleCall_2_1_0; }

		//(=> "." {BSRealConstant.left=current} right=INT)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//=> "."
		public Keyword getFullStopKeyword_2_2_0() { return cFullStopKeyword_2_2_0; }

		//{BSRealConstant.left=current}
		public Action getBSRealConstantLeftAction_2_2_1() { return cBSRealConstantLeftAction_2_2_1; }

		//right=INT
		public Assignment getRightAssignment_2_2_2() { return cRightAssignment_2_2_2; }

		//INT
		public RuleCall getRightINTTerminalRuleCall_2_2_2_0() { return cRightINTTerminalRuleCall_2_2_2_0; }

		//{BSBooleanConstant} value=("true" | "false")
		public Group getGroup_3() { return cGroup_3; }

		//{BSBooleanConstant}
		public Action getBSBooleanConstantAction_3_0() { return cBSBooleanConstantAction_3_0; }

		//value=("true" | "false")
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//"true" | "false"
		public Alternatives getValueAlternatives_3_1_0() { return cValueAlternatives_3_1_0; }

		//"true"
		public Keyword getValueTrueKeyword_3_1_0_0() { return cValueTrueKeyword_3_1_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_3_1_0_1() { return cValueFalseKeyword_3_1_0_1; }

		//{BSNullLiteral} "null"
		public Group getGroup_4() { return cGroup_4; }

		//{BSNullLiteral}
		public Action getBSNullLiteralAction_4_0() { return cBSNullLiteralAction_4_0; }

		//"null"
		public Keyword getNullKeyword_4_1() { return cNullKeyword_4_1; }

		//{BSThisLiteral} "this"
		public Group getGroup_5() { return cGroup_5; }

		//{BSThisLiteral}
		public Action getBSThisLiteralAction_5_0() { return cBSThisLiteralAction_5_0; }

		//"this"
		public Keyword getThisKeyword_5_1() { return cThisKeyword_5_1; }

		//{BSClientLiteral} "client"
		public Group getGroup_6() { return cGroup_6; }

		//{BSClientLiteral}
		public Action getBSClientLiteralAction_6_0() { return cBSClientLiteralAction_6_0; }

		//"client"
		public Keyword getClientKeyword_6_1() { return cClientKeyword_6_1; }

		//{BSParentLiteral} "parent"
		public Group getGroup_7() { return cGroup_7; }

		//{BSParentLiteral}
		public Action getBSParentLiteralAction_7_0() { return cBSParentLiteralAction_7_0; }

		//"parent"
		public Keyword getParentKeyword_7_1() { return cParentKeyword_7_1; }

		//{BSSymbolRef} symbol=[BSSymbol]
		public Group getGroup_8() { return cGroup_8; }

		//{BSSymbolRef}
		public Action getBSSymbolRefAction_8_0() { return cBSSymbolRefAction_8_0; }

		//symbol=[BSSymbol]
		public Assignment getSymbolAssignment_8_1() { return cSymbolAssignment_8_1; }

		//[BSSymbol]
		public CrossReference getSymbolBSSymbolCrossReference_8_1_0() { return cSymbolBSSymbolCrossReference_8_1_0; }

		//ID
		public RuleCall getSymbolBSSymbolIDTerminalRuleCall_8_1_0_1() { return cSymbolBSSymbolIDTerminalRuleCall_8_1_0_1; }

		//{BSParentheticalExpression} "(" expression=BSExpression ")"
		public Group getGroup_9() { return cGroup_9; }

		//{BSParentheticalExpression}
		public Action getBSParentheticalExpressionAction_9_0() { return cBSParentheticalExpressionAction_9_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }

		//expression=BSExpression
		public Assignment getExpressionAssignment_9_2() { return cExpressionAssignment_9_2; }

		//BSExpression
		public RuleCall getExpressionBSExpressionParserRuleCall_9_2_0() { return cExpressionBSExpressionParserRuleCall_9_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_3() { return cRightParenthesisKeyword_9_3; }
	}
	
	
	public class BSPrimitiveTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BSPrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENONEKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTRINGStringKeyword_1_0 = (Keyword)cSTRINGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTAGGED_STRINGEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTAGGED_STRINGTaggedStringKeyword_2_0 = (Keyword)cTAGGED_STRINGEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNUMBEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNUMBERNumberKeyword_3_0 = (Keyword)cNUMBEREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cOBJECTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cOBJECTObjectKeyword_4_0 = (Keyword)cOBJECTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cVOIDEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cVOIDVoidKeyword_5_0 = (Keyword)cVOIDEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum BSPrimitiveType:
		//	NONE | STRING="string" | TAGGED_STRING="taggedString" | NUMBER="number" | OBJECT="object" | VOID="void";
		public EnumRule getRule() { return rule; }

		//NONE | STRING="string" | TAGGED_STRING="taggedString" | NUMBER="number" | OBJECT="object" | VOID="void"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NONE
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }

		//"NONE"
		public Keyword getNONENONEKeyword_0_0() { return cNONENONEKeyword_0_0; }

		//STRING="string"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_1() { return cSTRINGEnumLiteralDeclaration_1; }

		//"string"
		public Keyword getSTRINGStringKeyword_1_0() { return cSTRINGStringKeyword_1_0; }

		//TAGGED_STRING="taggedString"
		public EnumLiteralDeclaration getTAGGED_STRINGEnumLiteralDeclaration_2() { return cTAGGED_STRINGEnumLiteralDeclaration_2; }

		//"taggedString"
		public Keyword getTAGGED_STRINGTaggedStringKeyword_2_0() { return cTAGGED_STRINGTaggedStringKeyword_2_0; }

		//NUMBER="number"
		public EnumLiteralDeclaration getNUMBEREnumLiteralDeclaration_3() { return cNUMBEREnumLiteralDeclaration_3; }

		//"number"
		public Keyword getNUMBERNumberKeyword_3_0() { return cNUMBERNumberKeyword_3_0; }

		//OBJECT="object"
		public EnumLiteralDeclaration getOBJECTEnumLiteralDeclaration_4() { return cOBJECTEnumLiteralDeclaration_4; }

		//"object"
		public Keyword getOBJECTObjectKeyword_4_0() { return cOBJECTObjectKeyword_4_0; }

		//VOID="void"
		public EnumLiteralDeclaration getVOIDEnumLiteralDeclaration_5() { return cVOIDEnumLiteralDeclaration_5; }

		//"void"
		public Keyword getVOIDVoidKeyword_5_0() { return cVOIDVoidKeyword_5_0; }
	}
	
	private final BSFileElements pBSFile;
	private final BSImportElements pBSImport;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	private final BSClassElements pBSClass;
	private final BSMemberElements pBSMember;
	private final BSFieldElements pBSField;
	private final BSMethodElements pBSMethod;
	private final BSParameterElements pBSParameter;
	private final BSMethodBodyElements pBSMethodBody;
	private final BSStatementElements pBSStatement;
	private final BSReturnElements pBSReturn;
	private final BSBreakElements pBSBreak;
	private final BSContinueElements pBSContinue;
	private final BSVariableDeclarationElements pBSVariableDeclaration;
	private final BSIfStatementElements pBSIfStatement;
	private final BSWhileLoopElements pBSWhileLoop;
	private final BSForLoopElements pBSForLoop;
	private final BSSwitchStatementElements pBSSwitchStatement;
	private final BSIfBlockElements pBSIfBlock;
	private final BSLoopBlockElements pBSLoopBlock;
	private final BSSwitchBlockElements pBSSwitchBlock;
	private final BSCaseElements pBSCase;
	private final BSCaseBlockElements pBSCaseBlock;
	private final BSBlockElements pBSBlock;
	private final BSSymbolElements pBSSymbol;
	private final BSExpressionElements pBSExpression;
	private final BSAssignmentOrTernaryExpressionElements pBSAssignmentOrTernaryExpression;
	private final BSBooleanOrExpressionElements pBSBooleanOrExpression;
	private final BSBooleanAndExpressionElements pBSBooleanAndExpression;
	private final BSBitwiseOrExpressionElements pBSBitwiseOrExpression;
	private final BSBitwiseXorExpressionElements pBSBitwiseXorExpression;
	private final BSBitwiseAndExpressionElements pBSBitwiseAndExpression;
	private final BSEqualityExpressionElements pBSEqualityExpression;
	private final BSOrderedRelationExpressionElements pBSOrderedRelationExpression;
	private final BSBitwiseShiftExpressionElements pBSBitwiseShiftExpression;
	private final BSPlusMinusOrStringConcatExpressionElements pBSPlusMinusOrStringConcatExpression;
	private final BSMulDivOrModExpressionElements pBSMulDivOrModExpression;
	private final BSCastOrNewExpressionElements pBSCastOrNewExpression;
	private final BSUnaryModifierExpressionElements pBSUnaryModifierExpression;
	private final BSInvokationExpressionElements pBSInvokationExpression;
	private final BSTerminalExpressionElements pBSTerminalExpression;
	private final BSPrimitiveTypeElements unknownRuleBSPrimitiveType;
	private final TerminalRule tHEX_VALUE;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tESCAPE_CODE;
	private final TerminalRule tSTRING;
	private final TerminalRule tTAGGED_STRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public BlorqueScriptGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pBSFile = new BSFileElements();
		this.pBSImport = new BSImportElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pBSClass = new BSClassElements();
		this.pBSMember = new BSMemberElements();
		this.pBSField = new BSFieldElements();
		this.pBSMethod = new BSMethodElements();
		this.pBSParameter = new BSParameterElements();
		this.pBSMethodBody = new BSMethodBodyElements();
		this.pBSStatement = new BSStatementElements();
		this.pBSReturn = new BSReturnElements();
		this.pBSBreak = new BSBreakElements();
		this.pBSContinue = new BSContinueElements();
		this.pBSVariableDeclaration = new BSVariableDeclarationElements();
		this.pBSIfStatement = new BSIfStatementElements();
		this.pBSWhileLoop = new BSWhileLoopElements();
		this.pBSForLoop = new BSForLoopElements();
		this.pBSSwitchStatement = new BSSwitchStatementElements();
		this.pBSIfBlock = new BSIfBlockElements();
		this.pBSLoopBlock = new BSLoopBlockElements();
		this.pBSSwitchBlock = new BSSwitchBlockElements();
		this.pBSCase = new BSCaseElements();
		this.pBSCaseBlock = new BSCaseBlockElements();
		this.pBSBlock = new BSBlockElements();
		this.pBSSymbol = new BSSymbolElements();
		this.pBSExpression = new BSExpressionElements();
		this.pBSAssignmentOrTernaryExpression = new BSAssignmentOrTernaryExpressionElements();
		this.pBSBooleanOrExpression = new BSBooleanOrExpressionElements();
		this.pBSBooleanAndExpression = new BSBooleanAndExpressionElements();
		this.pBSBitwiseOrExpression = new BSBitwiseOrExpressionElements();
		this.pBSBitwiseXorExpression = new BSBitwiseXorExpressionElements();
		this.pBSBitwiseAndExpression = new BSBitwiseAndExpressionElements();
		this.pBSEqualityExpression = new BSEqualityExpressionElements();
		this.pBSOrderedRelationExpression = new BSOrderedRelationExpressionElements();
		this.pBSBitwiseShiftExpression = new BSBitwiseShiftExpressionElements();
		this.pBSPlusMinusOrStringConcatExpression = new BSPlusMinusOrStringConcatExpressionElements();
		this.pBSMulDivOrModExpression = new BSMulDivOrModExpressionElements();
		this.pBSCastOrNewExpression = new BSCastOrNewExpressionElements();
		this.pBSUnaryModifierExpression = new BSUnaryModifierExpressionElements();
		this.pBSInvokationExpression = new BSInvokationExpressionElements();
		this.pBSTerminalExpression = new BSTerminalExpressionElements();
		this.unknownRuleBSPrimitiveType = new BSPrimitiveTypeElements();
		this.tHEX_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_VALUE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tESCAPE_CODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ESCAPE_CODE");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tTAGGED_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TAGGED_STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.example.blorquescript.BlorqueScript".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//BSFile:
	//	("package" name=QualifiedName ";")? imports+=BSImport* classes+=BSClass*;
	public BSFileElements getBSFileAccess() {
		return pBSFile;
	}
	
	public ParserRule getBSFileRule() {
		return getBSFileAccess().getRule();
	}

	//BSImport:
	//	"import" importedNamespace=QualifiedNameWithWildcard ";";
	public BSImportElements getBSImportAccess() {
		return pBSImport;
	}
	
	public ParserRule getBSImportRule() {
		return getBSImportAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//BSClass:
	//	"class" name=ID (":" superclass=[BSClass|QualifiedName])? "{" members+=BSMember* "}";
	public BSClassElements getBSClassAccess() {
		return pBSClass;
	}
	
	public ParserRule getBSClassRule() {
		return getBSClassAccess().getRule();
	}

	//BSMember:
	//	BSField | BSMethod;
	public BSMemberElements getBSMemberAccess() {
		return pBSMember;
	}
	
	public ParserRule getBSMemberRule() {
		return getBSMemberAccess().getRule();
	}

	//BSField:
	//	(pType=BSPrimitiveType | rType=[BSClass|QualifiedName]) name=ID (isArray?="[" "]")? ";";
	public BSFieldElements getBSFieldAccess() {
		return pBSField;
	}
	
	public ParserRule getBSFieldRule() {
		return getBSFieldAccess().getRule();
	}

	//BSMethod:
	//	(pType=BSPrimitiveType | rType=[BSClass|QualifiedName]) (isArray?="[" "]")? name=ID "(" (params+=BSParameter (","
	//	params+=BSParameter)*)? ")" body=BSMethodBody;
	public BSMethodElements getBSMethodAccess() {
		return pBSMethod;
	}
	
	public ParserRule getBSMethodRule() {
		return getBSMethodAccess().getRule();
	}

	//BSParameter:
	//	(pType=BSPrimitiveType | rType=[BSClass|QualifiedName]) name=ID (isArray?="[" "]")?;
	public BSParameterElements getBSParameterAccess() {
		return pBSParameter;
	}
	
	public ParserRule getBSParameterRule() {
		return getBSParameterAccess().getRule();
	}

	//BSMethodBody:
	//	{BSMethodBody} "{" statements+=BSStatement* "}";
	public BSMethodBodyElements getBSMethodBodyAccess() {
		return pBSMethodBody;
	}
	
	public ParserRule getBSMethodBodyRule() {
		return getBSMethodBodyAccess().getRule();
	}

	//BSStatement:
	//	BSVariableDeclaration | BSReturn | BSBreak | BSContinue | BSExpression ";" | BSIfStatement | BSWhileLoop | BSForLoop
	//	| BSSwitchStatement;
	public BSStatementElements getBSStatementAccess() {
		return pBSStatement;
	}
	
	public ParserRule getBSStatementRule() {
		return getBSStatementAccess().getRule();
	}

	//BSReturn:
	//	{BSReturn} "return" expression=BSExpression? ";";
	public BSReturnElements getBSReturnAccess() {
		return pBSReturn;
	}
	
	public ParserRule getBSReturnRule() {
		return getBSReturnAccess().getRule();
	}

	//BSBreak:
	//	{BSBreak} "break" ";";
	public BSBreakElements getBSBreakAccess() {
		return pBSBreak;
	}
	
	public ParserRule getBSBreakRule() {
		return getBSBreakAccess().getRule();
	}

	//BSContinue:
	//	{BSContinue} "continue" ";";
	public BSContinueElements getBSContinueAccess() {
		return pBSContinue;
	}
	
	public ParserRule getBSContinueRule() {
		return getBSContinueAccess().getRule();
	}

	//BSVariableDeclaration:
	//	(pType=BSPrimitiveType | rType=[BSClass|QualifiedName]) name=ID ("=" expression=BSExpression)? ";";
	public BSVariableDeclarationElements getBSVariableDeclarationAccess() {
		return pBSVariableDeclaration;
	}
	
	public ParserRule getBSVariableDeclarationRule() {
		return getBSVariableDeclarationAccess().getRule();
	}

	//BSIfStatement:
	//	"if" "(" expression=BSExpression ")" thenBlock=BSIfBlock ("else" elseBlock=BSIfBlock)?;
	public BSIfStatementElements getBSIfStatementAccess() {
		return pBSIfStatement;
	}
	
	public ParserRule getBSIfStatementRule() {
		return getBSIfStatementAccess().getRule();
	}

	//BSWhileLoop:
	//	"while" "(" expression=BSExpression ")" block=BSLoopBlock;
	public BSWhileLoopElements getBSWhileLoopAccess() {
		return pBSWhileLoop;
	}
	
	public ParserRule getBSWhileLoopRule() {
		return getBSWhileLoopAccess().getRule();
	}

	//BSForLoop:
	//	"for" "(" left=BSExpression ";" middle=BSExpression ";" right=BSExpression ")" block=BSLoopBlock;
	public BSForLoopElements getBSForLoopAccess() {
		return pBSForLoop;
	}
	
	public ParserRule getBSForLoopRule() {
		return getBSForLoopAccess().getRule();
	}

	//BSSwitchStatement:
	//	"switch" stringSwitch?="$"? "(" expression=BSExpression ")" block=BSSwitchBlock;
	public BSSwitchStatementElements getBSSwitchStatementAccess() {
		return pBSSwitchStatement;
	}
	
	public ParserRule getBSSwitchStatementRule() {
		return getBSSwitchStatementAccess().getRule();
	}

	//BSIfBlock:
	//	statements+=BSStatement | {BSIfBlock} "{" statements+=BSStatement* "}";
	public BSIfBlockElements getBSIfBlockAccess() {
		return pBSIfBlock;
	}
	
	public ParserRule getBSIfBlockRule() {
		return getBSIfBlockAccess().getRule();
	}

	//BSLoopBlock:
	//	statements+=BSStatement | {BSLoopBlock} "{" statements+=BSStatement* "}";
	public BSLoopBlockElements getBSLoopBlockAccess() {
		return pBSLoopBlock;
	}
	
	public ParserRule getBSLoopBlockRule() {
		return getBSLoopBlockAccess().getRule();
	}

	//BSSwitchBlock:
	//	{BSSwitchBlock} "{" cases+=BSCase* "}";
	public BSSwitchBlockElements getBSSwitchBlockAccess() {
		return pBSSwitchBlock;
	}
	
	public ParserRule getBSSwitchBlockRule() {
		return getBSSwitchBlockAccess().getRule();
	}

	//BSCase:
	//	"case" expression=BSExpression ":" block=BSCaseBlock | "default" ":" block=BSCaseBlock;
	public BSCaseElements getBSCaseAccess() {
		return pBSCase;
	}
	
	public ParserRule getBSCaseRule() {
		return getBSCaseAccess().getRule();
	}

	//BSCaseBlock:
	//	{BSCaseBlock} statements+=BSStatement*;
	public BSCaseBlockElements getBSCaseBlockAccess() {
		return pBSCaseBlock;
	}
	
	public ParserRule getBSCaseBlockRule() {
		return getBSCaseBlockAccess().getRule();
	}

	//BSBlock:
	//	BSMethodBody | BSIfBlock | BSLoopBlock | BSSwitchBlock | BSCaseBlock;
	public BSBlockElements getBSBlockAccess() {
		return pBSBlock;
	}
	
	public ParserRule getBSBlockRule() {
		return getBSBlockAccess().getRule();
	}

	//BSSymbol:
	//	BSVariableDeclaration | BSParameter | BSMember;
	public BSSymbolElements getBSSymbolAccess() {
		return pBSSymbol;
	}
	
	public ParserRule getBSSymbolRule() {
		return getBSSymbolAccess().getRule();
	}

	//BSExpression:
	//	BSAssignmentOrTernaryExpression;
	public BSExpressionElements getBSExpressionAccess() {
		return pBSExpression;
	}
	
	public ParserRule getBSExpressionRule() {
		return getBSExpressionAccess().getRule();
	}

	////right-to-left assignment and ternary operators: = [op]= (?:)
	//BSAssignmentOrTernaryExpression returns BSExpression:
	//	BSBooleanOrExpression ({BSAssignmentExpression.left=current} assignmentOperator=("=" | "@=" | "+=" | "-=" | "*=" |
	//	"/=" | "%=" | "<<=" | ">>=" | "&=" | "^=" | "|=") right=BSExpression | {BSTernaryExpression.left=current} "?"
	//	middle=BSExpression ":" right=BSExpression)?;
	public BSAssignmentOrTernaryExpressionElements getBSAssignmentOrTernaryExpressionAccess() {
		return pBSAssignmentOrTernaryExpression;
	}
	
	public ParserRule getBSAssignmentOrTernaryExpressionRule() {
		return getBSAssignmentOrTernaryExpressionAccess().getRule();
	}

	////right-to-left assignment operators: = [op]=
	////BSAssignmentExpression returns BSExpression:
	////	BSTernaryExpression
	////	({BSAssignmentExpression.left=current} assignmentOperator=('='|'@='|'+='|'-='|'*='|'/='|'%='|'<<='|'>>='|'&='|'^='|'|=') right=BSExpression)?
	////;
	////
	//////right-to-left ternary operator: (?:)
	////BSTernaryExpression returns BSExpression:
	////	BSBooleanOrExpression
	////	({BSTernaryExpression.left=current} '?' middle=BSExpression ':' right=BSExpression)?
	////;
	////left-to-right boolean OR operator: ||
	//BSBooleanOrExpression returns BSExpression:
	//	BSBooleanAndExpression ({BSBooleanOrExpression.left=current} "||" right=BSBooleanAndExpression)*;
	public BSBooleanOrExpressionElements getBSBooleanOrExpressionAccess() {
		return pBSBooleanOrExpression;
	}
	
	public ParserRule getBSBooleanOrExpressionRule() {
		return getBSBooleanOrExpressionAccess().getRule();
	}

	////left-to-right boolean AND operator: &&
	//BSBooleanAndExpression returns BSExpression:
	//	BSBitwiseOrExpression ({BSBooleanAndExpression.left=current} "&&" right=BSBitwiseOrExpression)*;
	public BSBooleanAndExpressionElements getBSBooleanAndExpressionAccess() {
		return pBSBooleanAndExpression;
	}
	
	public ParserRule getBSBooleanAndExpressionRule() {
		return getBSBooleanAndExpressionAccess().getRule();
	}

	////left-to-right bitwise OR operator: |
	//BSBitwiseOrExpression returns BSExpression:
	//	BSBitwiseXorExpression ({BSBitwiseOrExpression.left=current} "|" right=BSBitwiseXorExpression)*;
	public BSBitwiseOrExpressionElements getBSBitwiseOrExpressionAccess() {
		return pBSBitwiseOrExpression;
	}
	
	public ParserRule getBSBitwiseOrExpressionRule() {
		return getBSBitwiseOrExpressionAccess().getRule();
	}

	////left-to-right bitwise XOR operator: ^
	//BSBitwiseXorExpression returns BSExpression:
	//	BSBitwiseAndExpression ({BSBitwiseXorExpression.left=current} "^" right=BSBitwiseAndExpression)*;
	public BSBitwiseXorExpressionElements getBSBitwiseXorExpressionAccess() {
		return pBSBitwiseXorExpression;
	}
	
	public ParserRule getBSBitwiseXorExpressionRule() {
		return getBSBitwiseXorExpressionAccess().getRule();
	}

	////left-to-right bitwise AND operator: &
	//BSBitwiseAndExpression returns BSExpression:
	//	BSEqualityExpression ({BSBitwiseAndExpression.left=current} "&" right=BSEqualityExpression)*;
	public BSBitwiseAndExpressionElements getBSBitwiseAndExpressionAccess() {
		return pBSBitwiseAndExpression;
	}
	
	public ParserRule getBSBitwiseAndExpressionRule() {
		return getBSBitwiseAndExpressionAccess().getRule();
	}

	////left-to-right equality operators: == !=
	//BSEqualityExpression returns BSExpression:
	//	BSOrderedRelationExpression ({BSEqualityExpression.left=current} operator=("==" | "!=")
	//	right=BSOrderedRelationExpression)*;
	public BSEqualityExpressionElements getBSEqualityExpressionAccess() {
		return pBSEqualityExpression;
	}
	
	public ParserRule getBSEqualityExpressionRule() {
		return getBSEqualityExpressionAccess().getRule();
	}

	////left-to-right relational operators: < > <= >=
	//BSOrderedRelationExpression returns BSExpression:
	//	BSBitwiseShiftExpression ({BSOrderedRelationExpression.left=current} operator=("<" | ">" | "<=" | ">=")
	//	right=BSBitwiseShiftExpression)*;
	public BSOrderedRelationExpressionElements getBSOrderedRelationExpressionAccess() {
		return pBSOrderedRelationExpression;
	}
	
	public ParserRule getBSOrderedRelationExpressionRule() {
		return getBSOrderedRelationExpressionAccess().getRule();
	}

	////left-to-right bit-shift operators: << >>
	//BSBitwiseShiftExpression returns BSExpression:
	//	BSPlusMinusOrStringConcatExpression ({BSBitwiseShiftExpression.left=current} operator=("<<" | ">>")
	//	right=BSPlusMinusOrStringConcatExpression)*;
	public BSBitwiseShiftExpressionElements getBSBitwiseShiftExpressionAccess() {
		return pBSBitwiseShiftExpression;
	}
	
	public ParserRule getBSBitwiseShiftExpressionRule() {
		return getBSBitwiseShiftExpressionAccess().getRule();
	}

	////left-to-right additive operators: + - [string concat +] @ SPC NL TAB
	//BSPlusMinusOrStringConcatExpression returns BSExpression:
	//	BSMulDivOrModExpression ({BSPlusMinusOrStringConcatExpression.left=current} operator=("+" | "-" | "@" | "SPC" | "NL"
	//	| "TAB") right=BSMulDivOrModExpression)*;
	public BSPlusMinusOrStringConcatExpressionElements getBSPlusMinusOrStringConcatExpressionAccess() {
		return pBSPlusMinusOrStringConcatExpression;
	}
	
	public ParserRule getBSPlusMinusOrStringConcatExpressionRule() {
		return getBSPlusMinusOrStringConcatExpressionAccess().getRule();
	}

	////left-to-right multiplication operators: * / %
	//BSMulDivOrModExpression returns BSExpression:
	//	BSCastOrNewExpression ({BSMulDivOrModExpression.left=current} operator=("*" | "/" | "%")
	//	right=BSCastOrNewExpression)*;
	public BSMulDivOrModExpressionElements getBSMulDivOrModExpressionAccess() {
		return pBSMulDivOrModExpression;
	}
	
	public ParserRule getBSMulDivOrModExpressionRule() {
		return getBSMulDivOrModExpressionAccess().getRule();
	}

	////right-to-left prefix unary operators: ([cast]) new
	//BSCastOrNewExpression returns BSExpression:
	//	BSUnaryModifierExpression | {BSCastExpression} "(" pType=BSPrimitiveType (isArray?="[" "]")? ")"
	//	castExpr=BSCastOrNewExpression | {BSNewExpression} "new" rType=[BSClass|QualifiedName] ((isArray?="[" "]")? | "("
	//	(args+=BSExpression ("," args+=BSExpression)*)? ")");
	public BSCastOrNewExpressionElements getBSCastOrNewExpressionAccess() {
		return pBSCastOrNewExpression;
	}
	
	public ParserRule getBSCastOrNewExpressionRule() {
		return getBSCastOrNewExpressionAccess().getRule();
	}

	////right-to-left prefix unary operators: + - ! ~
	//BSUnaryModifierExpression returns BSExpression:
	//	BSInvokationExpression | {BSUnaryModifierExpression} operator=("+" | "-" | "!" | "~")
	//	receiver=BSUnaryModifierExpression;
	public BSUnaryModifierExpressionElements getBSUnaryModifierExpressionAccess() {
		return pBSUnaryModifierExpression;
	}
	
	public ParserRule getBSUnaryModifierExpressionRule() {
		return getBSUnaryModifierExpressionAccess().getRule();
	}

	////left-to-right unary postfixes: . (...) [...] ++ --
	//BSInvokationExpression returns BSExpression:
	//	BSTerminalExpression ({BSMemberSelectionExpression.receiver=current} "." member=BSTerminalExpression |
	//	{BSMethodInvokationExpression.receiver=current} "(" (args+=BSExpression ("," args+=BSExpression)*)? ")" |
	//	{BSArrayAccessExpression.receiver=current} "[" (args+=BSExpression ("," args+=BSExpression)*)? "]" |
	//	{BSPostfixArithmeticExpression.receiver=current} operator=("++" | "--"))*;
	public BSInvokationExpressionElements getBSInvokationExpressionAccess() {
		return pBSInvokationExpression;
	}
	
	public ParserRule getBSInvokationExpressionRule() {
		return getBSInvokationExpressionAccess().getRule();
	}

	////Maximum-precedence literals and keywords
	//BSTerminalExpression returns BSExpression:
	//	{BSStringConstant} value=STRING | {BSHexadecimalConstant} value=HEX_VALUE | {BSNumberConstant} value=INT ("."
	//	{BSRealConstant.left=current} right=INT)? | {BSBooleanConstant} value=("true" | "false") | {BSNullLiteral} "null" |
	//	{BSThisLiteral} "this" | {BSClientLiteral} "client" | {BSParentLiteral} "parent" | {BSSymbolRef} symbol=[BSSymbol] |
	//	{BSParentheticalExpression} "(" expression=BSExpression ")";
	public BSTerminalExpressionElements getBSTerminalExpressionAccess() {
		return pBSTerminalExpression;
	}
	
	public ParserRule getBSTerminalExpressionRule() {
		return getBSTerminalExpressionAccess().getRule();
	}

	//enum BSPrimitiveType:
	//	NONE | STRING="string" | TAGGED_STRING="taggedString" | NUMBER="number" | OBJECT="object" | VOID="void";
	public BSPrimitiveTypeElements getBSPrimitiveTypeAccess() {
		return unknownRuleBSPrimitiveType;
	}
	
	public EnumRule getBSPrimitiveTypeRule() {
		return getBSPrimitiveTypeAccess().getRule();
	}

	////TODO: figure out what to do about array literals
	////TODO: figure out how to deal with special class names: global, servercmd, server, etc.
	////Namespace (::) deliberately excluded, as it is only allowed in Global anyway.
	////Instead, ':' is allowed in ID, and validation will forbid it anywhere but as a single '::' in global definitions.
	//terminal HEX_VALUE:
	//	"0x" ("0".."9" | "a".."f" | "A".."F")*;
	public TerminalRule getHEX_VALUERule() {
		return tHEX_VALUE;
	} 

	//terminal ID:
	//	("$" | "%")? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9" | ":")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal fragment ESCAPE_CODE:
	//	"\\" ("x" . . | "c" . | !("c" | "x"));
	public TerminalRule getESCAPE_CODERule() {
		return tESCAPE_CODE;
	} 

	//terminal STRING:
	//	"\"" (ESCAPE_CODE | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal TAGGED_STRING:
	//	"\'" (ESCAPE_CODE | !("\\" | "\'"))* "\'";
	public TerminalRule getTAGGED_STRINGRule() {
		return tTAGGED_STRING;
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	} 
}
