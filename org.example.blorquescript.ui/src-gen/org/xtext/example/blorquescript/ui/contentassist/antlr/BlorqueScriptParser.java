/*
 * generated by Xtext
 */
package org.xtext.example.blorquescript.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.blorquescript.services.BlorqueScriptGrammarAccess;

public class BlorqueScriptParser extends AbstractContentAssistParser {
	
	@Inject
	private BlorqueScriptGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.blorquescript.ui.contentassist.antlr.internal.InternalBlorqueScriptParser createParser() {
		org.xtext.example.blorquescript.ui.contentassist.antlr.internal.InternalBlorqueScriptParser result = new org.xtext.example.blorquescript.ui.contentassist.antlr.internal.InternalBlorqueScriptParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBSMemberAccess().getAlternatives(), "rule__BSMember__Alternatives");
					put(grammarAccess.getBSStatementAccess().getAlternatives(), "rule__BSStatement__Alternatives");
					put(grammarAccess.getBSIfBlockAccess().getAlternatives(), "rule__BSIfBlock__Alternatives");
					put(grammarAccess.getBSBlockAccess().getAlternatives(), "rule__BSBlock__Alternatives");
					put(grammarAccess.getBSSymbolAccess().getAlternatives(), "rule__BSSymbol__Alternatives");
					put(grammarAccess.getBSAssignmentAccess().getAlternatives_0(), "rule__BSAssignment__Alternatives_0");
					put(grammarAccess.getBSCastingExpressionAccess().getCastTypeAlternatives_1_0(), "rule__BSCastingExpression__CastTypeAlternatives_1_0");
					put(grammarAccess.getBSTerminalExpressionAccess().getAlternatives(), "rule__BSTerminalExpression__Alternatives");
					put(grammarAccess.getBSTerminalExpressionAccess().getValueAlternatives_2_1_0(), "rule__BSTerminalExpression__ValueAlternatives_2_1_0");
					put(grammarAccess.getBSFileAccess().getGroup(), "rule__BSFile__Group__0");
					put(grammarAccess.getBSFileAccess().getGroup_0(), "rule__BSFile__Group_0__0");
					put(grammarAccess.getBSImportAccess().getGroup(), "rule__BSImport__Group__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getBSClassAccess().getGroup(), "rule__BSClass__Group__0");
					put(grammarAccess.getBSClassAccess().getGroup_2(), "rule__BSClass__Group_2__0");
					put(grammarAccess.getBSFieldAccess().getGroup(), "rule__BSField__Group__0");
					put(grammarAccess.getBSMethodAccess().getGroup(), "rule__BSMethod__Group__0");
					put(grammarAccess.getBSMethodAccess().getGroup_3(), "rule__BSMethod__Group_3__0");
					put(grammarAccess.getBSMethodAccess().getGroup_3_1(), "rule__BSMethod__Group_3_1__0");
					put(grammarAccess.getBSParameterAccess().getGroup(), "rule__BSParameter__Group__0");
					put(grammarAccess.getBSMethodBodyAccess().getGroup(), "rule__BSMethodBody__Group__0");
					put(grammarAccess.getBSStatementAccess().getGroup_2(), "rule__BSStatement__Group_2__0");
					put(grammarAccess.getBSReturnAccess().getGroup(), "rule__BSReturn__Group__0");
					put(grammarAccess.getBSVariableDeclarationAccess().getGroup(), "rule__BSVariableDeclaration__Group__0");
					put(grammarAccess.getBSVariableDeclarationAccess().getGroup_2(), "rule__BSVariableDeclaration__Group_2__0");
					put(grammarAccess.getBSIfStatementAccess().getGroup(), "rule__BSIfStatement__Group__0");
					put(grammarAccess.getBSIfStatementAccess().getGroup_5(), "rule__BSIfStatement__Group_5__0");
					put(grammarAccess.getBSIfBlockAccess().getGroup_1(), "rule__BSIfBlock__Group_1__0");
					put(grammarAccess.getBSAssignmentAccess().getGroup(), "rule__BSAssignment__Group__0");
					put(grammarAccess.getBSAssignmentAccess().getGroup_1(), "rule__BSAssignment__Group_1__0");
					put(grammarAccess.getBSCastingExpressionAccess().getGroup(), "rule__BSCastingExpression__Group__0");
					put(grammarAccess.getBSSelectionExpressionAccess().getGroup(), "rule__BSSelectionExpression__Group__0");
					put(grammarAccess.getBSSelectionExpressionAccess().getGroup_1(), "rule__BSSelectionExpression__Group_1__0");
					put(grammarAccess.getBSSelectionExpressionAccess().getGroup_1_3(), "rule__BSSelectionExpression__Group_1_3__0");
					put(grammarAccess.getBSSelectionExpressionAccess().getGroup_1_3_1(), "rule__BSSelectionExpression__Group_1_3_1__0");
					put(grammarAccess.getBSSelectionExpressionAccess().getGroup_1_3_1_1(), "rule__BSSelectionExpression__Group_1_3_1_1__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_0(), "rule__BSTerminalExpression__Group_0__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_1(), "rule__BSTerminalExpression__Group_1__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_2(), "rule__BSTerminalExpression__Group_2__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_3(), "rule__BSTerminalExpression__Group_3__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_4(), "rule__BSTerminalExpression__Group_4__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_5(), "rule__BSTerminalExpression__Group_5__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_6(), "rule__BSTerminalExpression__Group_6__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_6_2(), "rule__BSTerminalExpression__Group_6_2__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_6_2_1(), "rule__BSTerminalExpression__Group_6_2_1__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_6_2_1_1(), "rule__BSTerminalExpression__Group_6_2_1_1__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_7(), "rule__BSTerminalExpression__Group_7__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_7_4(), "rule__BSTerminalExpression__Group_7_4__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_7_4_1(), "rule__BSTerminalExpression__Group_7_4_1__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_8(), "rule__BSTerminalExpression__Group_8__0");
					put(grammarAccess.getBSFileAccess().getNameAssignment_0_1(), "rule__BSFile__NameAssignment_0_1");
					put(grammarAccess.getBSFileAccess().getImportsAssignment_1(), "rule__BSFile__ImportsAssignment_1");
					put(grammarAccess.getBSFileAccess().getClassesAssignment_2(), "rule__BSFile__ClassesAssignment_2");
					put(grammarAccess.getBSImportAccess().getImportedNamespaceAssignment_1(), "rule__BSImport__ImportedNamespaceAssignment_1");
					put(grammarAccess.getBSClassAccess().getNameAssignment_1(), "rule__BSClass__NameAssignment_1");
					put(grammarAccess.getBSClassAccess().getSuperclassAssignment_2_1(), "rule__BSClass__SuperclassAssignment_2_1");
					put(grammarAccess.getBSClassAccess().getMembersAssignment_4(), "rule__BSClass__MembersAssignment_4");
					put(grammarAccess.getBSFieldAccess().getTypeAssignment_0(), "rule__BSField__TypeAssignment_0");
					put(grammarAccess.getBSFieldAccess().getNameAssignment_1(), "rule__BSField__NameAssignment_1");
					put(grammarAccess.getBSMethodAccess().getTypeAssignment_0(), "rule__BSMethod__TypeAssignment_0");
					put(grammarAccess.getBSMethodAccess().getNameAssignment_1(), "rule__BSMethod__NameAssignment_1");
					put(grammarAccess.getBSMethodAccess().getParamsAssignment_3_0(), "rule__BSMethod__ParamsAssignment_3_0");
					put(grammarAccess.getBSMethodAccess().getParamsAssignment_3_1_1(), "rule__BSMethod__ParamsAssignment_3_1_1");
					put(grammarAccess.getBSMethodAccess().getBodyAssignment_5(), "rule__BSMethod__BodyAssignment_5");
					put(grammarAccess.getBSParameterAccess().getTypeAssignment_0(), "rule__BSParameter__TypeAssignment_0");
					put(grammarAccess.getBSParameterAccess().getNameAssignment_1(), "rule__BSParameter__NameAssignment_1");
					put(grammarAccess.getBSMethodBodyAccess().getStatementsAssignment_2(), "rule__BSMethodBody__StatementsAssignment_2");
					put(grammarAccess.getBSReturnAccess().getExpressionAssignment_1(), "rule__BSReturn__ExpressionAssignment_1");
					put(grammarAccess.getBSVariableDeclarationAccess().getTypeAssignment_0(), "rule__BSVariableDeclaration__TypeAssignment_0");
					put(grammarAccess.getBSVariableDeclarationAccess().getNameAssignment_1(), "rule__BSVariableDeclaration__NameAssignment_1");
					put(grammarAccess.getBSVariableDeclarationAccess().getExpressionAssignment_2_1(), "rule__BSVariableDeclaration__ExpressionAssignment_2_1");
					put(grammarAccess.getBSIfStatementAccess().getExpressionAssignment_2(), "rule__BSIfStatement__ExpressionAssignment_2");
					put(grammarAccess.getBSIfStatementAccess().getThenBlockAssignment_4(), "rule__BSIfStatement__ThenBlockAssignment_4");
					put(grammarAccess.getBSIfStatementAccess().getElseBlockAssignment_5_1(), "rule__BSIfStatement__ElseBlockAssignment_5_1");
					put(grammarAccess.getBSIfBlockAccess().getStatementsAssignment_0(), "rule__BSIfBlock__StatementsAssignment_0");
					put(grammarAccess.getBSIfBlockAccess().getStatementsAssignment_1_1(), "rule__BSIfBlock__StatementsAssignment_1_1");
					put(grammarAccess.getBSAssignmentAccess().getRightAssignment_1_2(), "rule__BSAssignment__RightAssignment_1_2");
					put(grammarAccess.getBSCastingExpressionAccess().getCastTypeAssignment_1(), "rule__BSCastingExpression__CastTypeAssignment_1");
					put(grammarAccess.getBSCastingExpressionAccess().getCastExprAssignment_3(), "rule__BSCastingExpression__CastExprAssignment_3");
					put(grammarAccess.getBSSelectionExpressionAccess().getMemberAssignment_1_2(), "rule__BSSelectionExpression__MemberAssignment_1_2");
					put(grammarAccess.getBSSelectionExpressionAccess().getMethodinvocationAssignment_1_3_0(), "rule__BSSelectionExpression__MethodinvocationAssignment_1_3_0");
					put(grammarAccess.getBSSelectionExpressionAccess().getArgsAssignment_1_3_1_0(), "rule__BSSelectionExpression__ArgsAssignment_1_3_1_0");
					put(grammarAccess.getBSSelectionExpressionAccess().getArgsAssignment_1_3_1_1_1(), "rule__BSSelectionExpression__ArgsAssignment_1_3_1_1_1");
					put(grammarAccess.getBSTerminalExpressionAccess().getValueAssignment_0_1(), "rule__BSTerminalExpression__ValueAssignment_0_1");
					put(grammarAccess.getBSTerminalExpressionAccess().getValueAssignment_1_1(), "rule__BSTerminalExpression__ValueAssignment_1_1");
					put(grammarAccess.getBSTerminalExpressionAccess().getValueAssignment_2_1(), "rule__BSTerminalExpression__ValueAssignment_2_1");
					put(grammarAccess.getBSTerminalExpressionAccess().getSymbolAssignment_6_1(), "rule__BSTerminalExpression__SymbolAssignment_6_1");
					put(grammarAccess.getBSTerminalExpressionAccess().getMethodinvocationAssignment_6_2_0(), "rule__BSTerminalExpression__MethodinvocationAssignment_6_2_0");
					put(grammarAccess.getBSTerminalExpressionAccess().getArgsAssignment_6_2_1_0(), "rule__BSTerminalExpression__ArgsAssignment_6_2_1_0");
					put(grammarAccess.getBSTerminalExpressionAccess().getArgsAssignment_6_2_1_1_1(), "rule__BSTerminalExpression__ArgsAssignment_6_2_1_1_1");
					put(grammarAccess.getBSTerminalExpressionAccess().getTypeAssignment_7_2(), "rule__BSTerminalExpression__TypeAssignment_7_2");
					put(grammarAccess.getBSTerminalExpressionAccess().getArgsAssignment_7_4_0(), "rule__BSTerminalExpression__ArgsAssignment_7_4_0");
					put(grammarAccess.getBSTerminalExpressionAccess().getArgsAssignment_7_4_1_1(), "rule__BSTerminalExpression__ArgsAssignment_7_4_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.blorquescript.ui.contentassist.antlr.internal.InternalBlorqueScriptParser typedParser = (org.xtext.example.blorquescript.ui.contentassist.antlr.internal.InternalBlorqueScriptParser) parser;
			typedParser.entryRuleBSFile();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BlorqueScriptGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BlorqueScriptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
