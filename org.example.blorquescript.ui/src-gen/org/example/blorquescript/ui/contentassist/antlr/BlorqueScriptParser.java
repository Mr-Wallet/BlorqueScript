/*
 * generated by Xtext
 */
package org.example.blorquescript.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.example.blorquescript.services.BlorqueScriptGrammarAccess;

public class BlorqueScriptParser extends AbstractContentAssistParser {
	
	@Inject
	private BlorqueScriptGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.example.blorquescript.ui.contentassist.antlr.internal.InternalBlorqueScriptParser createParser() {
		org.example.blorquescript.ui.contentassist.antlr.internal.InternalBlorqueScriptParser result = new org.example.blorquescript.ui.contentassist.antlr.internal.InternalBlorqueScriptParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBSMemberAccess().getAlternatives(), "rule__BSMember__Alternatives");
					put(grammarAccess.getBSStatementAccess().getAlternatives(), "rule__BSStatement__Alternatives");
					put(grammarAccess.getBSIfBlockAccess().getAlternatives(), "rule__BSIfBlock__Alternatives");
					put(grammarAccess.getBSLoopBlockAccess().getAlternatives(), "rule__BSLoopBlock__Alternatives");
					put(grammarAccess.getBSCaseAccess().getAlternatives(), "rule__BSCase__Alternatives");
					put(grammarAccess.getBSBlockAccess().getAlternatives(), "rule__BSBlock__Alternatives");
					put(grammarAccess.getBSSymbolAccess().getAlternatives(), "rule__BSSymbol__Alternatives");
					put(grammarAccess.getBSAssignmentExpressionAccess().getAssignmentOperatorAlternatives_1_1_0(), "rule__BSAssignmentExpression__AssignmentOperatorAlternatives_1_1_0");
					put(grammarAccess.getBSEqualityExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__BSEqualityExpression__OperatorAlternatives_1_1_0");
					put(grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__BSOrderedRelationExpression__OperatorAlternatives_1_1_0");
					put(grammarAccess.getBSBitwiseShiftExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__BSBitwiseShiftExpression__OperatorAlternatives_1_1_0");
					put(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__BSPlusMinusOrStringConcatExpression__OperatorAlternatives_1_1_0");
					put(grammarAccess.getBSMulDivOrModExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__BSMulDivOrModExpression__OperatorAlternatives_1_1_0");
					put(grammarAccess.getBSCastOrNewExpressionAccess().getAlternatives(), "rule__BSCastOrNewExpression__Alternatives");
					put(grammarAccess.getBSCastOrNewExpressionAccess().getCastTypeAlternatives_1_2_0(), "rule__BSCastOrNewExpression__CastTypeAlternatives_1_2_0");
					put(grammarAccess.getBSUnaryModifierExpressionAccess().getAlternatives(), "rule__BSUnaryModifierExpression__Alternatives");
					put(grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__BSUnaryModifierExpression__OperatorAlternatives_1_1_0");
					put(grammarAccess.getBSInvokationExpressionAccess().getAlternatives_1(), "rule__BSInvokationExpression__Alternatives_1");
					put(grammarAccess.getBSInvokationExpressionAccess().getOperatorAlternatives_1_3_1_0(), "rule__BSInvokationExpression__OperatorAlternatives_1_3_1_0");
					put(grammarAccess.getBSTerminalExpressionAccess().getAlternatives(), "rule__BSTerminalExpression__Alternatives");
					put(grammarAccess.getBSTerminalExpressionAccess().getValueAlternatives_3_1_0(), "rule__BSTerminalExpression__ValueAlternatives_3_1_0");
					put(grammarAccess.getBSFileAccess().getGroup(), "rule__BSFile__Group__0");
					put(grammarAccess.getBSFileAccess().getGroup_0(), "rule__BSFile__Group_0__0");
					put(grammarAccess.getBSImportAccess().getGroup(), "rule__BSImport__Group__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getBSClassAccess().getGroup(), "rule__BSClass__Group__0");
					put(grammarAccess.getBSClassAccess().getGroup_2(), "rule__BSClass__Group_2__0");
					put(grammarAccess.getBSFieldAccess().getGroup(), "rule__BSField__Group__0");
					put(grammarAccess.getBSFieldAccess().getGroup_2(), "rule__BSField__Group_2__0");
					put(grammarAccess.getBSMethodAccess().getGroup(), "rule__BSMethod__Group__0");
					put(grammarAccess.getBSMethodAccess().getGroup_3(), "rule__BSMethod__Group_3__0");
					put(grammarAccess.getBSMethodAccess().getGroup_3_1(), "rule__BSMethod__Group_3_1__0");
					put(grammarAccess.getBSParameterAccess().getGroup(), "rule__BSParameter__Group__0");
					put(grammarAccess.getBSParameterAccess().getGroup_2(), "rule__BSParameter__Group_2__0");
					put(grammarAccess.getBSMethodBodyAccess().getGroup(), "rule__BSMethodBody__Group__0");
					put(grammarAccess.getBSStatementAccess().getGroup_2(), "rule__BSStatement__Group_2__0");
					put(grammarAccess.getBSReturnAccess().getGroup(), "rule__BSReturn__Group__0");
					put(grammarAccess.getBSVariableDeclarationAccess().getGroup(), "rule__BSVariableDeclaration__Group__0");
					put(grammarAccess.getBSVariableDeclarationAccess().getGroup_2(), "rule__BSVariableDeclaration__Group_2__0");
					put(grammarAccess.getBSIfStatementAccess().getGroup(), "rule__BSIfStatement__Group__0");
					put(grammarAccess.getBSIfStatementAccess().getGroup_5(), "rule__BSIfStatement__Group_5__0");
					put(grammarAccess.getBSWhileLoopAccess().getGroup(), "rule__BSWhileLoop__Group__0");
					put(grammarAccess.getBSForLoopAccess().getGroup(), "rule__BSForLoop__Group__0");
					put(grammarAccess.getBSSwitchStatementAccess().getGroup(), "rule__BSSwitchStatement__Group__0");
					put(grammarAccess.getBSIfBlockAccess().getGroup_1(), "rule__BSIfBlock__Group_1__0");
					put(grammarAccess.getBSLoopBlockAccess().getGroup_1(), "rule__BSLoopBlock__Group_1__0");
					put(grammarAccess.getBSSwitchBlockAccess().getGroup(), "rule__BSSwitchBlock__Group__0");
					put(grammarAccess.getBSCaseAccess().getGroup_0(), "rule__BSCase__Group_0__0");
					put(grammarAccess.getBSCaseAccess().getGroup_1(), "rule__BSCase__Group_1__0");
					put(grammarAccess.getBSCaseBlockAccess().getGroup(), "rule__BSCaseBlock__Group__0");
					put(grammarAccess.getBSAssignmentExpressionAccess().getGroup(), "rule__BSAssignmentExpression__Group__0");
					put(grammarAccess.getBSAssignmentExpressionAccess().getGroup_1(), "rule__BSAssignmentExpression__Group_1__0");
					put(grammarAccess.getBSTernaryExpressionAccess().getGroup(), "rule__BSTernaryExpression__Group__0");
					put(grammarAccess.getBSTernaryExpressionAccess().getGroup_1(), "rule__BSTernaryExpression__Group_1__0");
					put(grammarAccess.getBSBooleanOrExpressionAccess().getGroup(), "rule__BSBooleanOrExpression__Group__0");
					put(grammarAccess.getBSBooleanOrExpressionAccess().getGroup_1(), "rule__BSBooleanOrExpression__Group_1__0");
					put(grammarAccess.getBSBooleanAndExpressionAccess().getGroup(), "rule__BSBooleanAndExpression__Group__0");
					put(grammarAccess.getBSBooleanAndExpressionAccess().getGroup_1(), "rule__BSBooleanAndExpression__Group_1__0");
					put(grammarAccess.getBSBitwiseOrExpressionAccess().getGroup(), "rule__BSBitwiseOrExpression__Group__0");
					put(grammarAccess.getBSBitwiseOrExpressionAccess().getGroup_1(), "rule__BSBitwiseOrExpression__Group_1__0");
					put(grammarAccess.getBSBitwiseXorExpressionAccess().getGroup(), "rule__BSBitwiseXorExpression__Group__0");
					put(grammarAccess.getBSBitwiseXorExpressionAccess().getGroup_1(), "rule__BSBitwiseXorExpression__Group_1__0");
					put(grammarAccess.getBSBitwiseAndExpressionAccess().getGroup(), "rule__BSBitwiseAndExpression__Group__0");
					put(grammarAccess.getBSBitwiseAndExpressionAccess().getGroup_1(), "rule__BSBitwiseAndExpression__Group_1__0");
					put(grammarAccess.getBSEqualityExpressionAccess().getGroup(), "rule__BSEqualityExpression__Group__0");
					put(grammarAccess.getBSEqualityExpressionAccess().getGroup_1(), "rule__BSEqualityExpression__Group_1__0");
					put(grammarAccess.getBSOrderedRelationExpressionAccess().getGroup(), "rule__BSOrderedRelationExpression__Group__0");
					put(grammarAccess.getBSOrderedRelationExpressionAccess().getGroup_1(), "rule__BSOrderedRelationExpression__Group_1__0");
					put(grammarAccess.getBSBitwiseShiftExpressionAccess().getGroup(), "rule__BSBitwiseShiftExpression__Group__0");
					put(grammarAccess.getBSBitwiseShiftExpressionAccess().getGroup_1(), "rule__BSBitwiseShiftExpression__Group_1__0");
					put(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getGroup(), "rule__BSPlusMinusOrStringConcatExpression__Group__0");
					put(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getGroup_1(), "rule__BSPlusMinusOrStringConcatExpression__Group_1__0");
					put(grammarAccess.getBSMulDivOrModExpressionAccess().getGroup(), "rule__BSMulDivOrModExpression__Group__0");
					put(grammarAccess.getBSMulDivOrModExpressionAccess().getGroup_1(), "rule__BSMulDivOrModExpression__Group_1__0");
					put(grammarAccess.getBSCastOrNewExpressionAccess().getGroup_1(), "rule__BSCastOrNewExpression__Group_1__0");
					put(grammarAccess.getBSCastOrNewExpressionAccess().getGroup_2(), "rule__BSCastOrNewExpression__Group_2__0");
					put(grammarAccess.getBSCastOrNewExpressionAccess().getGroup_2_2(), "rule__BSCastOrNewExpression__Group_2_2__0");
					put(grammarAccess.getBSCastOrNewExpressionAccess().getGroup_2_5(), "rule__BSCastOrNewExpression__Group_2_5__0");
					put(grammarAccess.getBSCastOrNewExpressionAccess().getGroup_2_5_1(), "rule__BSCastOrNewExpression__Group_2_5_1__0");
					put(grammarAccess.getBSUnaryModifierExpressionAccess().getGroup_1(), "rule__BSUnaryModifierExpression__Group_1__0");
					put(grammarAccess.getBSInvokationExpressionAccess().getGroup(), "rule__BSInvokationExpression__Group__0");
					put(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_0(), "rule__BSInvokationExpression__Group_1_0__0");
					put(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_1(), "rule__BSInvokationExpression__Group_1_1__0");
					put(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_1_2(), "rule__BSInvokationExpression__Group_1_1_2__0");
					put(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_1_2_1(), "rule__BSInvokationExpression__Group_1_1_2_1__0");
					put(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_2(), "rule__BSInvokationExpression__Group_1_2__0");
					put(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_2_2(), "rule__BSInvokationExpression__Group_1_2_2__0");
					put(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_2_2_1(), "rule__BSInvokationExpression__Group_1_2_2_1__0");
					put(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_3(), "rule__BSInvokationExpression__Group_1_3__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_0(), "rule__BSTerminalExpression__Group_0__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_1(), "rule__BSTerminalExpression__Group_1__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_2(), "rule__BSTerminalExpression__Group_2__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_2_2(), "rule__BSTerminalExpression__Group_2_2__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_3(), "rule__BSTerminalExpression__Group_3__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_4(), "rule__BSTerminalExpression__Group_4__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_5(), "rule__BSTerminalExpression__Group_5__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_6(), "rule__BSTerminalExpression__Group_6__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_7(), "rule__BSTerminalExpression__Group_7__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_8(), "rule__BSTerminalExpression__Group_8__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_9(), "rule__BSTerminalExpression__Group_9__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_10(), "rule__BSTerminalExpression__Group_10__0");
					put(grammarAccess.getBSTerminalExpressionAccess().getGroup_11(), "rule__BSTerminalExpression__Group_11__0");
					put(grammarAccess.getBSFileAccess().getNameAssignment_0_1(), "rule__BSFile__NameAssignment_0_1");
					put(grammarAccess.getBSFileAccess().getImportsAssignment_1(), "rule__BSFile__ImportsAssignment_1");
					put(grammarAccess.getBSFileAccess().getClassesAssignment_2(), "rule__BSFile__ClassesAssignment_2");
					put(grammarAccess.getBSImportAccess().getImportedNamespaceAssignment_1(), "rule__BSImport__ImportedNamespaceAssignment_1");
					put(grammarAccess.getBSClassAccess().getNameAssignment_1(), "rule__BSClass__NameAssignment_1");
					put(grammarAccess.getBSClassAccess().getSuperclassAssignment_2_1(), "rule__BSClass__SuperclassAssignment_2_1");
					put(grammarAccess.getBSClassAccess().getMembersAssignment_4(), "rule__BSClass__MembersAssignment_4");
					put(grammarAccess.getBSFieldAccess().getTypeAssignment_0(), "rule__BSField__TypeAssignment_0");
					put(grammarAccess.getBSFieldAccess().getNameAssignment_1(), "rule__BSField__NameAssignment_1");
					put(grammarAccess.getBSFieldAccess().getIsArrayAssignment_2_0(), "rule__BSField__IsArrayAssignment_2_0");
					put(grammarAccess.getBSMethodAccess().getTypeAssignment_0(), "rule__BSMethod__TypeAssignment_0");
					put(grammarAccess.getBSMethodAccess().getNameAssignment_1(), "rule__BSMethod__NameAssignment_1");
					put(grammarAccess.getBSMethodAccess().getParamsAssignment_3_0(), "rule__BSMethod__ParamsAssignment_3_0");
					put(grammarAccess.getBSMethodAccess().getParamsAssignment_3_1_1(), "rule__BSMethod__ParamsAssignment_3_1_1");
					put(grammarAccess.getBSMethodAccess().getBodyAssignment_5(), "rule__BSMethod__BodyAssignment_5");
					put(grammarAccess.getBSParameterAccess().getTypeAssignment_0(), "rule__BSParameter__TypeAssignment_0");
					put(grammarAccess.getBSParameterAccess().getNameAssignment_1(), "rule__BSParameter__NameAssignment_1");
					put(grammarAccess.getBSParameterAccess().getIsArrayAssignment_2_0(), "rule__BSParameter__IsArrayAssignment_2_0");
					put(grammarAccess.getBSMethodBodyAccess().getStatementsAssignment_2(), "rule__BSMethodBody__StatementsAssignment_2");
					put(grammarAccess.getBSReturnAccess().getExpressionAssignment_1(), "rule__BSReturn__ExpressionAssignment_1");
					put(grammarAccess.getBSVariableDeclarationAccess().getTypeAssignment_0(), "rule__BSVariableDeclaration__TypeAssignment_0");
					put(grammarAccess.getBSVariableDeclarationAccess().getNameAssignment_1(), "rule__BSVariableDeclaration__NameAssignment_1");
					put(grammarAccess.getBSVariableDeclarationAccess().getExpressionAssignment_2_1(), "rule__BSVariableDeclaration__ExpressionAssignment_2_1");
					put(grammarAccess.getBSIfStatementAccess().getExpressionAssignment_2(), "rule__BSIfStatement__ExpressionAssignment_2");
					put(grammarAccess.getBSIfStatementAccess().getThenBlockAssignment_4(), "rule__BSIfStatement__ThenBlockAssignment_4");
					put(grammarAccess.getBSIfStatementAccess().getElseBlockAssignment_5_1(), "rule__BSIfStatement__ElseBlockAssignment_5_1");
					put(grammarAccess.getBSWhileLoopAccess().getExpressionAssignment_2(), "rule__BSWhileLoop__ExpressionAssignment_2");
					put(grammarAccess.getBSWhileLoopAccess().getBlockAssignment_4(), "rule__BSWhileLoop__BlockAssignment_4");
					put(grammarAccess.getBSForLoopAccess().getLeftAssignment_2(), "rule__BSForLoop__LeftAssignment_2");
					put(grammarAccess.getBSForLoopAccess().getMiddleAssignment_4(), "rule__BSForLoop__MiddleAssignment_4");
					put(grammarAccess.getBSForLoopAccess().getRightAssignment_6(), "rule__BSForLoop__RightAssignment_6");
					put(grammarAccess.getBSForLoopAccess().getBlockAssignment_8(), "rule__BSForLoop__BlockAssignment_8");
					put(grammarAccess.getBSSwitchStatementAccess().getStringSwitchAssignment_1(), "rule__BSSwitchStatement__StringSwitchAssignment_1");
					put(grammarAccess.getBSSwitchStatementAccess().getExpressionAssignment_3(), "rule__BSSwitchStatement__ExpressionAssignment_3");
					put(grammarAccess.getBSSwitchStatementAccess().getBlockAssignment_5(), "rule__BSSwitchStatement__BlockAssignment_5");
					put(grammarAccess.getBSIfBlockAccess().getStatementsAssignment_0(), "rule__BSIfBlock__StatementsAssignment_0");
					put(grammarAccess.getBSIfBlockAccess().getStatementsAssignment_1_2(), "rule__BSIfBlock__StatementsAssignment_1_2");
					put(grammarAccess.getBSLoopBlockAccess().getStatementsAssignment_0(), "rule__BSLoopBlock__StatementsAssignment_0");
					put(grammarAccess.getBSLoopBlockAccess().getStatementsAssignment_1_2(), "rule__BSLoopBlock__StatementsAssignment_1_2");
					put(grammarAccess.getBSSwitchBlockAccess().getCasesAssignment_2(), "rule__BSSwitchBlock__CasesAssignment_2");
					put(grammarAccess.getBSCaseAccess().getExpressionAssignment_0_1(), "rule__BSCase__ExpressionAssignment_0_1");
					put(grammarAccess.getBSCaseAccess().getBlockAssignment_0_3(), "rule__BSCase__BlockAssignment_0_3");
					put(grammarAccess.getBSCaseAccess().getBlockAssignment_1_2(), "rule__BSCase__BlockAssignment_1_2");
					put(grammarAccess.getBSCaseBlockAccess().getStatementsAssignment_1(), "rule__BSCaseBlock__StatementsAssignment_1");
					put(grammarAccess.getBSAssignmentExpressionAccess().getAssignmentOperatorAssignment_1_1(), "rule__BSAssignmentExpression__AssignmentOperatorAssignment_1_1");
					put(grammarAccess.getBSAssignmentExpressionAccess().getRightAssignment_1_2(), "rule__BSAssignmentExpression__RightAssignment_1_2");
					put(grammarAccess.getBSTernaryExpressionAccess().getMiddleAssignment_1_2(), "rule__BSTernaryExpression__MiddleAssignment_1_2");
					put(grammarAccess.getBSTernaryExpressionAccess().getRightAssignment_1_4(), "rule__BSTernaryExpression__RightAssignment_1_4");
					put(grammarAccess.getBSBooleanOrExpressionAccess().getRightAssignment_1_2(), "rule__BSBooleanOrExpression__RightAssignment_1_2");
					put(grammarAccess.getBSBooleanAndExpressionAccess().getRightAssignment_1_2(), "rule__BSBooleanAndExpression__RightAssignment_1_2");
					put(grammarAccess.getBSBitwiseOrExpressionAccess().getRightAssignment_1_2(), "rule__BSBitwiseOrExpression__RightAssignment_1_2");
					put(grammarAccess.getBSBitwiseXorExpressionAccess().getRightAssignment_1_2(), "rule__BSBitwiseXorExpression__RightAssignment_1_2");
					put(grammarAccess.getBSBitwiseAndExpressionAccess().getRightAssignment_1_2(), "rule__BSBitwiseAndExpression__RightAssignment_1_2");
					put(grammarAccess.getBSEqualityExpressionAccess().getOperatorAssignment_1_1(), "rule__BSEqualityExpression__OperatorAssignment_1_1");
					put(grammarAccess.getBSEqualityExpressionAccess().getRightAssignment_1_2(), "rule__BSEqualityExpression__RightAssignment_1_2");
					put(grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorAssignment_1_1(), "rule__BSOrderedRelationExpression__OperatorAssignment_1_1");
					put(grammarAccess.getBSOrderedRelationExpressionAccess().getRightAssignment_1_2(), "rule__BSOrderedRelationExpression__RightAssignment_1_2");
					put(grammarAccess.getBSBitwiseShiftExpressionAccess().getOperatorAssignment_1_1(), "rule__BSBitwiseShiftExpression__OperatorAssignment_1_1");
					put(grammarAccess.getBSBitwiseShiftExpressionAccess().getRightAssignment_1_2(), "rule__BSBitwiseShiftExpression__RightAssignment_1_2");
					put(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorAssignment_1_1(), "rule__BSPlusMinusOrStringConcatExpression__OperatorAssignment_1_1");
					put(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getRightAssignment_1_2(), "rule__BSPlusMinusOrStringConcatExpression__RightAssignment_1_2");
					put(grammarAccess.getBSMulDivOrModExpressionAccess().getOperatorAssignment_1_1(), "rule__BSMulDivOrModExpression__OperatorAssignment_1_1");
					put(grammarAccess.getBSMulDivOrModExpressionAccess().getRightAssignment_1_2(), "rule__BSMulDivOrModExpression__RightAssignment_1_2");
					put(grammarAccess.getBSCastOrNewExpressionAccess().getCastTypeAssignment_1_2(), "rule__BSCastOrNewExpression__CastTypeAssignment_1_2");
					put(grammarAccess.getBSCastOrNewExpressionAccess().getCastExprAssignment_1_4(), "rule__BSCastOrNewExpression__CastExprAssignment_1_4");
					put(grammarAccess.getBSCastOrNewExpressionAccess().getIsArrayAssignment_2_2_0(), "rule__BSCastOrNewExpression__IsArrayAssignment_2_2_0");
					put(grammarAccess.getBSCastOrNewExpressionAccess().getTypeAssignment_2_3(), "rule__BSCastOrNewExpression__TypeAssignment_2_3");
					put(grammarAccess.getBSCastOrNewExpressionAccess().getArgsAssignment_2_5_0(), "rule__BSCastOrNewExpression__ArgsAssignment_2_5_0");
					put(grammarAccess.getBSCastOrNewExpressionAccess().getArgsAssignment_2_5_1_1(), "rule__BSCastOrNewExpression__ArgsAssignment_2_5_1_1");
					put(grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorAssignment_1_1(), "rule__BSUnaryModifierExpression__OperatorAssignment_1_1");
					put(grammarAccess.getBSUnaryModifierExpressionAccess().getReceiverAssignment_1_2(), "rule__BSUnaryModifierExpression__ReceiverAssignment_1_2");
					put(grammarAccess.getBSInvokationExpressionAccess().getArgsAssignment_1_1_2_0(), "rule__BSInvokationExpression__ArgsAssignment_1_1_2_0");
					put(grammarAccess.getBSInvokationExpressionAccess().getArgsAssignment_1_1_2_1_1(), "rule__BSInvokationExpression__ArgsAssignment_1_1_2_1_1");
					put(grammarAccess.getBSInvokationExpressionAccess().getArgsAssignment_1_2_2_0(), "rule__BSInvokationExpression__ArgsAssignment_1_2_2_0");
					put(grammarAccess.getBSInvokationExpressionAccess().getArgsAssignment_1_2_2_1_1(), "rule__BSInvokationExpression__ArgsAssignment_1_2_2_1_1");
					put(grammarAccess.getBSInvokationExpressionAccess().getOperatorAssignment_1_3_1(), "rule__BSInvokationExpression__OperatorAssignment_1_3_1");
					put(grammarAccess.getBSTerminalExpressionAccess().getValueAssignment_0_1(), "rule__BSTerminalExpression__ValueAssignment_0_1");
					put(grammarAccess.getBSTerminalExpressionAccess().getValueAssignment_1_1(), "rule__BSTerminalExpression__ValueAssignment_1_1");
					put(grammarAccess.getBSTerminalExpressionAccess().getValueAssignment_2_1(), "rule__BSTerminalExpression__ValueAssignment_2_1");
					put(grammarAccess.getBSTerminalExpressionAccess().getRightAssignment_2_2_2(), "rule__BSTerminalExpression__RightAssignment_2_2_2");
					put(grammarAccess.getBSTerminalExpressionAccess().getValueAssignment_3_1(), "rule__BSTerminalExpression__ValueAssignment_3_1");
					put(grammarAccess.getBSTerminalExpressionAccess().getSymbolAssignment_10_1(), "rule__BSTerminalExpression__SymbolAssignment_10_1");
					put(grammarAccess.getBSTerminalExpressionAccess().getExpressionAssignment_11_2(), "rule__BSTerminalExpression__ExpressionAssignment_11_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.example.blorquescript.ui.contentassist.antlr.internal.InternalBlorqueScriptParser typedParser = (org.example.blorquescript.ui.contentassist.antlr.internal.InternalBlorqueScriptParser) parser;
			typedParser.entryRuleBSFile();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}
	
	public BlorqueScriptGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BlorqueScriptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
