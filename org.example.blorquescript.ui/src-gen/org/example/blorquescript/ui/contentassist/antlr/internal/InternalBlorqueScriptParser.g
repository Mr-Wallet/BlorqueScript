/*
 * generated by Xtext
 */
parser grammar InternalBlorqueScriptParser;

options {
	tokenVocab=InternalBlorqueScriptLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@header {
package org.example.blorquescript.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.example.blorquescript.services.BlorqueScriptGrammarAccess;

}

@members {
 
 	private BlorqueScriptGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("ExclamationMark", "'!'");
		tokenNameToValue.put("DollarSign", "'\u0024'");
		tokenNameToValue.put("PercentSign", "'\%'");
		tokenNameToValue.put("Ampersand", "'&'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("QuestionMark", "'?'");
		tokenNameToValue.put("CommercialAt", "'@'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("CircumflexAccent", "'^'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("VerticalLine", "'|'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("Tilde", "'~'");
		tokenNameToValue.put("ExclamationMarkEqualsSign", "'!='");
		tokenNameToValue.put("AmpersandAmpersand", "'&&'");
		tokenNameToValue.put("PlusSignPlusSign", "'++'");
		tokenNameToValue.put("HyphenMinusHyphenMinus", "'--'");
		tokenNameToValue.put("FullStopAsterisk", "'.*'");
		tokenNameToValue.put("LessThanSignLessThanSign", "'<<'");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("EqualsSignEqualsSign", "'=='");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("GreaterThanSignGreaterThanSign", "'>>'");
		tokenNameToValue.put("NL", "'NL'");
		tokenNameToValue.put("If", "'if'");
		tokenNameToValue.put("VerticalLineVerticalLine", "'||'");
		tokenNameToValue.put("SPC", "'SPC'");
		tokenNameToValue.put("TAB", "'TAB'");
		tokenNameToValue.put("For", "'for'");
		tokenNameToValue.put("New", "'new'");
		tokenNameToValue.put("Case", "'case'");
		tokenNameToValue.put("Else", "'else'");
		tokenNameToValue.put("Null", "'null'");
		tokenNameToValue.put("This", "'this'");
		tokenNameToValue.put("True", "'true'");
		tokenNameToValue.put("Break", "'break'");
		tokenNameToValue.put("Class", "'class'");
		tokenNameToValue.put("False", "'false'");
		tokenNameToValue.put("While", "'while'");
		tokenNameToValue.put("Client", "'client'");
		tokenNameToValue.put("Import", "'import'");
		tokenNameToValue.put("Number", "'number'");
		tokenNameToValue.put("Object", "'object'");
		tokenNameToValue.put("Parent", "'parent'");
		tokenNameToValue.put("Return", "'return'");
		tokenNameToValue.put("String", "'string'");
		tokenNameToValue.put("Switch", "'switch'");
		tokenNameToValue.put("Default", "'default'");
		tokenNameToValue.put("Package", "'package'");
		tokenNameToValue.put("Continue", "'continue'");
 	}
 	
    public void setGrammarAccess(BlorqueScriptGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleBSFile
entryRuleBSFile 
:
{ before(grammarAccess.getBSFileRule()); }
	 ruleBSFile
{ after(grammarAccess.getBSFileRule()); } 
	 EOF 
;

// Rule BSFile
ruleBSFile 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSFileAccess().getGroup()); }
(rule__BSFile__Group__0)
{ after(grammarAccess.getBSFileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSImport
entryRuleBSImport 
:
{ before(grammarAccess.getBSImportRule()); }
	 ruleBSImport
{ after(grammarAccess.getBSImportRule()); } 
	 EOF 
;

// Rule BSImport
ruleBSImport 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSImportAccess().getGroup()); }
(rule__BSImport__Group__0)
{ after(grammarAccess.getBSImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard 
:
{ before(grammarAccess.getQualifiedNameWithWildcardRule()); }
	 ruleQualifiedNameWithWildcard
{ after(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
(rule__QualifiedNameWithWildcard__Group__0)
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSClass
entryRuleBSClass 
:
{ before(grammarAccess.getBSClassRule()); }
	 ruleBSClass
{ after(grammarAccess.getBSClassRule()); } 
	 EOF 
;

// Rule BSClass
ruleBSClass 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSClassAccess().getGroup()); }
(rule__BSClass__Group__0)
{ after(grammarAccess.getBSClassAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSMember
entryRuleBSMember 
:
{ before(grammarAccess.getBSMemberRule()); }
	 ruleBSMember
{ after(grammarAccess.getBSMemberRule()); } 
	 EOF 
;

// Rule BSMember
ruleBSMember 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSMemberAccess().getAlternatives()); }
(rule__BSMember__Alternatives)
{ after(grammarAccess.getBSMemberAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSField
entryRuleBSField 
:
{ before(grammarAccess.getBSFieldRule()); }
	 ruleBSField
{ after(grammarAccess.getBSFieldRule()); } 
	 EOF 
;

// Rule BSField
ruleBSField 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSFieldAccess().getGroup()); }
(rule__BSField__Group__0)
{ after(grammarAccess.getBSFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSMethod
entryRuleBSMethod 
:
{ before(grammarAccess.getBSMethodRule()); }
	 ruleBSMethod
{ after(grammarAccess.getBSMethodRule()); } 
	 EOF 
;

// Rule BSMethod
ruleBSMethod 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSMethodAccess().getGroup()); }
(rule__BSMethod__Group__0)
{ after(grammarAccess.getBSMethodAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSParameter
entryRuleBSParameter 
:
{ before(grammarAccess.getBSParameterRule()); }
	 ruleBSParameter
{ after(grammarAccess.getBSParameterRule()); } 
	 EOF 
;

// Rule BSParameter
ruleBSParameter 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSParameterAccess().getGroup()); }
(rule__BSParameter__Group__0)
{ after(grammarAccess.getBSParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSMethodBody
entryRuleBSMethodBody 
:
{ before(grammarAccess.getBSMethodBodyRule()); }
	 ruleBSMethodBody
{ after(grammarAccess.getBSMethodBodyRule()); } 
	 EOF 
;

// Rule BSMethodBody
ruleBSMethodBody 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSMethodBodyAccess().getGroup()); }
(rule__BSMethodBody__Group__0)
{ after(grammarAccess.getBSMethodBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSStatement
entryRuleBSStatement 
:
{ before(grammarAccess.getBSStatementRule()); }
	 ruleBSStatement
{ after(grammarAccess.getBSStatementRule()); } 
	 EOF 
;

// Rule BSStatement
ruleBSStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSStatementAccess().getAlternatives()); }
(rule__BSStatement__Alternatives)
{ after(grammarAccess.getBSStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSReturn
entryRuleBSReturn 
:
{ before(grammarAccess.getBSReturnRule()); }
	 ruleBSReturn
{ after(grammarAccess.getBSReturnRule()); } 
	 EOF 
;

// Rule BSReturn
ruleBSReturn 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSReturnAccess().getGroup()); }
(rule__BSReturn__Group__0)
{ after(grammarAccess.getBSReturnAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSVariableDeclaration
entryRuleBSVariableDeclaration 
:
{ before(grammarAccess.getBSVariableDeclarationRule()); }
	 ruleBSVariableDeclaration
{ after(grammarAccess.getBSVariableDeclarationRule()); } 
	 EOF 
;

// Rule BSVariableDeclaration
ruleBSVariableDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSVariableDeclarationAccess().getGroup()); }
(rule__BSVariableDeclaration__Group__0)
{ after(grammarAccess.getBSVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSIfStatement
entryRuleBSIfStatement 
:
{ before(grammarAccess.getBSIfStatementRule()); }
	 ruleBSIfStatement
{ after(grammarAccess.getBSIfStatementRule()); } 
	 EOF 
;

// Rule BSIfStatement
ruleBSIfStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSIfStatementAccess().getGroup()); }
(rule__BSIfStatement__Group__0)
{ after(grammarAccess.getBSIfStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSWhileLoop
entryRuleBSWhileLoop 
:
{ before(grammarAccess.getBSWhileLoopRule()); }
	 ruleBSWhileLoop
{ after(grammarAccess.getBSWhileLoopRule()); } 
	 EOF 
;

// Rule BSWhileLoop
ruleBSWhileLoop 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSWhileLoopAccess().getGroup()); }
(rule__BSWhileLoop__Group__0)
{ after(grammarAccess.getBSWhileLoopAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSForLoop
entryRuleBSForLoop 
:
{ before(grammarAccess.getBSForLoopRule()); }
	 ruleBSForLoop
{ after(grammarAccess.getBSForLoopRule()); } 
	 EOF 
;

// Rule BSForLoop
ruleBSForLoop 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSForLoopAccess().getGroup()); }
(rule__BSForLoop__Group__0)
{ after(grammarAccess.getBSForLoopAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSSwitchStatement
entryRuleBSSwitchStatement 
:
{ before(grammarAccess.getBSSwitchStatementRule()); }
	 ruleBSSwitchStatement
{ after(grammarAccess.getBSSwitchStatementRule()); } 
	 EOF 
;

// Rule BSSwitchStatement
ruleBSSwitchStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSSwitchStatementAccess().getGroup()); }
(rule__BSSwitchStatement__Group__0)
{ after(grammarAccess.getBSSwitchStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSIfBlock
entryRuleBSIfBlock 
:
{ before(grammarAccess.getBSIfBlockRule()); }
	 ruleBSIfBlock
{ after(grammarAccess.getBSIfBlockRule()); } 
	 EOF 
;

// Rule BSIfBlock
ruleBSIfBlock 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSIfBlockAccess().getAlternatives()); }
(rule__BSIfBlock__Alternatives)
{ after(grammarAccess.getBSIfBlockAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSLoopBlock
entryRuleBSLoopBlock 
:
{ before(grammarAccess.getBSLoopBlockRule()); }
	 ruleBSLoopBlock
{ after(grammarAccess.getBSLoopBlockRule()); } 
	 EOF 
;

// Rule BSLoopBlock
ruleBSLoopBlock 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSLoopBlockAccess().getAlternatives()); }
(rule__BSLoopBlock__Alternatives)
{ after(grammarAccess.getBSLoopBlockAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSSwitchBlock
entryRuleBSSwitchBlock 
:
{ before(grammarAccess.getBSSwitchBlockRule()); }
	 ruleBSSwitchBlock
{ after(grammarAccess.getBSSwitchBlockRule()); } 
	 EOF 
;

// Rule BSSwitchBlock
ruleBSSwitchBlock 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSSwitchBlockAccess().getGroup()); }
(rule__BSSwitchBlock__Group__0)
{ after(grammarAccess.getBSSwitchBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSCase
entryRuleBSCase 
:
{ before(grammarAccess.getBSCaseRule()); }
	 ruleBSCase
{ after(grammarAccess.getBSCaseRule()); } 
	 EOF 
;

// Rule BSCase
ruleBSCase 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSCaseAccess().getAlternatives()); }
(rule__BSCase__Alternatives)
{ after(grammarAccess.getBSCaseAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSCaseBlock
entryRuleBSCaseBlock 
:
{ before(grammarAccess.getBSCaseBlockRule()); }
	 ruleBSCaseBlock
{ after(grammarAccess.getBSCaseBlockRule()); } 
	 EOF 
;

// Rule BSCaseBlock
ruleBSCaseBlock 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSCaseBlockAccess().getGroup()); }
(rule__BSCaseBlock__Group__0)
{ after(grammarAccess.getBSCaseBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleBSExpression
entryRuleBSExpression 
:
{ before(grammarAccess.getBSExpressionRule()); }
	 ruleBSExpression
{ after(grammarAccess.getBSExpressionRule()); } 
	 EOF 
;

// Rule BSExpression
ruleBSExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSExpressionAccess().getBSTernaryExpressionParserRuleCall()); }
	ruleBSTernaryExpression
{ after(grammarAccess.getBSExpressionAccess().getBSTernaryExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleBSTernaryExpression
entryRuleBSTernaryExpression 
:
{ before(grammarAccess.getBSTernaryExpressionRule()); }
	 ruleBSTernaryExpression
{ after(grammarAccess.getBSTernaryExpressionRule()); } 
	 EOF 
;

// Rule BSTernaryExpression
ruleBSTernaryExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSTernaryExpressionAccess().getGroup()); }
(rule__BSTernaryExpression__Group__0)
{ after(grammarAccess.getBSTernaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSBooleanOrExpression
entryRuleBSBooleanOrExpression 
:
{ before(grammarAccess.getBSBooleanOrExpressionRule()); }
	 ruleBSBooleanOrExpression
{ after(grammarAccess.getBSBooleanOrExpressionRule()); } 
	 EOF 
;

// Rule BSBooleanOrExpression
ruleBSBooleanOrExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSBooleanOrExpressionAccess().getGroup()); }
(rule__BSBooleanOrExpression__Group__0)
{ after(grammarAccess.getBSBooleanOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSBooleanAndExpression
entryRuleBSBooleanAndExpression 
:
{ before(grammarAccess.getBSBooleanAndExpressionRule()); }
	 ruleBSBooleanAndExpression
{ after(grammarAccess.getBSBooleanAndExpressionRule()); } 
	 EOF 
;

// Rule BSBooleanAndExpression
ruleBSBooleanAndExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSBooleanAndExpressionAccess().getGroup()); }
(rule__BSBooleanAndExpression__Group__0)
{ after(grammarAccess.getBSBooleanAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSBitwiseOrExpression
entryRuleBSBitwiseOrExpression 
:
{ before(grammarAccess.getBSBitwiseOrExpressionRule()); }
	 ruleBSBitwiseOrExpression
{ after(grammarAccess.getBSBitwiseOrExpressionRule()); } 
	 EOF 
;

// Rule BSBitwiseOrExpression
ruleBSBitwiseOrExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSBitwiseOrExpressionAccess().getGroup()); }
(rule__BSBitwiseOrExpression__Group__0)
{ after(grammarAccess.getBSBitwiseOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSBitwiseXorExpression
entryRuleBSBitwiseXorExpression 
:
{ before(grammarAccess.getBSBitwiseXorExpressionRule()); }
	 ruleBSBitwiseXorExpression
{ after(grammarAccess.getBSBitwiseXorExpressionRule()); } 
	 EOF 
;

// Rule BSBitwiseXorExpression
ruleBSBitwiseXorExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSBitwiseXorExpressionAccess().getGroup()); }
(rule__BSBitwiseXorExpression__Group__0)
{ after(grammarAccess.getBSBitwiseXorExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSBitwiseAndExpression
entryRuleBSBitwiseAndExpression 
:
{ before(grammarAccess.getBSBitwiseAndExpressionRule()); }
	 ruleBSBitwiseAndExpression
{ after(grammarAccess.getBSBitwiseAndExpressionRule()); } 
	 EOF 
;

// Rule BSBitwiseAndExpression
ruleBSBitwiseAndExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSBitwiseAndExpressionAccess().getGroup()); }
(rule__BSBitwiseAndExpression__Group__0)
{ after(grammarAccess.getBSBitwiseAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSEqualityExpression
entryRuleBSEqualityExpression 
:
{ before(grammarAccess.getBSEqualityExpressionRule()); }
	 ruleBSEqualityExpression
{ after(grammarAccess.getBSEqualityExpressionRule()); } 
	 EOF 
;

// Rule BSEqualityExpression
ruleBSEqualityExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSEqualityExpressionAccess().getGroup()); }
(rule__BSEqualityExpression__Group__0)
{ after(grammarAccess.getBSEqualityExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSOrderedRelationExpression
entryRuleBSOrderedRelationExpression 
:
{ before(grammarAccess.getBSOrderedRelationExpressionRule()); }
	 ruleBSOrderedRelationExpression
{ after(grammarAccess.getBSOrderedRelationExpressionRule()); } 
	 EOF 
;

// Rule BSOrderedRelationExpression
ruleBSOrderedRelationExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSOrderedRelationExpressionAccess().getGroup()); }
(rule__BSOrderedRelationExpression__Group__0)
{ after(grammarAccess.getBSOrderedRelationExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSBitwiseShiftExpression
entryRuleBSBitwiseShiftExpression 
:
{ before(grammarAccess.getBSBitwiseShiftExpressionRule()); }
	 ruleBSBitwiseShiftExpression
{ after(grammarAccess.getBSBitwiseShiftExpressionRule()); } 
	 EOF 
;

// Rule BSBitwiseShiftExpression
ruleBSBitwiseShiftExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSBitwiseShiftExpressionAccess().getGroup()); }
(rule__BSBitwiseShiftExpression__Group__0)
{ after(grammarAccess.getBSBitwiseShiftExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSPlusMinusOrStringConcatExpression
entryRuleBSPlusMinusOrStringConcatExpression 
:
{ before(grammarAccess.getBSPlusMinusOrStringConcatExpressionRule()); }
	 ruleBSPlusMinusOrStringConcatExpression
{ after(grammarAccess.getBSPlusMinusOrStringConcatExpressionRule()); } 
	 EOF 
;

// Rule BSPlusMinusOrStringConcatExpression
ruleBSPlusMinusOrStringConcatExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getGroup()); }
(rule__BSPlusMinusOrStringConcatExpression__Group__0)
{ after(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSMulDivOrModExpression
entryRuleBSMulDivOrModExpression 
:
{ before(grammarAccess.getBSMulDivOrModExpressionRule()); }
	 ruleBSMulDivOrModExpression
{ after(grammarAccess.getBSMulDivOrModExpressionRule()); } 
	 EOF 
;

// Rule BSMulDivOrModExpression
ruleBSMulDivOrModExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSMulDivOrModExpressionAccess().getGroup()); }
(rule__BSMulDivOrModExpression__Group__0)
{ after(grammarAccess.getBSMulDivOrModExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSCastOrNewExpression
entryRuleBSCastOrNewExpression 
:
{ before(grammarAccess.getBSCastOrNewExpressionRule()); }
	 ruleBSCastOrNewExpression
{ after(grammarAccess.getBSCastOrNewExpressionRule()); } 
	 EOF 
;

// Rule BSCastOrNewExpression
ruleBSCastOrNewExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getAlternatives()); }
(rule__BSCastOrNewExpression__Alternatives)
{ after(grammarAccess.getBSCastOrNewExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSUnaryModifierExpression
entryRuleBSUnaryModifierExpression 
:
{ before(grammarAccess.getBSUnaryModifierExpressionRule()); }
	 ruleBSUnaryModifierExpression
{ after(grammarAccess.getBSUnaryModifierExpressionRule()); } 
	 EOF 
;

// Rule BSUnaryModifierExpression
ruleBSUnaryModifierExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSUnaryModifierExpressionAccess().getAlternatives()); }
(rule__BSUnaryModifierExpression__Alternatives)
{ after(grammarAccess.getBSUnaryModifierExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSInvokationExpression
entryRuleBSInvokationExpression 
:
{ before(grammarAccess.getBSInvokationExpressionRule()); }
	 ruleBSInvokationExpression
{ after(grammarAccess.getBSInvokationExpressionRule()); } 
	 EOF 
;

// Rule BSInvokationExpression
ruleBSInvokationExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getGroup()); }
(rule__BSInvokationExpression__Group__0)
{ after(grammarAccess.getBSInvokationExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBSTerminalExpression
entryRuleBSTerminalExpression 
:
{ before(grammarAccess.getBSTerminalExpressionRule()); }
	 ruleBSTerminalExpression
{ after(grammarAccess.getBSTerminalExpressionRule()); } 
	 EOF 
;

// Rule BSTerminalExpression
ruleBSTerminalExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getAlternatives()); }
(rule__BSTerminalExpression__Alternatives)
{ after(grammarAccess.getBSTerminalExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__BSMember__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMemberAccess().getBSFieldParserRuleCall_0()); }
	ruleBSField
{ after(grammarAccess.getBSMemberAccess().getBSFieldParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBSMemberAccess().getBSMethodParserRuleCall_1()); }
	ruleBSMethod
{ after(grammarAccess.getBSMemberAccess().getBSMethodParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSStatementAccess().getBSVariableDeclarationParserRuleCall_0()); }
	ruleBSVariableDeclaration
{ after(grammarAccess.getBSStatementAccess().getBSVariableDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBSStatementAccess().getBSReturnParserRuleCall_1()); }
	ruleBSReturn
{ after(grammarAccess.getBSStatementAccess().getBSReturnParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBSStatementAccess().getGroup_2()); }
(rule__BSStatement__Group_2__0)
{ after(grammarAccess.getBSStatementAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getBSStatementAccess().getBSIfStatementParserRuleCall_3()); }
	ruleBSIfStatement
{ after(grammarAccess.getBSStatementAccess().getBSIfStatementParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getBSStatementAccess().getBSWhileLoopParserRuleCall_4()); }
	ruleBSWhileLoop
{ after(grammarAccess.getBSStatementAccess().getBSWhileLoopParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getBSStatementAccess().getBSForLoopParserRuleCall_5()); }
	ruleBSForLoop
{ after(grammarAccess.getBSStatementAccess().getBSForLoopParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getBSStatementAccess().getBSSwitchStatementParserRuleCall_6()); }
	ruleBSSwitchStatement
{ after(grammarAccess.getBSStatementAccess().getBSSwitchStatementParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfBlock__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfBlockAccess().getStatementsAssignment_0()); }
(rule__BSIfBlock__StatementsAssignment_0)
{ after(grammarAccess.getBSIfBlockAccess().getStatementsAssignment_0()); }
)

    |(
{ before(grammarAccess.getBSIfBlockAccess().getGroup_1()); }
(rule__BSIfBlock__Group_1__0)
{ after(grammarAccess.getBSIfBlockAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSLoopBlock__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSLoopBlockAccess().getStatementsAssignment_0()); }
(rule__BSLoopBlock__StatementsAssignment_0)
{ after(grammarAccess.getBSLoopBlockAccess().getStatementsAssignment_0()); }
)

    |(
{ before(grammarAccess.getBSLoopBlockAccess().getGroup_1()); }
(rule__BSLoopBlock__Group_1__0)
{ after(grammarAccess.getBSLoopBlockAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSCase__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCaseAccess().getGroup_0()); }
(rule__BSCase__Group_0__0)
{ after(grammarAccess.getBSCaseAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getBSCaseAccess().getGroup_1()); }
(rule__BSCase__Group_1__0)
{ after(grammarAccess.getBSCaseAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__BSEqualityExpression__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSEqualityExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_0()); }

	EqualsSignEqualsSign 

{ after(grammarAccess.getBSEqualityExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getBSEqualityExpressionAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1()); }

	ExclamationMarkEqualsSign 

{ after(grammarAccess.getBSEqualityExpressionAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSOrderedRelationExpression__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_0()); }

	LessThanSign 

{ after(grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_1()); }

	GreaterThanSign 

{ after(grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_2()); }

	LessThanSignEqualsSign 

{ after(grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_2()); }
)

    |(
{ before(grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3()); }

	GreaterThanSignEqualsSign 

{ after(grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseShiftExpression__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseShiftExpressionAccess().getOperatorLessThanSignLessThanSignKeyword_1_1_0_0()); }

	LessThanSignLessThanSign 

{ after(grammarAccess.getBSBitwiseShiftExpressionAccess().getOperatorLessThanSignLessThanSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getBSBitwiseShiftExpressionAccess().getOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_1()); }

	GreaterThanSignGreaterThanSign 

{ after(grammarAccess.getBSBitwiseShiftExpressionAccess().getOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSPlusMinusOrStringConcatExpression__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }

	PlusSign 

{ after(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }

	HyphenMinus 

{ after(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorCommercialAtKeyword_1_1_0_2()); }

	CommercialAt 

{ after(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorCommercialAtKeyword_1_1_0_2()); }
)

    |(
{ before(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorSPCKeyword_1_1_0_3()); }

	SPC 

{ after(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorSPCKeyword_1_1_0_3()); }
)

    |(
{ before(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorNLKeyword_1_1_0_4()); }

	NL 

{ after(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorNLKeyword_1_1_0_4()); }
)

    |(
{ before(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorTABKeyword_1_1_0_5()); }

	TAB 

{ after(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorTABKeyword_1_1_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSMulDivOrModExpression__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMulDivOrModExpressionAccess().getOperatorAsteriskKeyword_1_1_0_0()); }

	Asterisk 

{ after(grammarAccess.getBSMulDivOrModExpressionAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getBSMulDivOrModExpressionAccess().getOperatorSolidusKeyword_1_1_0_1()); }

	Solidus 

{ after(grammarAccess.getBSMulDivOrModExpressionAccess().getOperatorSolidusKeyword_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getBSMulDivOrModExpressionAccess().getOperatorPercentSignKeyword_1_1_0_2()); }

	PercentSign 

{ after(grammarAccess.getBSMulDivOrModExpressionAccess().getOperatorPercentSignKeyword_1_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getBSUnaryModifierExpressionParserRuleCall_0()); }
	ruleBSUnaryModifierExpression
{ after(grammarAccess.getBSCastOrNewExpressionAccess().getBSUnaryModifierExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getGroup_1()); }
(rule__BSCastOrNewExpression__Group_1__0)
{ after(grammarAccess.getBSCastOrNewExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getGroup_2()); }
(rule__BSCastOrNewExpression__Group_2__0)
{ after(grammarAccess.getBSCastOrNewExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__CastTypeAlternatives_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getCastTypeStringKeyword_1_2_0_0()); }

	String 

{ after(grammarAccess.getBSCastOrNewExpressionAccess().getCastTypeStringKeyword_1_2_0_0()); }
)

    |(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getCastTypeNumberKeyword_1_2_0_1()); }

	Number 

{ after(grammarAccess.getBSCastOrNewExpressionAccess().getCastTypeNumberKeyword_1_2_0_1()); }
)

    |(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getCastTypeObjectKeyword_1_2_0_2()); }

	Object 

{ after(grammarAccess.getBSCastOrNewExpressionAccess().getCastTypeObjectKeyword_1_2_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSUnaryModifierExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSUnaryModifierExpressionAccess().getBSInvokationExpressionParserRuleCall_0()); }
	ruleBSInvokationExpression
{ after(grammarAccess.getBSUnaryModifierExpressionAccess().getBSInvokationExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBSUnaryModifierExpressionAccess().getGroup_1()); }
(rule__BSUnaryModifierExpression__Group_1__0)
{ after(grammarAccess.getBSUnaryModifierExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSUnaryModifierExpression__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }

	PlusSign 

{ after(grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }

	HyphenMinus 

{ after(grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorExclamationMarkKeyword_1_1_0_2()); }

	ExclamationMark 

{ after(grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorExclamationMarkKeyword_1_1_0_2()); }
)

    |(
{ before(grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorTildeKeyword_1_1_0_3()); }

	Tilde 

{ after(grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorTildeKeyword_1_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_0()); }
(rule__BSInvokationExpression__Group_1_0__0)
{ after(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_1()); }
(rule__BSInvokationExpression__Group_1_1__0)
{ after(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_1()); }
)

    |(
{ before(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_2()); }
(rule__BSInvokationExpression__Group_1_2__0)
{ after(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_2()); }
)

    |(
{ before(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_3()); }
(rule__BSInvokationExpression__Group_1_3__0)
{ after(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__OperatorAlternatives_1_3_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getOperatorPlusSignPlusSignKeyword_1_3_1_0_0()); }

	PlusSignPlusSign 

{ after(grammarAccess.getBSInvokationExpressionAccess().getOperatorPlusSignPlusSignKeyword_1_3_1_0_0()); }
)

    |(
{ before(grammarAccess.getBSInvokationExpressionAccess().getOperatorHyphenMinusHyphenMinusKeyword_1_3_1_0_1()); }

	HyphenMinusHyphenMinus 

{ after(grammarAccess.getBSInvokationExpressionAccess().getOperatorHyphenMinusHyphenMinusKeyword_1_3_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getGroup_0()); }
(rule__BSTerminalExpression__Group_0__0)
{ after(grammarAccess.getBSTerminalExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getBSTerminalExpressionAccess().getGroup_1()); }
(rule__BSTerminalExpression__Group_1__0)
{ after(grammarAccess.getBSTerminalExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getBSTerminalExpressionAccess().getGroup_2()); }
(rule__BSTerminalExpression__Group_2__0)
{ after(grammarAccess.getBSTerminalExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getBSTerminalExpressionAccess().getGroup_3()); }
(rule__BSTerminalExpression__Group_3__0)
{ after(grammarAccess.getBSTerminalExpressionAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getBSTerminalExpressionAccess().getGroup_4()); }
(rule__BSTerminalExpression__Group_4__0)
{ after(grammarAccess.getBSTerminalExpressionAccess().getGroup_4()); }
)

    |(
{ before(grammarAccess.getBSTerminalExpressionAccess().getGroup_5()); }
(rule__BSTerminalExpression__Group_5__0)
{ after(grammarAccess.getBSTerminalExpressionAccess().getGroup_5()); }
)

    |(
{ before(grammarAccess.getBSTerminalExpressionAccess().getGroup_6()); }
(rule__BSTerminalExpression__Group_6__0)
{ after(grammarAccess.getBSTerminalExpressionAccess().getGroup_6()); }
)

    |(
{ before(grammarAccess.getBSTerminalExpressionAccess().getGroup_7()); }
(rule__BSTerminalExpression__Group_7__0)
{ after(grammarAccess.getBSTerminalExpressionAccess().getGroup_7()); }
)

    |(
{ before(grammarAccess.getBSTerminalExpressionAccess().getGroup_8()); }
(rule__BSTerminalExpression__Group_8__0)
{ after(grammarAccess.getBSTerminalExpressionAccess().getGroup_8()); }
)

    |(
{ before(grammarAccess.getBSTerminalExpressionAccess().getGroup_9()); }
(rule__BSTerminalExpression__Group_9__0)
{ after(grammarAccess.getBSTerminalExpressionAccess().getGroup_9()); }
)

    |(
{ before(grammarAccess.getBSTerminalExpressionAccess().getGroup_10()); }
(rule__BSTerminalExpression__Group_10__0)
{ after(grammarAccess.getBSTerminalExpressionAccess().getGroup_10()); }
)

    |(
{ before(grammarAccess.getBSTerminalExpressionAccess().getGroup_11()); }
(rule__BSTerminalExpression__Group_11__0)
{ after(grammarAccess.getBSTerminalExpressionAccess().getGroup_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__ValueAlternatives_3_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getValueTrueKeyword_3_1_0_0()); }

	True 

{ after(grammarAccess.getBSTerminalExpressionAccess().getValueTrueKeyword_3_1_0_0()); }
)

    |(
{ before(grammarAccess.getBSTerminalExpressionAccess().getValueFalseKeyword_3_1_0_1()); }

	False 

{ after(grammarAccess.getBSTerminalExpressionAccess().getValueFalseKeyword_3_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__BSFile__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSFile__Group__0__Impl
	rule__BSFile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSFile__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFileAccess().getGroup_0()); }
(rule__BSFile__Group_0__0)?
{ after(grammarAccess.getBSFileAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSFile__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSFile__Group__1__Impl
	rule__BSFile__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSFile__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFileAccess().getImportsAssignment_1()); }
(rule__BSFile__ImportsAssignment_1)*
{ after(grammarAccess.getBSFileAccess().getImportsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSFile__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSFile__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSFile__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFileAccess().getClassesAssignment_2()); }
(rule__BSFile__ClassesAssignment_2)*
{ after(grammarAccess.getBSFileAccess().getClassesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSFile__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSFile__Group_0__0__Impl
	rule__BSFile__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSFile__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFileAccess().getPackageKeyword_0_0()); }

	Package 

{ after(grammarAccess.getBSFileAccess().getPackageKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSFile__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSFile__Group_0__1__Impl
	rule__BSFile__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSFile__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFileAccess().getNameAssignment_0_1()); }
(rule__BSFile__NameAssignment_0_1)
{ after(grammarAccess.getBSFileAccess().getNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSFile__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSFile__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSFile__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFileAccess().getSemicolonKeyword_0_2()); }

	Semicolon 

{ after(grammarAccess.getBSFileAccess().getSemicolonKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSImport__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSImport__Group__0__Impl
	rule__BSImport__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSImport__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSImportAccess().getImportKeyword_0()); }

	Import 

{ after(grammarAccess.getBSImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSImport__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSImport__Group__1__Impl
	rule__BSImport__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSImport__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSImportAccess().getImportedNamespaceAssignment_1()); }
(rule__BSImport__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getBSImportAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSImport__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSImport__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSImport__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSImportAccess().getSemicolonKeyword_2()); }

	Semicolon 

{ after(grammarAccess.getBSImportAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedNameWithWildcard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__0__Impl
	rule__QualifiedNameWithWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
(
	FullStopAsterisk 
)?
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	FullStop 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSClass__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSClass__Group__0__Impl
	rule__BSClass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSClass__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSClassAccess().getClassKeyword_0()); }

	Class 

{ after(grammarAccess.getBSClassAccess().getClassKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSClass__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSClass__Group__1__Impl
	rule__BSClass__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSClass__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSClassAccess().getNameAssignment_1()); }
(rule__BSClass__NameAssignment_1)
{ after(grammarAccess.getBSClassAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSClass__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSClass__Group__2__Impl
	rule__BSClass__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSClass__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSClassAccess().getGroup_2()); }
(rule__BSClass__Group_2__0)?
{ after(grammarAccess.getBSClassAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSClass__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSClass__Group__3__Impl
	rule__BSClass__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BSClass__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSClassAccess().getLeftCurlyBracketKeyword_3()); }

	LeftCurlyBracket 

{ after(grammarAccess.getBSClassAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSClass__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSClass__Group__4__Impl
	rule__BSClass__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BSClass__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSClassAccess().getMembersAssignment_4()); }
(rule__BSClass__MembersAssignment_4)*
{ after(grammarAccess.getBSClassAccess().getMembersAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSClass__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSClass__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSClass__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSClassAccess().getRightCurlyBracketKeyword_5()); }

	RightCurlyBracket 

{ after(grammarAccess.getBSClassAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__BSClass__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSClass__Group_2__0__Impl
	rule__BSClass__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSClass__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSClassAccess().getColonKeyword_2_0()); }

	Colon 

{ after(grammarAccess.getBSClassAccess().getColonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSClass__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSClass__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSClass__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSClassAccess().getSuperclassAssignment_2_1()); }
(rule__BSClass__SuperclassAssignment_2_1)
{ after(grammarAccess.getBSClassAccess().getSuperclassAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSField__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSField__Group__0__Impl
	rule__BSField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSField__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFieldAccess().getTypeAssignment_0()); }
(rule__BSField__TypeAssignment_0)
{ after(grammarAccess.getBSFieldAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSField__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSField__Group__1__Impl
	rule__BSField__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSField__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFieldAccess().getNameAssignment_1()); }
(rule__BSField__NameAssignment_1)
{ after(grammarAccess.getBSFieldAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSField__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSField__Group__2__Impl
	rule__BSField__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSField__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFieldAccess().getGroup_2()); }
(rule__BSField__Group_2__0)?
{ after(grammarAccess.getBSFieldAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSField__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSField__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSField__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFieldAccess().getSemicolonKeyword_3()); }

	Semicolon 

{ after(grammarAccess.getBSFieldAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BSField__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSField__Group_2__0__Impl
	rule__BSField__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSField__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFieldAccess().getIsArrayAssignment_2_0()); }
(rule__BSField__IsArrayAssignment_2_0)
{ after(grammarAccess.getBSFieldAccess().getIsArrayAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSField__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSField__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSField__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFieldAccess().getRightSquareBracketKeyword_2_1()); }

	RightSquareBracket 

{ after(grammarAccess.getBSFieldAccess().getRightSquareBracketKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSMethod__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMethod__Group__0__Impl
	rule__BSMethod__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethod__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodAccess().getTypeAssignment_0()); }
(rule__BSMethod__TypeAssignment_0)
{ after(grammarAccess.getBSMethodAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSMethod__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMethod__Group__1__Impl
	rule__BSMethod__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethod__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodAccess().getNameAssignment_1()); }
(rule__BSMethod__NameAssignment_1)
{ after(grammarAccess.getBSMethodAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSMethod__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMethod__Group__2__Impl
	rule__BSMethod__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethod__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodAccess().getLeftParenthesisKeyword_2()); }

	LeftParenthesis 

{ after(grammarAccess.getBSMethodAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSMethod__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMethod__Group__3__Impl
	rule__BSMethod__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethod__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodAccess().getGroup_3()); }
(rule__BSMethod__Group_3__0)?
{ after(grammarAccess.getBSMethodAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSMethod__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMethod__Group__4__Impl
	rule__BSMethod__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethod__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodAccess().getRightParenthesisKeyword_4()); }

	RightParenthesis 

{ after(grammarAccess.getBSMethodAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSMethod__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMethod__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethod__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodAccess().getBodyAssignment_5()); }
(rule__BSMethod__BodyAssignment_5)
{ after(grammarAccess.getBSMethodAccess().getBodyAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__BSMethod__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMethod__Group_3__0__Impl
	rule__BSMethod__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethod__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodAccess().getParamsAssignment_3_0()); }
(rule__BSMethod__ParamsAssignment_3_0)
{ after(grammarAccess.getBSMethodAccess().getParamsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSMethod__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMethod__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethod__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodAccess().getGroup_3_1()); }
(rule__BSMethod__Group_3_1__0)*
{ after(grammarAccess.getBSMethodAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSMethod__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMethod__Group_3_1__0__Impl
	rule__BSMethod__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethod__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodAccess().getCommaKeyword_3_1_0()); }

	Comma 

{ after(grammarAccess.getBSMethodAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSMethod__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMethod__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethod__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodAccess().getParamsAssignment_3_1_1()); }
(rule__BSMethod__ParamsAssignment_3_1_1)
{ after(grammarAccess.getBSMethodAccess().getParamsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSParameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSParameter__Group__0__Impl
	rule__BSParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSParameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSParameterAccess().getTypeAssignment_0()); }
(rule__BSParameter__TypeAssignment_0)
{ after(grammarAccess.getBSParameterAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSParameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSParameter__Group__1__Impl
	rule__BSParameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSParameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSParameterAccess().getNameAssignment_1()); }
(rule__BSParameter__NameAssignment_1)
{ after(grammarAccess.getBSParameterAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSParameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSParameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSParameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSParameterAccess().getGroup_2()); }
(rule__BSParameter__Group_2__0)?
{ after(grammarAccess.getBSParameterAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSParameter__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSParameter__Group_2__0__Impl
	rule__BSParameter__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSParameter__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSParameterAccess().getIsArrayAssignment_2_0()); }
(rule__BSParameter__IsArrayAssignment_2_0)
{ after(grammarAccess.getBSParameterAccess().getIsArrayAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSParameter__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSParameter__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSParameter__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSParameterAccess().getRightSquareBracketKeyword_2_1()); }

	RightSquareBracket 

{ after(grammarAccess.getBSParameterAccess().getRightSquareBracketKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSMethodBody__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMethodBody__Group__0__Impl
	rule__BSMethodBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethodBody__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodBodyAccess().getBSMethodBodyAction_0()); }
(

)
{ after(grammarAccess.getBSMethodBodyAccess().getBSMethodBodyAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSMethodBody__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMethodBody__Group__1__Impl
	rule__BSMethodBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethodBody__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodBodyAccess().getLeftCurlyBracketKeyword_1()); }

	LeftCurlyBracket 

{ after(grammarAccess.getBSMethodBodyAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSMethodBody__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMethodBody__Group__2__Impl
	rule__BSMethodBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethodBody__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodBodyAccess().getStatementsAssignment_2()); }
(rule__BSMethodBody__StatementsAssignment_2)*
{ after(grammarAccess.getBSMethodBodyAccess().getStatementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSMethodBody__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMethodBody__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethodBody__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodBodyAccess().getRightCurlyBracketKeyword_3()); }

	RightCurlyBracket 

{ after(grammarAccess.getBSMethodBodyAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BSStatement__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSStatement__Group_2__0__Impl
	rule__BSStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSStatement__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSStatementAccess().getBSExpressionParserRuleCall_2_0()); }
	ruleBSExpression
{ after(grammarAccess.getBSStatementAccess().getBSExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSStatement__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSStatement__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSStatementAccess().getSemicolonKeyword_2_1()); }

	Semicolon 

{ after(grammarAccess.getBSStatementAccess().getSemicolonKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSReturn__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSReturn__Group__0__Impl
	rule__BSReturn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSReturn__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSReturnAccess().getReturnKeyword_0()); }

	Return 

{ after(grammarAccess.getBSReturnAccess().getReturnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSReturn__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSReturn__Group__1__Impl
	rule__BSReturn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSReturn__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSReturnAccess().getExpressionAssignment_1()); }
(rule__BSReturn__ExpressionAssignment_1)
{ after(grammarAccess.getBSReturnAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSReturn__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSReturn__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSReturn__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSReturnAccess().getSemicolonKeyword_2()); }

	Semicolon 

{ after(grammarAccess.getBSReturnAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSVariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSVariableDeclaration__Group__0__Impl
	rule__BSVariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSVariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSVariableDeclarationAccess().getTypeAssignment_0()); }
(rule__BSVariableDeclaration__TypeAssignment_0)
{ after(grammarAccess.getBSVariableDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSVariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSVariableDeclaration__Group__1__Impl
	rule__BSVariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSVariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSVariableDeclarationAccess().getNameAssignment_1()); }
(rule__BSVariableDeclaration__NameAssignment_1)
{ after(grammarAccess.getBSVariableDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSVariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSVariableDeclaration__Group__2__Impl
	rule__BSVariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSVariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSVariableDeclarationAccess().getGroup_2()); }
(rule__BSVariableDeclaration__Group_2__0)?
{ after(grammarAccess.getBSVariableDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSVariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSVariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSVariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSVariableDeclarationAccess().getSemicolonKeyword_3()); }

	Semicolon 

{ after(grammarAccess.getBSVariableDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BSVariableDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSVariableDeclaration__Group_2__0__Impl
	rule__BSVariableDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSVariableDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSVariableDeclarationAccess().getEqualsSignKeyword_2_0()); }

	EqualsSign 

{ after(grammarAccess.getBSVariableDeclarationAccess().getEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSVariableDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSVariableDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSVariableDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSVariableDeclarationAccess().getExpressionAssignment_2_1()); }
(rule__BSVariableDeclaration__ExpressionAssignment_2_1)
{ after(grammarAccess.getBSVariableDeclarationAccess().getExpressionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSIfStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSIfStatement__Group__0__Impl
	rule__BSIfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfStatementAccess().getIfKeyword_0()); }

	If 

{ after(grammarAccess.getBSIfStatementAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSIfStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSIfStatement__Group__1__Impl
	rule__BSIfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfStatementAccess().getLeftParenthesisKeyword_1()); }

	LeftParenthesis 

{ after(grammarAccess.getBSIfStatementAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSIfStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSIfStatement__Group__2__Impl
	rule__BSIfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfStatementAccess().getExpressionAssignment_2()); }
(rule__BSIfStatement__ExpressionAssignment_2)
{ after(grammarAccess.getBSIfStatementAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSIfStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSIfStatement__Group__3__Impl
	rule__BSIfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfStatementAccess().getRightParenthesisKeyword_3()); }

	RightParenthesis 

{ after(grammarAccess.getBSIfStatementAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSIfStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSIfStatement__Group__4__Impl
	rule__BSIfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfStatementAccess().getThenBlockAssignment_4()); }
(rule__BSIfStatement__ThenBlockAssignment_4)
{ after(grammarAccess.getBSIfStatementAccess().getThenBlockAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSIfStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSIfStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfStatementAccess().getGroup_5()); }
(rule__BSIfStatement__Group_5__0)?
{ after(grammarAccess.getBSIfStatementAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__BSIfStatement__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSIfStatement__Group_5__0__Impl
	rule__BSIfStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfStatement__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfStatementAccess().getElseKeyword_5_0()); }
(
	Else 
)
{ after(grammarAccess.getBSIfStatementAccess().getElseKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSIfStatement__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSIfStatement__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfStatement__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfStatementAccess().getElseBlockAssignment_5_1()); }
(rule__BSIfStatement__ElseBlockAssignment_5_1)
{ after(grammarAccess.getBSIfStatementAccess().getElseBlockAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSWhileLoop__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSWhileLoop__Group__0__Impl
	rule__BSWhileLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSWhileLoop__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSWhileLoopAccess().getWhileKeyword_0()); }

	While 

{ after(grammarAccess.getBSWhileLoopAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSWhileLoop__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSWhileLoop__Group__1__Impl
	rule__BSWhileLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSWhileLoop__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSWhileLoopAccess().getLeftParenthesisKeyword_1()); }

	LeftParenthesis 

{ after(grammarAccess.getBSWhileLoopAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSWhileLoop__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSWhileLoop__Group__2__Impl
	rule__BSWhileLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSWhileLoop__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSWhileLoopAccess().getExpressionAssignment_2()); }
(rule__BSWhileLoop__ExpressionAssignment_2)
{ after(grammarAccess.getBSWhileLoopAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSWhileLoop__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSWhileLoop__Group__3__Impl
	rule__BSWhileLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BSWhileLoop__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSWhileLoopAccess().getRightParenthesisKeyword_3()); }

	RightParenthesis 

{ after(grammarAccess.getBSWhileLoopAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSWhileLoop__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSWhileLoop__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSWhileLoop__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSWhileLoopAccess().getBlockAssignment_4()); }
(rule__BSWhileLoop__BlockAssignment_4)
{ after(grammarAccess.getBSWhileLoopAccess().getBlockAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__BSForLoop__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSForLoop__Group__0__Impl
	rule__BSForLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSForLoop__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSForLoopAccess().getForKeyword_0()); }

	For 

{ after(grammarAccess.getBSForLoopAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSForLoop__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSForLoop__Group__1__Impl
	rule__BSForLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSForLoop__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSForLoopAccess().getLeftParenthesisKeyword_1()); }

	LeftParenthesis 

{ after(grammarAccess.getBSForLoopAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSForLoop__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSForLoop__Group__2__Impl
	rule__BSForLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSForLoop__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSForLoopAccess().getLeftAssignment_2()); }
(rule__BSForLoop__LeftAssignment_2)
{ after(grammarAccess.getBSForLoopAccess().getLeftAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSForLoop__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSForLoop__Group__3__Impl
	rule__BSForLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BSForLoop__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSForLoopAccess().getSemicolonKeyword_3()); }

	Semicolon 

{ after(grammarAccess.getBSForLoopAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSForLoop__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSForLoop__Group__4__Impl
	rule__BSForLoop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BSForLoop__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSForLoopAccess().getMiddleAssignment_4()); }
(rule__BSForLoop__MiddleAssignment_4)
{ after(grammarAccess.getBSForLoopAccess().getMiddleAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSForLoop__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSForLoop__Group__5__Impl
	rule__BSForLoop__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__BSForLoop__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSForLoopAccess().getSemicolonKeyword_5()); }

	Semicolon 

{ after(grammarAccess.getBSForLoopAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSForLoop__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSForLoop__Group__6__Impl
	rule__BSForLoop__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__BSForLoop__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSForLoopAccess().getRightAssignment_6()); }
(rule__BSForLoop__RightAssignment_6)
{ after(grammarAccess.getBSForLoopAccess().getRightAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSForLoop__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSForLoop__Group__7__Impl
	rule__BSForLoop__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__BSForLoop__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSForLoopAccess().getRightParenthesisKeyword_7()); }

	RightParenthesis 

{ after(grammarAccess.getBSForLoopAccess().getRightParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSForLoop__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSForLoop__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSForLoop__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSForLoopAccess().getBlockAssignment_8()); }
(rule__BSForLoop__BlockAssignment_8)
{ after(grammarAccess.getBSForLoopAccess().getBlockAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__BSSwitchStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSSwitchStatement__Group__0__Impl
	rule__BSSwitchStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSSwitchStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSSwitchStatementAccess().getSwitchKeyword_0()); }

	Switch 

{ after(grammarAccess.getBSSwitchStatementAccess().getSwitchKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSSwitchStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSSwitchStatement__Group__1__Impl
	rule__BSSwitchStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSSwitchStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSSwitchStatementAccess().getStringSwitchAssignment_1()); }
(rule__BSSwitchStatement__StringSwitchAssignment_1)?
{ after(grammarAccess.getBSSwitchStatementAccess().getStringSwitchAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSSwitchStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSSwitchStatement__Group__2__Impl
	rule__BSSwitchStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSSwitchStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSSwitchStatementAccess().getLeftParenthesisKeyword_2()); }

	LeftParenthesis 

{ after(grammarAccess.getBSSwitchStatementAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSSwitchStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSSwitchStatement__Group__3__Impl
	rule__BSSwitchStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BSSwitchStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSSwitchStatementAccess().getExpressionAssignment_3()); }
(rule__BSSwitchStatement__ExpressionAssignment_3)
{ after(grammarAccess.getBSSwitchStatementAccess().getExpressionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSSwitchStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSSwitchStatement__Group__4__Impl
	rule__BSSwitchStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BSSwitchStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSSwitchStatementAccess().getRightParenthesisKeyword_4()); }

	RightParenthesis 

{ after(grammarAccess.getBSSwitchStatementAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSSwitchStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSSwitchStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSSwitchStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSSwitchStatementAccess().getBlockAssignment_5()); }
(rule__BSSwitchStatement__BlockAssignment_5)
{ after(grammarAccess.getBSSwitchStatementAccess().getBlockAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__BSIfBlock__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSIfBlock__Group_1__0__Impl
	rule__BSIfBlock__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfBlock__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfBlockAccess().getBSIfBlockAction_1_0()); }
(

)
{ after(grammarAccess.getBSIfBlockAccess().getBSIfBlockAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSIfBlock__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSIfBlock__Group_1__1__Impl
	rule__BSIfBlock__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfBlock__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfBlockAccess().getLeftCurlyBracketKeyword_1_1()); }

	LeftCurlyBracket 

{ after(grammarAccess.getBSIfBlockAccess().getLeftCurlyBracketKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSIfBlock__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSIfBlock__Group_1__2__Impl
	rule__BSIfBlock__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfBlock__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfBlockAccess().getStatementsAssignment_1_2()); }
(rule__BSIfBlock__StatementsAssignment_1_2)*
{ after(grammarAccess.getBSIfBlockAccess().getStatementsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSIfBlock__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSIfBlock__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfBlock__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfBlockAccess().getRightCurlyBracketKeyword_1_3()); }

	RightCurlyBracket 

{ after(grammarAccess.getBSIfBlockAccess().getRightCurlyBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BSLoopBlock__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSLoopBlock__Group_1__0__Impl
	rule__BSLoopBlock__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSLoopBlock__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSLoopBlockAccess().getBSLoopBlockAction_1_0()); }
(

)
{ after(grammarAccess.getBSLoopBlockAccess().getBSLoopBlockAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSLoopBlock__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSLoopBlock__Group_1__1__Impl
	rule__BSLoopBlock__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSLoopBlock__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSLoopBlockAccess().getLeftCurlyBracketKeyword_1_1()); }

	LeftCurlyBracket 

{ after(grammarAccess.getBSLoopBlockAccess().getLeftCurlyBracketKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSLoopBlock__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSLoopBlock__Group_1__2__Impl
	rule__BSLoopBlock__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSLoopBlock__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSLoopBlockAccess().getStatementsAssignment_1_2()); }
(rule__BSLoopBlock__StatementsAssignment_1_2)*
{ after(grammarAccess.getBSLoopBlockAccess().getStatementsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSLoopBlock__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSLoopBlock__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSLoopBlock__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSLoopBlockAccess().getRightCurlyBracketKeyword_1_3()); }

	RightCurlyBracket 

{ after(grammarAccess.getBSLoopBlockAccess().getRightCurlyBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BSSwitchBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSSwitchBlock__Group__0__Impl
	rule__BSSwitchBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSSwitchBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSSwitchBlockAccess().getBSSwitchBlockAction_0()); }
(

)
{ after(grammarAccess.getBSSwitchBlockAccess().getBSSwitchBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSSwitchBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSSwitchBlock__Group__1__Impl
	rule__BSSwitchBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSSwitchBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSSwitchBlockAccess().getLeftCurlyBracketKeyword_1()); }

	LeftCurlyBracket 

{ after(grammarAccess.getBSSwitchBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSSwitchBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSSwitchBlock__Group__2__Impl
	rule__BSSwitchBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSSwitchBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSSwitchBlockAccess().getCasesAssignment_2()); }
(rule__BSSwitchBlock__CasesAssignment_2)*
{ after(grammarAccess.getBSSwitchBlockAccess().getCasesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSSwitchBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSSwitchBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSSwitchBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSSwitchBlockAccess().getRightCurlyBracketKeyword_3()); }

	RightCurlyBracket 

{ after(grammarAccess.getBSSwitchBlockAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BSCase__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCase__Group_0__0__Impl
	rule__BSCase__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCase__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCaseAccess().getCaseKeyword_0_0()); }

	Case 

{ after(grammarAccess.getBSCaseAccess().getCaseKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCase__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCase__Group_0__1__Impl
	rule__BSCase__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCase__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCaseAccess().getExpressionAssignment_0_1()); }
(rule__BSCase__ExpressionAssignment_0_1)
{ after(grammarAccess.getBSCaseAccess().getExpressionAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCase__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCase__Group_0__2__Impl
	rule__BSCase__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCase__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCaseAccess().getColonKeyword_0_2()); }

	Colon 

{ after(grammarAccess.getBSCaseAccess().getColonKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCase__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCase__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCase__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCaseAccess().getBlockAssignment_0_3()); }
(rule__BSCase__BlockAssignment_0_3)
{ after(grammarAccess.getBSCaseAccess().getBlockAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BSCase__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCase__Group_1__0__Impl
	rule__BSCase__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCase__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCaseAccess().getDefaultKeyword_1_0()); }

	Default 

{ after(grammarAccess.getBSCaseAccess().getDefaultKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCase__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCase__Group_1__1__Impl
	rule__BSCase__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCase__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCaseAccess().getColonKeyword_1_1()); }

	Colon 

{ after(grammarAccess.getBSCaseAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCase__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCase__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCase__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCaseAccess().getBlockAssignment_1_2()); }
(rule__BSCase__BlockAssignment_1_2)
{ after(grammarAccess.getBSCaseAccess().getBlockAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSCaseBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCaseBlock__Group__0__Impl
	rule__BSCaseBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCaseBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCaseBlockAccess().getBSCaseBlockAction_0()); }
(

)
{ after(grammarAccess.getBSCaseBlockAccess().getBSCaseBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCaseBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCaseBlock__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCaseBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCaseBlockAccess().getStatementsAssignment_1()); }
(rule__BSCaseBlock__StatementsAssignment_1)*
{ after(grammarAccess.getBSCaseBlockAccess().getStatementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSTernaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTernaryExpression__Group__0__Impl
	rule__BSTernaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTernaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTernaryExpressionAccess().getBSBooleanOrExpressionParserRuleCall_0()); }
	ruleBSBooleanOrExpression
{ after(grammarAccess.getBSTernaryExpressionAccess().getBSBooleanOrExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTernaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTernaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTernaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTernaryExpressionAccess().getGroup_1()); }
(rule__BSTernaryExpression__Group_1__0)?
{ after(grammarAccess.getBSTernaryExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSTernaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTernaryExpression__Group_1__0__Impl
	rule__BSTernaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTernaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTernaryExpressionAccess().getBSTernaryExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBSTernaryExpressionAccess().getBSTernaryExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTernaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTernaryExpression__Group_1__1__Impl
	rule__BSTernaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTernaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTernaryExpressionAccess().getQuestionMarkKeyword_1_1()); }

	QuestionMark 

{ after(grammarAccess.getBSTernaryExpressionAccess().getQuestionMarkKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTernaryExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTernaryExpression__Group_1__2__Impl
	rule__BSTernaryExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTernaryExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTernaryExpressionAccess().getMiddleAssignment_1_2()); }
(rule__BSTernaryExpression__MiddleAssignment_1_2)
{ after(grammarAccess.getBSTernaryExpressionAccess().getMiddleAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTernaryExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTernaryExpression__Group_1__3__Impl
	rule__BSTernaryExpression__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTernaryExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTernaryExpressionAccess().getColonKeyword_1_3()); }

	Colon 

{ after(grammarAccess.getBSTernaryExpressionAccess().getColonKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTernaryExpression__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTernaryExpression__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTernaryExpression__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTernaryExpressionAccess().getRightAssignment_1_4()); }
(rule__BSTernaryExpression__RightAssignment_1_4)
{ after(grammarAccess.getBSTernaryExpressionAccess().getRightAssignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__BSBooleanOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBooleanOrExpression__Group__0__Impl
	rule__BSBooleanOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBooleanOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBooleanOrExpressionAccess().getBSBooleanAndExpressionParserRuleCall_0()); }
	ruleBSBooleanAndExpression
{ after(grammarAccess.getBSBooleanOrExpressionAccess().getBSBooleanAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBooleanOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBooleanOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBooleanOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBooleanOrExpressionAccess().getGroup_1()); }
(rule__BSBooleanOrExpression__Group_1__0)*
{ after(grammarAccess.getBSBooleanOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSBooleanOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBooleanOrExpression__Group_1__0__Impl
	rule__BSBooleanOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBooleanOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBooleanOrExpressionAccess().getBSBooleanOrExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBSBooleanOrExpressionAccess().getBSBooleanOrExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBooleanOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBooleanOrExpression__Group_1__1__Impl
	rule__BSBooleanOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBooleanOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBooleanOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1()); }

	VerticalLineVerticalLine 

{ after(grammarAccess.getBSBooleanOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBooleanOrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBooleanOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBooleanOrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBooleanOrExpressionAccess().getRightAssignment_1_2()); }
(rule__BSBooleanOrExpression__RightAssignment_1_2)
{ after(grammarAccess.getBSBooleanOrExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSBooleanAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBooleanAndExpression__Group__0__Impl
	rule__BSBooleanAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBooleanAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBooleanAndExpressionAccess().getBSBitwiseOrExpressionParserRuleCall_0()); }
	ruleBSBitwiseOrExpression
{ after(grammarAccess.getBSBooleanAndExpressionAccess().getBSBitwiseOrExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBooleanAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBooleanAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBooleanAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBooleanAndExpressionAccess().getGroup_1()); }
(rule__BSBooleanAndExpression__Group_1__0)*
{ after(grammarAccess.getBSBooleanAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSBooleanAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBooleanAndExpression__Group_1__0__Impl
	rule__BSBooleanAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBooleanAndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBooleanAndExpressionAccess().getBSBooleanAndExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBSBooleanAndExpressionAccess().getBSBooleanAndExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBooleanAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBooleanAndExpression__Group_1__1__Impl
	rule__BSBooleanAndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBooleanAndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBooleanAndExpressionAccess().getAmpersandAmpersandKeyword_1_1()); }

	AmpersandAmpersand 

{ after(grammarAccess.getBSBooleanAndExpressionAccess().getAmpersandAmpersandKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBooleanAndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBooleanAndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBooleanAndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBooleanAndExpressionAccess().getRightAssignment_1_2()); }
(rule__BSBooleanAndExpression__RightAssignment_1_2)
{ after(grammarAccess.getBSBooleanAndExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSBitwiseOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseOrExpression__Group__0__Impl
	rule__BSBitwiseOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseOrExpressionAccess().getBSBitwiseXorExpressionParserRuleCall_0()); }
	ruleBSBitwiseXorExpression
{ after(grammarAccess.getBSBitwiseOrExpressionAccess().getBSBitwiseXorExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBitwiseOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseOrExpressionAccess().getGroup_1()); }
(rule__BSBitwiseOrExpression__Group_1__0)*
{ after(grammarAccess.getBSBitwiseOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSBitwiseOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseOrExpression__Group_1__0__Impl
	rule__BSBitwiseOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseOrExpressionAccess().getBSBitwiseOrExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBSBitwiseOrExpressionAccess().getBSBitwiseOrExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBitwiseOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseOrExpression__Group_1__1__Impl
	rule__BSBitwiseOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseOrExpressionAccess().getVerticalLineKeyword_1_1()); }

	VerticalLine 

{ after(grammarAccess.getBSBitwiseOrExpressionAccess().getVerticalLineKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBitwiseOrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseOrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseOrExpressionAccess().getRightAssignment_1_2()); }
(rule__BSBitwiseOrExpression__RightAssignment_1_2)
{ after(grammarAccess.getBSBitwiseOrExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSBitwiseXorExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseXorExpression__Group__0__Impl
	rule__BSBitwiseXorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseXorExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseXorExpressionAccess().getBSBitwiseAndExpressionParserRuleCall_0()); }
	ruleBSBitwiseAndExpression
{ after(grammarAccess.getBSBitwiseXorExpressionAccess().getBSBitwiseAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBitwiseXorExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseXorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseXorExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseXorExpressionAccess().getGroup_1()); }
(rule__BSBitwiseXorExpression__Group_1__0)*
{ after(grammarAccess.getBSBitwiseXorExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSBitwiseXorExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseXorExpression__Group_1__0__Impl
	rule__BSBitwiseXorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseXorExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseXorExpressionAccess().getBSBitwiseXorExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBSBitwiseXorExpressionAccess().getBSBitwiseXorExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBitwiseXorExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseXorExpression__Group_1__1__Impl
	rule__BSBitwiseXorExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseXorExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseXorExpressionAccess().getCircumflexAccentKeyword_1_1()); }

	CircumflexAccent 

{ after(grammarAccess.getBSBitwiseXorExpressionAccess().getCircumflexAccentKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBitwiseXorExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseXorExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseXorExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseXorExpressionAccess().getRightAssignment_1_2()); }
(rule__BSBitwiseXorExpression__RightAssignment_1_2)
{ after(grammarAccess.getBSBitwiseXorExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSBitwiseAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseAndExpression__Group__0__Impl
	rule__BSBitwiseAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseAndExpressionAccess().getBSEqualityExpressionParserRuleCall_0()); }
	ruleBSEqualityExpression
{ after(grammarAccess.getBSBitwiseAndExpressionAccess().getBSEqualityExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBitwiseAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseAndExpressionAccess().getGroup_1()); }
(rule__BSBitwiseAndExpression__Group_1__0)*
{ after(grammarAccess.getBSBitwiseAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSBitwiseAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseAndExpression__Group_1__0__Impl
	rule__BSBitwiseAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseAndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseAndExpressionAccess().getBSBitwiseAndExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBSBitwiseAndExpressionAccess().getBSBitwiseAndExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBitwiseAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseAndExpression__Group_1__1__Impl
	rule__BSBitwiseAndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseAndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseAndExpressionAccess().getAmpersandKeyword_1_1()); }

	Ampersand 

{ after(grammarAccess.getBSBitwiseAndExpressionAccess().getAmpersandKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBitwiseAndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseAndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseAndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseAndExpressionAccess().getRightAssignment_1_2()); }
(rule__BSBitwiseAndExpression__RightAssignment_1_2)
{ after(grammarAccess.getBSBitwiseAndExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSEqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSEqualityExpression__Group__0__Impl
	rule__BSEqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSEqualityExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSEqualityExpressionAccess().getBSOrderedRelationExpressionParserRuleCall_0()); }
	ruleBSOrderedRelationExpression
{ after(grammarAccess.getBSEqualityExpressionAccess().getBSOrderedRelationExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSEqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSEqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSEqualityExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSEqualityExpressionAccess().getGroup_1()); }
(rule__BSEqualityExpression__Group_1__0)*
{ after(grammarAccess.getBSEqualityExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSEqualityExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSEqualityExpression__Group_1__0__Impl
	rule__BSEqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSEqualityExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSEqualityExpressionAccess().getBSEqualityExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBSEqualityExpressionAccess().getBSEqualityExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSEqualityExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSEqualityExpression__Group_1__1__Impl
	rule__BSEqualityExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSEqualityExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSEqualityExpressionAccess().getOperatorAssignment_1_1()); }
(rule__BSEqualityExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getBSEqualityExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSEqualityExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSEqualityExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSEqualityExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSEqualityExpressionAccess().getRightAssignment_1_2()); }
(rule__BSEqualityExpression__RightAssignment_1_2)
{ after(grammarAccess.getBSEqualityExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSOrderedRelationExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSOrderedRelationExpression__Group__0__Impl
	rule__BSOrderedRelationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSOrderedRelationExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSOrderedRelationExpressionAccess().getBSBitwiseShiftExpressionParserRuleCall_0()); }
	ruleBSBitwiseShiftExpression
{ after(grammarAccess.getBSOrderedRelationExpressionAccess().getBSBitwiseShiftExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSOrderedRelationExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSOrderedRelationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSOrderedRelationExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSOrderedRelationExpressionAccess().getGroup_1()); }
(rule__BSOrderedRelationExpression__Group_1__0)*
{ after(grammarAccess.getBSOrderedRelationExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSOrderedRelationExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSOrderedRelationExpression__Group_1__0__Impl
	rule__BSOrderedRelationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSOrderedRelationExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSOrderedRelationExpressionAccess().getBSOrderedRelationExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBSOrderedRelationExpressionAccess().getBSOrderedRelationExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSOrderedRelationExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSOrderedRelationExpression__Group_1__1__Impl
	rule__BSOrderedRelationExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSOrderedRelationExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorAssignment_1_1()); }
(rule__BSOrderedRelationExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSOrderedRelationExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSOrderedRelationExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSOrderedRelationExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSOrderedRelationExpressionAccess().getRightAssignment_1_2()); }
(rule__BSOrderedRelationExpression__RightAssignment_1_2)
{ after(grammarAccess.getBSOrderedRelationExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSBitwiseShiftExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseShiftExpression__Group__0__Impl
	rule__BSBitwiseShiftExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseShiftExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseShiftExpressionAccess().getBSPlusMinusOrStringConcatExpressionParserRuleCall_0()); }
	ruleBSPlusMinusOrStringConcatExpression
{ after(grammarAccess.getBSBitwiseShiftExpressionAccess().getBSPlusMinusOrStringConcatExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBitwiseShiftExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseShiftExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseShiftExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseShiftExpressionAccess().getGroup_1()); }
(rule__BSBitwiseShiftExpression__Group_1__0)*
{ after(grammarAccess.getBSBitwiseShiftExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSBitwiseShiftExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseShiftExpression__Group_1__0__Impl
	rule__BSBitwiseShiftExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseShiftExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseShiftExpressionAccess().getBSBitwiseShiftExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBSBitwiseShiftExpressionAccess().getBSBitwiseShiftExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBitwiseShiftExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseShiftExpression__Group_1__1__Impl
	rule__BSBitwiseShiftExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseShiftExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseShiftExpressionAccess().getOperatorAssignment_1_1()); }
(rule__BSBitwiseShiftExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getBSBitwiseShiftExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSBitwiseShiftExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSBitwiseShiftExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseShiftExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseShiftExpressionAccess().getRightAssignment_1_2()); }
(rule__BSBitwiseShiftExpression__RightAssignment_1_2)
{ after(grammarAccess.getBSBitwiseShiftExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSPlusMinusOrStringConcatExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSPlusMinusOrStringConcatExpression__Group__0__Impl
	rule__BSPlusMinusOrStringConcatExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSPlusMinusOrStringConcatExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getBSMulDivOrModExpressionParserRuleCall_0()); }
	ruleBSMulDivOrModExpression
{ after(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getBSMulDivOrModExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSPlusMinusOrStringConcatExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSPlusMinusOrStringConcatExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSPlusMinusOrStringConcatExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getGroup_1()); }
(rule__BSPlusMinusOrStringConcatExpression__Group_1__0)*
{ after(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSPlusMinusOrStringConcatExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSPlusMinusOrStringConcatExpression__Group_1__0__Impl
	rule__BSPlusMinusOrStringConcatExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSPlusMinusOrStringConcatExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getBSPlusMinusOrStringConcatExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getBSPlusMinusOrStringConcatExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSPlusMinusOrStringConcatExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSPlusMinusOrStringConcatExpression__Group_1__1__Impl
	rule__BSPlusMinusOrStringConcatExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSPlusMinusOrStringConcatExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorAssignment_1_1()); }
(rule__BSPlusMinusOrStringConcatExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSPlusMinusOrStringConcatExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSPlusMinusOrStringConcatExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSPlusMinusOrStringConcatExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getRightAssignment_1_2()); }
(rule__BSPlusMinusOrStringConcatExpression__RightAssignment_1_2)
{ after(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSMulDivOrModExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMulDivOrModExpression__Group__0__Impl
	rule__BSMulDivOrModExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMulDivOrModExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMulDivOrModExpressionAccess().getBSCastOrNewExpressionParserRuleCall_0()); }
	ruleBSCastOrNewExpression
{ after(grammarAccess.getBSMulDivOrModExpressionAccess().getBSCastOrNewExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSMulDivOrModExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMulDivOrModExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMulDivOrModExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMulDivOrModExpressionAccess().getGroup_1()); }
(rule__BSMulDivOrModExpression__Group_1__0)*
{ after(grammarAccess.getBSMulDivOrModExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSMulDivOrModExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMulDivOrModExpression__Group_1__0__Impl
	rule__BSMulDivOrModExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMulDivOrModExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMulDivOrModExpressionAccess().getBSMulDivOrModExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBSMulDivOrModExpressionAccess().getBSMulDivOrModExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSMulDivOrModExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMulDivOrModExpression__Group_1__1__Impl
	rule__BSMulDivOrModExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMulDivOrModExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMulDivOrModExpressionAccess().getOperatorAssignment_1_1()); }
(rule__BSMulDivOrModExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getBSMulDivOrModExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSMulDivOrModExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSMulDivOrModExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSMulDivOrModExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMulDivOrModExpressionAccess().getRightAssignment_1_2()); }
(rule__BSMulDivOrModExpression__RightAssignment_1_2)
{ after(grammarAccess.getBSMulDivOrModExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSCastOrNewExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_1__0__Impl
	rule__BSCastOrNewExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getBSCastExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getBSCastOrNewExpressionAccess().getBSCastExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCastOrNewExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_1__1__Impl
	rule__BSCastOrNewExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getLeftParenthesisKeyword_1_1()); }

	LeftParenthesis 

{ after(grammarAccess.getBSCastOrNewExpressionAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCastOrNewExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_1__2__Impl
	rule__BSCastOrNewExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getCastTypeAssignment_1_2()); }
(rule__BSCastOrNewExpression__CastTypeAssignment_1_2)
{ after(grammarAccess.getBSCastOrNewExpressionAccess().getCastTypeAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCastOrNewExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_1__3__Impl
	rule__BSCastOrNewExpression__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getRightParenthesisKeyword_1_3()); }

	RightParenthesis 

{ after(grammarAccess.getBSCastOrNewExpressionAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCastOrNewExpression__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getCastExprAssignment_1_4()); }
(rule__BSCastOrNewExpression__CastExprAssignment_1_4)
{ after(grammarAccess.getBSCastOrNewExpressionAccess().getCastExprAssignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__BSCastOrNewExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_2__0__Impl
	rule__BSCastOrNewExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getBSNewExpressionAction_2_0()); }
(

)
{ after(grammarAccess.getBSCastOrNewExpressionAccess().getBSNewExpressionAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCastOrNewExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_2__1__Impl
	rule__BSCastOrNewExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getNewKeyword_2_1()); }

	New 

{ after(grammarAccess.getBSCastOrNewExpressionAccess().getNewKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCastOrNewExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_2__2__Impl
	rule__BSCastOrNewExpression__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getGroup_2_2()); }
(rule__BSCastOrNewExpression__Group_2_2__0)?
{ after(grammarAccess.getBSCastOrNewExpressionAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCastOrNewExpression__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_2__3__Impl
	rule__BSCastOrNewExpression__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getTypeAssignment_2_3()); }
(rule__BSCastOrNewExpression__TypeAssignment_2_3)
{ after(grammarAccess.getBSCastOrNewExpressionAccess().getTypeAssignment_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCastOrNewExpression__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_2__4__Impl
	rule__BSCastOrNewExpression__Group_2__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getLeftParenthesisKeyword_2_4()); }

	LeftParenthesis 

{ after(grammarAccess.getBSCastOrNewExpressionAccess().getLeftParenthesisKeyword_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCastOrNewExpression__Group_2__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_2__5__Impl
	rule__BSCastOrNewExpression__Group_2__6
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_2__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getGroup_2_5()); }
(rule__BSCastOrNewExpression__Group_2_5__0)?
{ after(grammarAccess.getBSCastOrNewExpressionAccess().getGroup_2_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCastOrNewExpression__Group_2__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_2__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_2__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getRightParenthesisKeyword_2_6()); }

	RightParenthesis 

{ after(grammarAccess.getBSCastOrNewExpressionAccess().getRightParenthesisKeyword_2_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__BSCastOrNewExpression__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_2_2__0__Impl
	rule__BSCastOrNewExpression__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getIsArrayAssignment_2_2_0()); }
(rule__BSCastOrNewExpression__IsArrayAssignment_2_2_0)
{ after(grammarAccess.getBSCastOrNewExpressionAccess().getIsArrayAssignment_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCastOrNewExpression__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getRightSquareBracketKeyword_2_2_1()); }

	RightSquareBracket 

{ after(grammarAccess.getBSCastOrNewExpressionAccess().getRightSquareBracketKeyword_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSCastOrNewExpression__Group_2_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_2_5__0__Impl
	rule__BSCastOrNewExpression__Group_2_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_2_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getArgsAssignment_2_5_0()); }
(rule__BSCastOrNewExpression__ArgsAssignment_2_5_0)
{ after(grammarAccess.getBSCastOrNewExpressionAccess().getArgsAssignment_2_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCastOrNewExpression__Group_2_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_2_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_2_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getGroup_2_5_1()); }
(rule__BSCastOrNewExpression__Group_2_5_1__0)*
{ after(grammarAccess.getBSCastOrNewExpressionAccess().getGroup_2_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSCastOrNewExpression__Group_2_5_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_2_5_1__0__Impl
	rule__BSCastOrNewExpression__Group_2_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_2_5_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getCommaKeyword_2_5_1_0()); }

	Comma 

{ after(grammarAccess.getBSCastOrNewExpressionAccess().getCommaKeyword_2_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSCastOrNewExpression__Group_2_5_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSCastOrNewExpression__Group_2_5_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__Group_2_5_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getArgsAssignment_2_5_1_1()); }
(rule__BSCastOrNewExpression__ArgsAssignment_2_5_1_1)
{ after(grammarAccess.getBSCastOrNewExpressionAccess().getArgsAssignment_2_5_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSUnaryModifierExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSUnaryModifierExpression__Group_1__0__Impl
	rule__BSUnaryModifierExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSUnaryModifierExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSUnaryModifierExpressionAccess().getBSUnaryModifierExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getBSUnaryModifierExpressionAccess().getBSUnaryModifierExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSUnaryModifierExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSUnaryModifierExpression__Group_1__1__Impl
	rule__BSUnaryModifierExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSUnaryModifierExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorAssignment_1_1()); }
(rule__BSUnaryModifierExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSUnaryModifierExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSUnaryModifierExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSUnaryModifierExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSUnaryModifierExpressionAccess().getReceiverAssignment_1_2()); }
(rule__BSUnaryModifierExpression__ReceiverAssignment_1_2)
{ after(grammarAccess.getBSUnaryModifierExpressionAccess().getReceiverAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSInvokationExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group__0__Impl
	rule__BSInvokationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getBSTerminalExpressionParserRuleCall_0()); }
	ruleBSTerminalExpression
{ after(grammarAccess.getBSInvokationExpressionAccess().getBSTerminalExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSInvokationExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getAlternatives_1()); }
(rule__BSInvokationExpression__Alternatives_1)*
{ after(grammarAccess.getBSInvokationExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSInvokationExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_0__0__Impl
	rule__BSInvokationExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getBSMemberSelectionExpressionReceiverAction_1_0_0()); }
(

)
{ after(grammarAccess.getBSInvokationExpressionAccess().getBSMemberSelectionExpressionReceiverAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSInvokationExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getFullStopKeyword_1_0_1()); }

	FullStop 

{ after(grammarAccess.getBSInvokationExpressionAccess().getFullStopKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSInvokationExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_1__0__Impl
	rule__BSInvokationExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getBSMethodInvokationExpressionReceiverAction_1_1_0()); }
(

)
{ after(grammarAccess.getBSInvokationExpressionAccess().getBSMethodInvokationExpressionReceiverAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSInvokationExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_1__1__Impl
	rule__BSInvokationExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getLeftParenthesisKeyword_1_1_1()); }

	LeftParenthesis 

{ after(grammarAccess.getBSInvokationExpressionAccess().getLeftParenthesisKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSInvokationExpression__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_1__2__Impl
	rule__BSInvokationExpression__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_1_2()); }
(rule__BSInvokationExpression__Group_1_1_2__0)?
{ after(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSInvokationExpression__Group_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getRightParenthesisKeyword_1_1_3()); }

	RightParenthesis 

{ after(grammarAccess.getBSInvokationExpressionAccess().getRightParenthesisKeyword_1_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BSInvokationExpression__Group_1_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_1_2__0__Impl
	rule__BSInvokationExpression__Group_1_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getArgsAssignment_1_1_2_0()); }
(rule__BSInvokationExpression__ArgsAssignment_1_1_2_0)
{ after(grammarAccess.getBSInvokationExpressionAccess().getArgsAssignment_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSInvokationExpression__Group_1_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_1_2_1()); }
(rule__BSInvokationExpression__Group_1_1_2_1__0)*
{ after(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSInvokationExpression__Group_1_1_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_1_2_1__0__Impl
	rule__BSInvokationExpression__Group_1_1_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_1_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getCommaKeyword_1_1_2_1_0()); }

	Comma 

{ after(grammarAccess.getBSInvokationExpressionAccess().getCommaKeyword_1_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSInvokationExpression__Group_1_1_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_1_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_1_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getArgsAssignment_1_1_2_1_1()); }
(rule__BSInvokationExpression__ArgsAssignment_1_1_2_1_1)
{ after(grammarAccess.getBSInvokationExpressionAccess().getArgsAssignment_1_1_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSInvokationExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_2__0__Impl
	rule__BSInvokationExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getBSArrayAccessExpressionReceiverAction_1_2_0()); }
(

)
{ after(grammarAccess.getBSInvokationExpressionAccess().getBSArrayAccessExpressionReceiverAction_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSInvokationExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_2__1__Impl
	rule__BSInvokationExpression__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getLeftSquareBracketKeyword_1_2_1()); }

	LeftSquareBracket 

{ after(grammarAccess.getBSInvokationExpressionAccess().getLeftSquareBracketKeyword_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSInvokationExpression__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_2__2__Impl
	rule__BSInvokationExpression__Group_1_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_2_2()); }
(rule__BSInvokationExpression__Group_1_2_2__0)?
{ after(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSInvokationExpression__Group_1_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getRightSquareBracketKeyword_1_2_3()); }

	RightSquareBracket 

{ after(grammarAccess.getBSInvokationExpressionAccess().getRightSquareBracketKeyword_1_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BSInvokationExpression__Group_1_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_2_2__0__Impl
	rule__BSInvokationExpression__Group_1_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getArgsAssignment_1_2_2_0()); }
(rule__BSInvokationExpression__ArgsAssignment_1_2_2_0)
{ after(grammarAccess.getBSInvokationExpressionAccess().getArgsAssignment_1_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSInvokationExpression__Group_1_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_2_2_1()); }
(rule__BSInvokationExpression__Group_1_2_2_1__0)*
{ after(grammarAccess.getBSInvokationExpressionAccess().getGroup_1_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSInvokationExpression__Group_1_2_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_2_2_1__0__Impl
	rule__BSInvokationExpression__Group_1_2_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_2_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getCommaKeyword_1_2_2_1_0()); }

	Comma 

{ after(grammarAccess.getBSInvokationExpressionAccess().getCommaKeyword_1_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSInvokationExpression__Group_1_2_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_2_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_2_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getArgsAssignment_1_2_2_1_1()); }
(rule__BSInvokationExpression__ArgsAssignment_1_2_2_1_1)
{ after(grammarAccess.getBSInvokationExpressionAccess().getArgsAssignment_1_2_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSInvokationExpression__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_3__0__Impl
	rule__BSInvokationExpression__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getBSPostfixArithmeticExpressionReceiverAction_1_3_0()); }
(

)
{ after(grammarAccess.getBSInvokationExpressionAccess().getBSPostfixArithmeticExpressionReceiverAction_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSInvokationExpression__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSInvokationExpression__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getOperatorAssignment_1_3_1()); }
(rule__BSInvokationExpression__OperatorAssignment_1_3_1)
{ after(grammarAccess.getBSInvokationExpressionAccess().getOperatorAssignment_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSTerminalExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_0__0__Impl
	rule__BSTerminalExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getBSStringConstantAction_0_0()); }
(

)
{ after(grammarAccess.getBSTerminalExpressionAccess().getBSStringConstantAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTerminalExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getValueAssignment_0_1()); }
(rule__BSTerminalExpression__ValueAssignment_0_1)
{ after(grammarAccess.getBSTerminalExpressionAccess().getValueAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSTerminalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_1__0__Impl
	rule__BSTerminalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getBSHexadecimalConstantAction_1_0()); }
(

)
{ after(grammarAccess.getBSTerminalExpressionAccess().getBSHexadecimalConstantAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTerminalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getValueAssignment_1_1()); }
(rule__BSTerminalExpression__ValueAssignment_1_1)
{ after(grammarAccess.getBSTerminalExpressionAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSTerminalExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_2__0__Impl
	rule__BSTerminalExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getBSNumberConstantAction_2_0()); }
(

)
{ after(grammarAccess.getBSTerminalExpressionAccess().getBSNumberConstantAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTerminalExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_2__1__Impl
	rule__BSTerminalExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getValueAssignment_2_1()); }
(rule__BSTerminalExpression__ValueAssignment_2_1)
{ after(grammarAccess.getBSTerminalExpressionAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTerminalExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getGroup_2_2()); }
(rule__BSTerminalExpression__Group_2_2__0)?
{ after(grammarAccess.getBSTerminalExpressionAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSTerminalExpression__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_2_2__0__Impl
	rule__BSTerminalExpression__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getBSRealConstantLeftAction_2_2_0()); }
(

)
{ after(grammarAccess.getBSTerminalExpressionAccess().getBSRealConstantLeftAction_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTerminalExpression__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_2_2__1__Impl
	rule__BSTerminalExpression__Group_2_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getFullStopKeyword_2_2_1()); }

	FullStop 

{ after(grammarAccess.getBSTerminalExpressionAccess().getFullStopKeyword_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTerminalExpression__Group_2_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_2_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_2_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getRightAssignment_2_2_2()); }
(rule__BSTerminalExpression__RightAssignment_2_2_2)
{ after(grammarAccess.getBSTerminalExpressionAccess().getRightAssignment_2_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BSTerminalExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_3__0__Impl
	rule__BSTerminalExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getBSBooleanConstantAction_3_0()); }
(

)
{ after(grammarAccess.getBSTerminalExpressionAccess().getBSBooleanConstantAction_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTerminalExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getValueAssignment_3_1()); }
(rule__BSTerminalExpression__ValueAssignment_3_1)
{ after(grammarAccess.getBSTerminalExpressionAccess().getValueAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSTerminalExpression__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_4__0__Impl
	rule__BSTerminalExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getBSNullLiteralAction_4_0()); }
(

)
{ after(grammarAccess.getBSTerminalExpressionAccess().getBSNullLiteralAction_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTerminalExpression__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getNullKeyword_4_1()); }

	Null 

{ after(grammarAccess.getBSTerminalExpressionAccess().getNullKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSTerminalExpression__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_5__0__Impl
	rule__BSTerminalExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getBSBreakLiteralAction_5_0()); }
(

)
{ after(grammarAccess.getBSTerminalExpressionAccess().getBSBreakLiteralAction_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTerminalExpression__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getBreakKeyword_5_1()); }

	Break 

{ after(grammarAccess.getBSTerminalExpressionAccess().getBreakKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSTerminalExpression__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_6__0__Impl
	rule__BSTerminalExpression__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getBSContinueLiteralAction_6_0()); }
(

)
{ after(grammarAccess.getBSTerminalExpressionAccess().getBSContinueLiteralAction_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTerminalExpression__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getContinueKeyword_6_1()); }

	Continue 

{ after(grammarAccess.getBSTerminalExpressionAccess().getContinueKeyword_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSTerminalExpression__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_7__0__Impl
	rule__BSTerminalExpression__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getBSThisLiteralAction_7_0()); }
(

)
{ after(grammarAccess.getBSTerminalExpressionAccess().getBSThisLiteralAction_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTerminalExpression__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getThisKeyword_7_1()); }

	This 

{ after(grammarAccess.getBSTerminalExpressionAccess().getThisKeyword_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSTerminalExpression__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_8__0__Impl
	rule__BSTerminalExpression__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getBSClientLiteralAction_8_0()); }
(

)
{ after(grammarAccess.getBSTerminalExpressionAccess().getBSClientLiteralAction_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTerminalExpression__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getClientKeyword_8_1()); }

	Client 

{ after(grammarAccess.getBSTerminalExpressionAccess().getClientKeyword_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSTerminalExpression__Group_9__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_9__0__Impl
	rule__BSTerminalExpression__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_9__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getBSParentLiteralAction_9_0()); }
(

)
{ after(grammarAccess.getBSTerminalExpressionAccess().getBSParentLiteralAction_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTerminalExpression__Group_9__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_9__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_9__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getParentKeyword_9_1()); }

	Parent 

{ after(grammarAccess.getBSTerminalExpressionAccess().getParentKeyword_9_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSTerminalExpression__Group_10__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_10__0__Impl
	rule__BSTerminalExpression__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_10__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getBSSymbolRefAction_10_0()); }
(

)
{ after(grammarAccess.getBSTerminalExpressionAccess().getBSSymbolRefAction_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTerminalExpression__Group_10__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_10__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_10__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getSymbolAssignment_10_1()); }
(rule__BSTerminalExpression__SymbolAssignment_10_1)
{ after(grammarAccess.getBSTerminalExpressionAccess().getSymbolAssignment_10_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BSTerminalExpression__Group_11__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_11__0__Impl
	rule__BSTerminalExpression__Group_11__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_11__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getBSParentheticalExpressionAction_11_0()); }
(

)
{ after(grammarAccess.getBSTerminalExpressionAccess().getBSParentheticalExpressionAction_11_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTerminalExpression__Group_11__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_11__1__Impl
	rule__BSTerminalExpression__Group_11__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_11__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getLeftParenthesisKeyword_11_1()); }

	LeftParenthesis 

{ after(grammarAccess.getBSTerminalExpressionAccess().getLeftParenthesisKeyword_11_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTerminalExpression__Group_11__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_11__2__Impl
	rule__BSTerminalExpression__Group_11__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_11__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getExpressionAssignment_11_2()); }
(rule__BSTerminalExpression__ExpressionAssignment_11_2)
{ after(grammarAccess.getBSTerminalExpressionAccess().getExpressionAssignment_11_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BSTerminalExpression__Group_11__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BSTerminalExpression__Group_11__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__Group_11__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getRightParenthesisKeyword_11_3()); }

	RightParenthesis 

{ after(grammarAccess.getBSTerminalExpressionAccess().getRightParenthesisKeyword_11_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__BSFile__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFileAccess().getNameQualifiedNameParserRuleCall_0_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getBSFileAccess().getNameQualifiedNameParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSFile__ImportsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFileAccess().getImportsBSImportParserRuleCall_1_0()); }
	ruleBSImport{ after(grammarAccess.getBSFileAccess().getImportsBSImportParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSFile__ClassesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFileAccess().getClassesBSClassParserRuleCall_2_0()); }
	ruleBSClass{ after(grammarAccess.getBSFileAccess().getClassesBSClassParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSImport__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
	ruleQualifiedNameWithWildcard{ after(grammarAccess.getBSImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSClass__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSClassAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getBSClassAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSClass__SuperclassAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSClassAccess().getSuperclassBSClassCrossReference_2_1_0()); }
(
{ before(grammarAccess.getBSClassAccess().getSuperclassBSClassQualifiedNameParserRuleCall_2_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getBSClassAccess().getSuperclassBSClassQualifiedNameParserRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getBSClassAccess().getSuperclassBSClassCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSClass__MembersAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSClassAccess().getMembersBSMemberParserRuleCall_4_0()); }
	ruleBSMember{ after(grammarAccess.getBSClassAccess().getMembersBSMemberParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSField__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFieldAccess().getTypeBSClassCrossReference_0_0()); }
(
{ before(grammarAccess.getBSFieldAccess().getTypeBSClassQualifiedNameParserRuleCall_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getBSFieldAccess().getTypeBSClassQualifiedNameParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getBSFieldAccess().getTypeBSClassCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSField__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFieldAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getBSFieldAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSField__IsArrayAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSFieldAccess().getIsArrayLeftSquareBracketKeyword_2_0_0()); }
(
{ before(grammarAccess.getBSFieldAccess().getIsArrayLeftSquareBracketKeyword_2_0_0()); }

	LeftSquareBracket 

{ after(grammarAccess.getBSFieldAccess().getIsArrayLeftSquareBracketKeyword_2_0_0()); }
)

{ after(grammarAccess.getBSFieldAccess().getIsArrayLeftSquareBracketKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethod__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodAccess().getTypeBSClassCrossReference_0_0()); }
(
{ before(grammarAccess.getBSMethodAccess().getTypeBSClassQualifiedNameParserRuleCall_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getBSMethodAccess().getTypeBSClassQualifiedNameParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getBSMethodAccess().getTypeBSClassCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethod__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getBSMethodAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethod__ParamsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodAccess().getParamsBSParameterParserRuleCall_3_0_0()); }
	ruleBSParameter{ after(grammarAccess.getBSMethodAccess().getParamsBSParameterParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethod__ParamsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodAccess().getParamsBSParameterParserRuleCall_3_1_1_0()); }
	ruleBSParameter{ after(grammarAccess.getBSMethodAccess().getParamsBSParameterParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethod__BodyAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodAccess().getBodyBSMethodBodyParserRuleCall_5_0()); }
	ruleBSMethodBody{ after(grammarAccess.getBSMethodAccess().getBodyBSMethodBodyParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSParameter__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSParameterAccess().getTypeBSClassCrossReference_0_0()); }
(
{ before(grammarAccess.getBSParameterAccess().getTypeBSClassQualifiedNameParserRuleCall_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getBSParameterAccess().getTypeBSClassQualifiedNameParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getBSParameterAccess().getTypeBSClassCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSParameter__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSParameterAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getBSParameterAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSParameter__IsArrayAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSParameterAccess().getIsArrayLeftSquareBracketKeyword_2_0_0()); }
(
{ before(grammarAccess.getBSParameterAccess().getIsArrayLeftSquareBracketKeyword_2_0_0()); }

	LeftSquareBracket 

{ after(grammarAccess.getBSParameterAccess().getIsArrayLeftSquareBracketKeyword_2_0_0()); }
)

{ after(grammarAccess.getBSParameterAccess().getIsArrayLeftSquareBracketKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSMethodBody__StatementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMethodBodyAccess().getStatementsBSStatementParserRuleCall_2_0()); }
	ruleBSStatement{ after(grammarAccess.getBSMethodBodyAccess().getStatementsBSStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSReturn__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSReturnAccess().getExpressionBSExpressionParserRuleCall_1_0()); }
	ruleBSExpression{ after(grammarAccess.getBSReturnAccess().getExpressionBSExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSVariableDeclaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSVariableDeclarationAccess().getTypeBSClassCrossReference_0_0()); }
(
{ before(grammarAccess.getBSVariableDeclarationAccess().getTypeBSClassQualifiedNameParserRuleCall_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getBSVariableDeclarationAccess().getTypeBSClassQualifiedNameParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getBSVariableDeclarationAccess().getTypeBSClassCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSVariableDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getBSVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSVariableDeclaration__ExpressionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSVariableDeclarationAccess().getExpressionBSExpressionParserRuleCall_2_1_0()); }
	ruleBSExpression{ after(grammarAccess.getBSVariableDeclarationAccess().getExpressionBSExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfStatement__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfStatementAccess().getExpressionBSExpressionParserRuleCall_2_0()); }
	ruleBSExpression{ after(grammarAccess.getBSIfStatementAccess().getExpressionBSExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfStatement__ThenBlockAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfStatementAccess().getThenBlockBSIfBlockParserRuleCall_4_0()); }
	ruleBSIfBlock{ after(grammarAccess.getBSIfStatementAccess().getThenBlockBSIfBlockParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfStatement__ElseBlockAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfStatementAccess().getElseBlockBSIfBlockParserRuleCall_5_1_0()); }
	ruleBSIfBlock{ after(grammarAccess.getBSIfStatementAccess().getElseBlockBSIfBlockParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSWhileLoop__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSWhileLoopAccess().getExpressionBSExpressionParserRuleCall_2_0()); }
	ruleBSExpression{ after(grammarAccess.getBSWhileLoopAccess().getExpressionBSExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSWhileLoop__BlockAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSWhileLoopAccess().getBlockBSLoopBlockParserRuleCall_4_0()); }
	ruleBSLoopBlock{ after(grammarAccess.getBSWhileLoopAccess().getBlockBSLoopBlockParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSForLoop__LeftAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSForLoopAccess().getLeftBSExpressionParserRuleCall_2_0()); }
	ruleBSExpression{ after(grammarAccess.getBSForLoopAccess().getLeftBSExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSForLoop__MiddleAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSForLoopAccess().getMiddleBSExpressionParserRuleCall_4_0()); }
	ruleBSExpression{ after(grammarAccess.getBSForLoopAccess().getMiddleBSExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSForLoop__RightAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSForLoopAccess().getRightBSExpressionParserRuleCall_6_0()); }
	ruleBSExpression{ after(grammarAccess.getBSForLoopAccess().getRightBSExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSForLoop__BlockAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSForLoopAccess().getBlockBSLoopBlockParserRuleCall_8_0()); }
	ruleBSLoopBlock{ after(grammarAccess.getBSForLoopAccess().getBlockBSLoopBlockParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSSwitchStatement__StringSwitchAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSSwitchStatementAccess().getStringSwitchDollarSignKeyword_1_0()); }
(
{ before(grammarAccess.getBSSwitchStatementAccess().getStringSwitchDollarSignKeyword_1_0()); }

	DollarSign 

{ after(grammarAccess.getBSSwitchStatementAccess().getStringSwitchDollarSignKeyword_1_0()); }
)

{ after(grammarAccess.getBSSwitchStatementAccess().getStringSwitchDollarSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSSwitchStatement__ExpressionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSSwitchStatementAccess().getExpressionBSExpressionParserRuleCall_3_0()); }
	ruleBSExpression{ after(grammarAccess.getBSSwitchStatementAccess().getExpressionBSExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSSwitchStatement__BlockAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSSwitchStatementAccess().getBlockBSSwitchBlockParserRuleCall_5_0()); }
	ruleBSSwitchBlock{ after(grammarAccess.getBSSwitchStatementAccess().getBlockBSSwitchBlockParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfBlock__StatementsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfBlockAccess().getStatementsBSStatementParserRuleCall_0_0()); }
	ruleBSStatement{ after(grammarAccess.getBSIfBlockAccess().getStatementsBSStatementParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSIfBlock__StatementsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSIfBlockAccess().getStatementsBSStatementParserRuleCall_1_2_0()); }
	ruleBSStatement{ after(grammarAccess.getBSIfBlockAccess().getStatementsBSStatementParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSLoopBlock__StatementsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSLoopBlockAccess().getStatementsBSStatementParserRuleCall_0_0()); }
	ruleBSStatement{ after(grammarAccess.getBSLoopBlockAccess().getStatementsBSStatementParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSLoopBlock__StatementsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSLoopBlockAccess().getStatementsBSStatementParserRuleCall_1_2_0()); }
	ruleBSStatement{ after(grammarAccess.getBSLoopBlockAccess().getStatementsBSStatementParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSSwitchBlock__CasesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSSwitchBlockAccess().getCasesBSCaseParserRuleCall_2_0()); }
	ruleBSCase{ after(grammarAccess.getBSSwitchBlockAccess().getCasesBSCaseParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSCase__ExpressionAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCaseAccess().getExpressionBSExpressionParserRuleCall_0_1_0()); }
	ruleBSExpression{ after(grammarAccess.getBSCaseAccess().getExpressionBSExpressionParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSCase__BlockAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCaseAccess().getBlockBSCaseBlockParserRuleCall_0_3_0()); }
	ruleBSCaseBlock{ after(grammarAccess.getBSCaseAccess().getBlockBSCaseBlockParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSCase__BlockAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCaseAccess().getBlockBSCaseBlockParserRuleCall_1_2_0()); }
	ruleBSCaseBlock{ after(grammarAccess.getBSCaseAccess().getBlockBSCaseBlockParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSCaseBlock__StatementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCaseBlockAccess().getStatementsBSStatementParserRuleCall_1_0()); }
	ruleBSStatement{ after(grammarAccess.getBSCaseBlockAccess().getStatementsBSStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__BSTernaryExpression__MiddleAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTernaryExpressionAccess().getMiddleBSExpressionParserRuleCall_1_2_0()); }
	ruleBSExpression{ after(grammarAccess.getBSTernaryExpressionAccess().getMiddleBSExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSTernaryExpression__RightAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTernaryExpressionAccess().getRightBSExpressionParserRuleCall_1_4_0()); }
	ruleBSExpression{ after(grammarAccess.getBSTernaryExpressionAccess().getRightBSExpressionParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSBooleanOrExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBooleanOrExpressionAccess().getRightBSBooleanAndExpressionParserRuleCall_1_2_0()); }
	ruleBSBooleanAndExpression{ after(grammarAccess.getBSBooleanOrExpressionAccess().getRightBSBooleanAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSBooleanAndExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBooleanAndExpressionAccess().getRightBSBitwiseOrExpressionParserRuleCall_1_2_0()); }
	ruleBSBitwiseOrExpression{ after(grammarAccess.getBSBooleanAndExpressionAccess().getRightBSBitwiseOrExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseOrExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseOrExpressionAccess().getRightBSBitwiseXorExpressionParserRuleCall_1_2_0()); }
	ruleBSBitwiseXorExpression{ after(grammarAccess.getBSBitwiseOrExpressionAccess().getRightBSBitwiseXorExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseXorExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseXorExpressionAccess().getRightBSBitwiseAndExpressionParserRuleCall_1_2_0()); }
	ruleBSBitwiseAndExpression{ after(grammarAccess.getBSBitwiseXorExpressionAccess().getRightBSBitwiseAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseAndExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseAndExpressionAccess().getRightBSEqualityExpressionParserRuleCall_1_2_0()); }
	ruleBSEqualityExpression{ after(grammarAccess.getBSBitwiseAndExpressionAccess().getRightBSEqualityExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSEqualityExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSEqualityExpressionAccess().getOperatorAlternatives_1_1_0()); }
(rule__BSEqualityExpression__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getBSEqualityExpressionAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSEqualityExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSEqualityExpressionAccess().getRightBSOrderedRelationExpressionParserRuleCall_1_2_0()); }
	ruleBSOrderedRelationExpression{ after(grammarAccess.getBSEqualityExpressionAccess().getRightBSOrderedRelationExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSOrderedRelationExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorAlternatives_1_1_0()); }
(rule__BSOrderedRelationExpression__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getBSOrderedRelationExpressionAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSOrderedRelationExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSOrderedRelationExpressionAccess().getRightBSBitwiseShiftExpressionParserRuleCall_1_2_0()); }
	ruleBSBitwiseShiftExpression{ after(grammarAccess.getBSOrderedRelationExpressionAccess().getRightBSBitwiseShiftExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseShiftExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseShiftExpressionAccess().getOperatorAlternatives_1_1_0()); }
(rule__BSBitwiseShiftExpression__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getBSBitwiseShiftExpressionAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSBitwiseShiftExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSBitwiseShiftExpressionAccess().getRightBSPlusMinusOrStringConcatExpressionParserRuleCall_1_2_0()); }
	ruleBSPlusMinusOrStringConcatExpression{ after(grammarAccess.getBSBitwiseShiftExpressionAccess().getRightBSPlusMinusOrStringConcatExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSPlusMinusOrStringConcatExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorAlternatives_1_1_0()); }
(rule__BSPlusMinusOrStringConcatExpression__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSPlusMinusOrStringConcatExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getRightBSMulDivOrModExpressionParserRuleCall_1_2_0()); }
	ruleBSMulDivOrModExpression{ after(grammarAccess.getBSPlusMinusOrStringConcatExpressionAccess().getRightBSMulDivOrModExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSMulDivOrModExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMulDivOrModExpressionAccess().getOperatorAlternatives_1_1_0()); }
(rule__BSMulDivOrModExpression__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getBSMulDivOrModExpressionAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSMulDivOrModExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSMulDivOrModExpressionAccess().getRightBSCastOrNewExpressionParserRuleCall_1_2_0()); }
	ruleBSCastOrNewExpression{ after(grammarAccess.getBSMulDivOrModExpressionAccess().getRightBSCastOrNewExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__CastTypeAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getCastTypeAlternatives_1_2_0()); }
(rule__BSCastOrNewExpression__CastTypeAlternatives_1_2_0)
{ after(grammarAccess.getBSCastOrNewExpressionAccess().getCastTypeAlternatives_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__CastExprAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getCastExprBSCastOrNewExpressionParserRuleCall_1_4_0()); }
	ruleBSCastOrNewExpression{ after(grammarAccess.getBSCastOrNewExpressionAccess().getCastExprBSCastOrNewExpressionParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__IsArrayAssignment_2_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getIsArrayLeftSquareBracketKeyword_2_2_0_0()); }
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getIsArrayLeftSquareBracketKeyword_2_2_0_0()); }

	LeftSquareBracket 

{ after(grammarAccess.getBSCastOrNewExpressionAccess().getIsArrayLeftSquareBracketKeyword_2_2_0_0()); }
)

{ after(grammarAccess.getBSCastOrNewExpressionAccess().getIsArrayLeftSquareBracketKeyword_2_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__TypeAssignment_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getTypeBSClassCrossReference_2_3_0()); }
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getTypeBSClassQualifiedNameParserRuleCall_2_3_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getBSCastOrNewExpressionAccess().getTypeBSClassQualifiedNameParserRuleCall_2_3_0_1()); }
)
{ after(grammarAccess.getBSCastOrNewExpressionAccess().getTypeBSClassCrossReference_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__ArgsAssignment_2_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getArgsBSExpressionParserRuleCall_2_5_0_0()); }
	ruleBSExpression{ after(grammarAccess.getBSCastOrNewExpressionAccess().getArgsBSExpressionParserRuleCall_2_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSCastOrNewExpression__ArgsAssignment_2_5_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSCastOrNewExpressionAccess().getArgsBSExpressionParserRuleCall_2_5_1_1_0()); }
	ruleBSExpression{ after(grammarAccess.getBSCastOrNewExpressionAccess().getArgsBSExpressionParserRuleCall_2_5_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSUnaryModifierExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorAlternatives_1_1_0()); }
(rule__BSUnaryModifierExpression__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getBSUnaryModifierExpressionAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSUnaryModifierExpression__ReceiverAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSUnaryModifierExpressionAccess().getReceiverBSUnaryModifierExpressionParserRuleCall_1_2_0()); }
	ruleBSUnaryModifierExpression{ after(grammarAccess.getBSUnaryModifierExpressionAccess().getReceiverBSUnaryModifierExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__ArgsAssignment_1_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getArgsBSExpressionParserRuleCall_1_1_2_0_0()); }
	ruleBSExpression{ after(grammarAccess.getBSInvokationExpressionAccess().getArgsBSExpressionParserRuleCall_1_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__ArgsAssignment_1_1_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getArgsBSExpressionParserRuleCall_1_1_2_1_1_0()); }
	ruleBSExpression{ after(grammarAccess.getBSInvokationExpressionAccess().getArgsBSExpressionParserRuleCall_1_1_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__ArgsAssignment_1_2_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getArgsBSExpressionParserRuleCall_1_2_2_0_0()); }
	ruleBSExpression{ after(grammarAccess.getBSInvokationExpressionAccess().getArgsBSExpressionParserRuleCall_1_2_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__ArgsAssignment_1_2_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getArgsBSExpressionParserRuleCall_1_2_2_1_1_0()); }
	ruleBSExpression{ after(grammarAccess.getBSInvokationExpressionAccess().getArgsBSExpressionParserRuleCall_1_2_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSInvokationExpression__OperatorAssignment_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSInvokationExpressionAccess().getOperatorAlternatives_1_3_1_0()); }
(rule__BSInvokationExpression__OperatorAlternatives_1_3_1_0)
{ after(grammarAccess.getBSInvokationExpressionAccess().getOperatorAlternatives_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__ValueAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_0_1_0()); }
	RULE_STRING{ after(grammarAccess.getBSTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getValueHEX_VALUETerminalRuleCall_1_1_0()); }
	RULE_HEX_VALUE{ after(grammarAccess.getBSTerminalExpressionAccess().getValueHEX_VALUETerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getValueINTTerminalRuleCall_2_1_0()); }
	RULE_INT{ after(grammarAccess.getBSTerminalExpressionAccess().getValueINTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__RightAssignment_2_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getRightINTTerminalRuleCall_2_2_2_0()); }
	RULE_INT{ after(grammarAccess.getBSTerminalExpressionAccess().getRightINTTerminalRuleCall_2_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__ValueAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getValueAlternatives_3_1_0()); }
(rule__BSTerminalExpression__ValueAlternatives_3_1_0)
{ after(grammarAccess.getBSTerminalExpressionAccess().getValueAlternatives_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__SymbolAssignment_10_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getSymbolBSSymbolCrossReference_10_1_0()); }
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getSymbolBSSymbolIDTerminalRuleCall_10_1_0_1()); }
	RULE_ID{ after(grammarAccess.getBSTerminalExpressionAccess().getSymbolBSSymbolIDTerminalRuleCall_10_1_0_1()); }
)
{ after(grammarAccess.getBSTerminalExpressionAccess().getSymbolBSSymbolCrossReference_10_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BSTerminalExpression__ExpressionAssignment_11_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBSTerminalExpressionAccess().getExpressionBSExpressionParserRuleCall_11_2_0()); }
	ruleBSExpression{ after(grammarAccess.getBSTerminalExpressionAccess().getExpressionBSExpressionParserRuleCall_11_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


