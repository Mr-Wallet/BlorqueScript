package org.example.blorquescript.tests

import com.google.inject.Inject
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.eclipse.xtext.junit4.validation.ValidationTestHelper
import org.example.blorquescript.BlorqueScriptInjectorProvider
import org.example.blorquescript.blorqueScript.BSClass
import org.example.blorquescript.blorqueScript.BSFile
import org.example.blorquescript.blorqueScript.BSMethod
import org.example.blorquescript.blorqueScript.BSStatement
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*
import org.example.blorquescript.blorqueScript.BSField

@RunWith(typeof(XtextRunner))
@InjectWith(typeof(BlorqueScriptInjectorProvider))
class BlorqueScriptParserTest {
	@Inject extension ParseHelper<BSFile>
	@Inject extension ValidationTestHelper
	
	@Test def void testEmptyClassDeclaration() {
		val file = '''
		class A {}
		'''.parse;
		
		assertNoErrors(file);
		assertTrue('File should be a file', file instanceof BSFile);
		
		assertEquals('File should have one member', 1, file.classes.size);
		val class = file.classes.get(0);
		assertTrue('File\'s member should be a class', class instanceof BSClass);
		assertEquals('Class should have a name', 'A', class.name);
	}
	
	@Test def void testFieldDeclaration() {
		val file = '''
		class A {
			A f0;
			A f1[];
		}
		'''.parse;
		
		assertNoErrors(file);
		
		val class = file.classes.get(0);
		assertEquals('Class should have two members', 2, class.members.size);
		val field0 = class.members.get(0);
		val field1 = class.members.get(1);
		assertTrue('members should be fields', field0 instanceof BSField);
		assertTrue('members should be fields', field1 instanceof BSField);
		assertEquals('fields should have names', 'f0', field0.name);
		assertEquals('fields should have names', 'f1', field1.name);
		assertEquals('fields should have types', 'A', (field0 as BSField).type.name);
		assertEquals('fields should have types', 'A', (field1 as BSField).type.name);
		assertFalse('field0 should not be an array', (field0 as BSField).isArray);
		assertTrue('field1 should be an array', (field1 as BSField).isArray);
	}
	
	@Test def void testEmptyMethodDeclaration() {
		val file = '''
		class A {
			void m() {}
		}
		'''.parse;
		
		assertNoErrors(file);
		
		val class = file.classes.get(0);
		assertEquals('Class should have one member', 1, class.members.size);
		val method = class.members.get(0);
		assertTrue('member should be a method', method instanceof BSMethod);
		assertEquals('method should have a name', 'm', method.name);
		assertEquals('method should have no params', 0, (method as BSMethod).params.size);
		assertEquals('method should be void', true, (method as BSMethod).isVoid);
		assertEquals('method should have no return type', null, (method as BSMethod).type);
		assertEquals('method body should have no statements', 0, (method as BSMethod).body.statements.size);
	}
	
	@Test def void testComplexMethodDeclaration() {
		val file = '''
		class A {
			void m0() { return; }
			A f;
			A m1() { f = f; return null; }
			void m2() {}	
		}
		'''.parse;
		
		assertNoErrors(file);
		
		val class = file.classes.get(0);
		assertEquals('Class should have fpur members', 4, class.members.size);
		val method0 = class.members.get(0);
		val field = class.members.get(1);
		val method1 = class.members.get(2);
		val method2 = class.members.get(3);
		assertTrue('member should be a method', method0 instanceof BSMethod);
		assertTrue('member should be a field', field instanceof BSField);
		assertTrue('member should be a method', method1 instanceof BSMethod);
		assertTrue('member should be a method', method2 instanceof BSMethod);
		assertEquals('method should have a name', 'm', method.name);
		assertEquals('method should have no params', 0, (method as BSMethod).params.size);
		assertEquals('method should be void', true, (method as BSMethod).isVoid);
		assertEquals('method should have no return type', null, (method as BSMethod).type);
		assertEquals('method body should have no statements', 0, (method as BSMethod).body.statements.size);
	}
	
	/* PRIVATES */
	
	def private assertAssociativity(BSStatement statement, CharSequence expected) {
		assertEquals(expected.toString, statement.asString);
	} 
	
	def private String asString(BSStatement statement) {
		return '';
	}
}